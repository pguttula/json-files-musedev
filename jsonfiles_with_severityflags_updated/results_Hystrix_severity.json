{
  "requestedTools": null,
  "toolResults": [
    [
      {
        "tag": "Infer"
      },
      {
        "tag": "ToolSuccess",
        "contents": [
          [
            {
              "tnType": "NULL_DEREFERENCE",
              "tnDesc": "object returned by `getInstance().getConcurrencyStrategy()` could be null and is dereferenced by call to `HystrixContextRunnable(...)` at line 33.",
              "tnFile": "hystrix-core/src/main/java/com/netflix/hystrix/strategy/concurrency/HystrixContextRunnable.java",
              "tnLine": 33,
              "tnColumn": -1,
              "tnPatch": null,
              "tnCodeLine": null,
              "tnProcedure": "HystrixContextRunnable.<init>(HystrixCommandAsyncDemo$ContextAwareRxSchedulersHook$1)",
              "tnPhase": "PhaseUnknown",
              "severity":,
              "tnTool": {
                "tag": "Infer"
              }
            },
            {
              "tnType": "NULL_DEREFERENCE",
              "tnDesc": "object returned by `getInstance().getConcurrencyStrategy()` could be null and is dereferenced by call to `HystrixContextCallable(...)` at line 36.",
              "tnFile": "hystrix-core/src/main/java/com/netflix/hystrix/strategy/concurrency/HystrixContextCallable.java",
              "tnLine": 36,
              "tnColumn": -1,
              "tnPatch": null,
              "tnCodeLine": null,
              "tnProcedure": "HystrixContextCallable.<init>(Callable)",
              "tnPhase": "PhaseUnknown",
              "tnTool": {
                "tag": "Infer"
              }
            },
            {
              "tnType": "NULL_DEREFERENCE",
              "tnDesc": "object returned by `getInstance().getConcurrencyStrategy()` could be null and is dereferenced by call to `HystrixContexSchedulerAction(...)` at line 40.",
              "tnFile": "hystrix-core/src/main/java/com/netflix/hystrix/strategy/concurrency/HystrixContexSchedulerAction.java",
              "tnLine": 40,
              "tnColumn": -1,
              "tnPatch": null,
              "tnCodeLine": null,
              "tnProcedure": "HystrixContexSchedulerAction.<init>(Action0)",
              "tnPhase": "PhaseUnknown",
              "tnTool": {
                "tag": "Infer"
              }
            },
            {
              "tnType": "NULL_DEREFERENCE",
              "tnDesc": "object `context` last assigned on line 62 could be null and is dereferenced by call to `clearCache(...)` at line 63.",
              "tnFile": "hystrix-contrib/hystrix-javanica/src/main/java/com/netflix/hystrix/contrib/javanica/aop/aspectj/HystrixCacheAspect.java",
              "tnLine": 63,
              "tnColumn": -1,
              "tnPatch": null,
              "tnCodeLine": null,
              "tnProcedure": "Object HystrixCacheAspect.methodsAnnotatedWithCacheRemove(ProceedingJoinPoint)",
              "tnPhase": "PhaseUnknown",
              "tnTool": {
                "tag": "Infer"
              }
            },
            {
              "tnType": "NULL_DEREFERENCE",
              "tnDesc": "object `metaHolder.method` last assigned on line 60 could be null and is dereferenced by call to `createCacheRemoveInvocationContext(...)` at line 62.",
              "tnFile": "hystrix-contrib/hystrix-javanica/src/main/java/com/netflix/hystrix/contrib/javanica/aop/aspectj/HystrixCacheAspect.java",
              "tnLine": 62,
              "tnColumn": -1,
              "tnPatch": null,
              "tnCodeLine": null,
              "tnProcedure": "Object HystrixCacheAspect.methodsAnnotatedWithCacheRemove(ProceedingJoinPoint)",
              "tnPhase": "PhaseUnknown",
              "tnTool": {
                "tag": "Infer"
              }
            },
            {
              "tnType": "NULL_DEREFERENCE",
              "tnDesc": "object `method` last assigned on line 52 could be null and is dereferenced by call to `getAjcMethodAroundAdvice(...)` at line 59.",
              "tnFile": "hystrix-contrib/hystrix-javanica/src/main/java/com/netflix/hystrix/contrib/javanica/aop/aspectj/HystrixCacheAspect.java",
              "tnLine": 59,
              "tnColumn": -1,
              "tnPatch": null,
              "tnCodeLine": null,
              "tnProcedure": "Object HystrixCacheAspect.methodsAnnotatedWithCacheRemove(ProceedingJoinPoint)",
              "tnPhase": "PhaseUnknown",
              "tnTool": {
                "tag": "Infer"
              }
            },
            {
              "tnType": "NULL_DEREFERENCE",
              "tnDesc": "object `hystrixPropertiesStrategy` last assigned on line 62 could be null and is dereferenced at line 63.",
              "tnFile": "hystrix-core/src/main/java/com/netflix/hystrix/strategy/properties/HystrixPropertiesFactory.java",
              "tnLine": 63,
              "tnColumn": -1,
              "tnPatch": null,
              "tnCodeLine": null,
              "tnProcedure": "HystrixCommandProperties HystrixPropertiesFactory.getCommandProperties(HystrixCommandKey,HystrixCommandProperties$Setter)",
              "tnPhase": "PhaseUnknown",
              "tnTool": {
                "tag": "Infer"
              }
            },
            {
              "tnType": "NULL_DEREFERENCE",
              "tnDesc": "object `method` last assigned on line 88 could be null and is dereferenced at line 90.",
              "tnFile": "hystrix-contrib/hystrix-javanica/src/main/java/com/netflix/hystrix/contrib/javanica/aop/aspectj/HystrixCommandAspect.java",
              "tnLine": 90,
              "tnColumn": -1,
              "tnPatch": null,
              "tnCodeLine": null,
              "tnProcedure": "Object HystrixCommandAspect.methodsAnnotatedWithHystrixCommand(ProceedingJoinPoint)",
              "tnPhase": "PhaseUnknown",
              "tnTool": {
                "tag": "Infer"
              }
            },
            {
              "tnType": "NULL_DEREFERENCE",
              "tnDesc": "object `commandParametrizedType` last assigned on line 109 could be null and is dereferenced by call to `validateParametrizedType(...)` at line 111.",
              "tnFile": "hystrix-contrib/hystrix-javanica/src/main/java/com/netflix/hystrix/contrib/javanica/utils/FallbackMethod.java",
              "tnLine": 111,
              "tnColumn": -1,
              "tnPatch": null,
              "tnCodeLine": null,
              "tnProcedure": "void FallbackMethod.validateReturnType(Method)",
              "tnPhase": "PhaseUnknown",
              "tnTool": {
                "tag": "Infer"
              }
            },
            {
              "tnType": "NULL_DEREFERENCE",
              "tnDesc": "object `commandParametrizedType` last assigned on line 124 could be null and is dereferenced by call to `validateParametrizedType(...)` at line 126.",
              "tnFile": "hystrix-contrib/hystrix-javanica/src/main/java/com/netflix/hystrix/contrib/javanica/utils/FallbackMethod.java",
              "tnLine": 126,
              "tnColumn": -1,
              "tnPatch": null,
              "tnCodeLine": null,
              "tnProcedure": "void FallbackMethod.validateReturnType(Method)",
              "tnPhase": "PhaseUnknown",
              "tnTool": {
                "tag": "Infer"
              }
            },
            {
              "tnType": "NULL_DEREFERENCE",
              "tnDesc": "object `hystrixPropertiesStrategy` last assigned on line 101 could be null and is dereferenced at line 102.",
              "tnFile": "hystrix-core/src/main/java/com/netflix/hystrix/strategy/properties/HystrixPropertiesFactory.java",
              "tnLine": 102,
              "tnColumn": -1,
              "tnPatch": null,
              "tnCodeLine": null,
              "tnProcedure": "HystrixThreadPoolProperties HystrixPropertiesFactory.getThreadPoolProperties(HystrixThreadPoolKey,HystrixThreadPoolProperties$Setter)",
              "tnPhase": "PhaseUnknown",
              "tnTool": {
                "tag": "Infer"
              }
            },
            {
              "tnType": "NULL_DEREFERENCE",
              "tnDesc": "object returned by `HystrixTimer.executor.get()` could be null and is dereferenced at line 138.",
              "tnFile": "hystrix-core/src/main/java/com/netflix/hystrix/util/HystrixTimer.java",
              "tnLine": 138,
              "tnColumn": -1,
              "tnPatch": null,
              "tnCodeLine": null,
              "tnProcedure": "void HystrixTimer.startThreadIfNeeded()",
              "tnPhase": "PhaseUnknown",
              "tnTool": {
                "tag": "Infer"
              }
            },
            {
              "tnType": "NULL_DEREFERENCE",
              "tnDesc": "object `hystrixPropertiesStrategy` last assigned on line 140 could be null and is dereferenced at line 141.",
              "tnFile": "hystrix-core/src/main/java/com/netflix/hystrix/strategy/properties/HystrixPropertiesFactory.java",
              "tnLine": 141,
              "tnColumn": -1,
              "tnPatch": null,
              "tnCodeLine": null,
              "tnProcedure": "HystrixCollapserProperties HystrixPropertiesFactory.getCollapserProperties(HystrixCollapserKey,HystrixCollapserProperties$Setter)",
              "tnPhase": "PhaseUnknown",
              "tnTool": {
                "tag": "Infer"
              }
            },
            {
              "tnType": "NULL_DEREFERENCE",
              "tnDesc": "object `propertiesStrategy` last assigned on line 152 could be null and is dereferenced at line 153.",
              "tnFile": "hystrix-core/src/main/java/com/netflix/hystrix/util/HystrixTimer.java",
              "tnLine": 153,
              "tnColumn": -1,
              "tnPatch": null,
              "tnCodeLine": null,
              "tnProcedure": "void HystrixTimer$ScheduledExecutor.initialize()",
              "tnPhase": "PhaseUnknown",
              "tnTool": {
                "tag": "Infer"
              }
            },
            {
              "tnType": "NULL_DEREFERENCE",
              "tnDesc": "object `concurrencyStrategy` last assigned on line 173 could be null and is dereferenced at line 177.",
              "tnFile": "hystrix-core/src/main/java/com/netflix/hystrix/HystrixThreadPool.java",
              "tnLine": 177,
              "tnColumn": -1,
              "tnPatch": null,
              "tnCodeLine": null,
              "tnProcedure": "HystrixThreadPool$HystrixThreadPoolDefault.<init>(HystrixThreadPoolKey,HystrixThreadPoolProperties$Setter)",
              "tnPhase": "PhaseUnknown",
              "tnTool": {
                "tag": "Infer"
              }
            },
            {
              "tnType": "NULL_DEREFERENCE",
              "tnDesc": "object `lastBucket` last assigned on line 258 could be null and is dereferenced at line 259.",
              "tnFile": "hystrix-core/src/main/java/com/netflix/hystrix/util/HystrixRollingPercentile.java",
              "tnLine": 259,
              "tnColumn": -1,
              "tnPatch": null,
              "tnCodeLine": null,
              "tnProcedure": "HystrixRollingPercentile$Bucket HystrixRollingPercentile.getCurrentBucket()",
              "tnPhase": "PhaseUnknown",
              "tnTool": {
                "tag": "Infer"
              }
            },
            {
              "tnType": "CHECKERS_IMMUTABLE_CAST",
              "tnDesc": "Method get() returns class com.google.common.collect.ImmutableList but the return type is class java.util.List. Make sure that users of this method do not try to modify the collection.",
              "tnFile": "hystrix-contrib/hystrix-javanica/src/main/java/com/netflix/hystrix/contrib/javanica/command/MetaHolder.java",
              "tnLine": 242,
              "tnColumn": -1,
              "tnPatch": null,
              "tnCodeLine": null,
              "tnProcedure": "List MetaHolder$2.get()",
              "tnPhase": "PhaseUnknown",
              "tnTool": {
                "tag": "Infer"
              }
            },
            {
              "tnType": "CHECKERS_IMMUTABLE_CAST",
              "tnDesc": "Method get() returns class com.google.common.collect.ImmutableList but the return type is class java.util.List. Make sure that users of this method do not try to modify the collection.",
              "tnFile": "hystrix-contrib/hystrix-javanica/src/main/java/com/netflix/hystrix/contrib/javanica/command/MetaHolder.java",
              "tnLine": 247,
              "tnColumn": -1,
              "tnPatch": null,
              "tnCodeLine": null,
              "tnProcedure": "List MetaHolder$3.get()",
              "tnPhase": "PhaseUnknown",
              "tnTool": {
                "tag": "Infer"
              }
            },
            {
              "tnType": "NULL_DEREFERENCE",
              "tnDesc": "object `lastBucket` last assigned on line 308 could be null and is dereferenced at line 309.",
              "tnFile": "hystrix-core/src/main/java/com/netflix/hystrix/util/HystrixRollingNumber.java",
              "tnLine": 309,
              "tnColumn": -1,
              "tnPatch": null,
              "tnCodeLine": null,
              "tnProcedure": "HystrixRollingNumber$Bucket HystrixRollingNumber.getCurrentBucket()",
              "tnPhase": "PhaseUnknown",
              "tnTool": {
                "tag": "Infer"
              }
            },
            {
              "tnType": "CHECKERS_IMMUTABLE_CAST",
              "tnDesc": "Method get() returns class com.google.common.collect.ImmutableList but the return type is class java.util.List. Make sure that users of this method do not try to modify the collection.",
              "tnFile": "hystrix-contrib/hystrix-javanica/src/main/java/com/netflix/hystrix/contrib/javanica/command/MetaHolder.java",
              "tnLine": 263,
              "tnColumn": -1,
              "tnPatch": null,
              "tnCodeLine": null,
              "tnProcedure": "List MetaHolder$4.get()",
              "tnPhase": "PhaseUnknown",
              "tnTool": {
                "tag": "Infer"
              }
            },
            {
              "tnType": "CHECKERS_IMMUTABLE_CAST",
              "tnDesc": "Method get() returns class com.google.common.collect.ImmutableList but the return type is class java.util.List. Make sure that users of this method do not try to modify the collection.",
              "tnFile": "hystrix-contrib/hystrix-javanica/src/main/java/com/netflix/hystrix/contrib/javanica/command/MetaHolder.java",
              "tnLine": 268,
              "tnColumn": -1,
              "tnPatch": null,
              "tnCodeLine": null,
              "tnProcedure": "List MetaHolder$5.get()",
              "tnPhase": "PhaseUnknown",
              "tnTool": {
                "tag": "Infer"
              }
            },
            {
              "tnType": "CHECKERS_IMMUTABLE_CAST",
              "tnDesc": "Method getCollapserProperties() returns class com.google.common.collect.ImmutableList but the return type is class java.util.List. Make sure that users of this method do not try to modify the collection.",
              "tnFile": "hystrix-contrib/hystrix-javanica/src/main/java/com/netflix/hystrix/contrib/javanica/command/MetaHolder.java",
              "tnLine": 276,
              "tnColumn": -1,
              "tnPatch": null,
              "tnCodeLine": null,
              "tnProcedure": "List MetaHolder.getCollapserProperties()",
              "tnPhase": "PhaseUnknown",
              "tnTool": {
                "tag": "Infer"
              }
            },
            {
              "tnType": "CHECKERS_IMMUTABLE_CAST",
              "tnDesc": "Method get() returns class com.google.common.collect.ImmutableList but the return type is class java.util.List. Make sure that users of this method do not try to modify the collection.",
              "tnFile": "hystrix-contrib/hystrix-javanica/src/main/java/com/netflix/hystrix/contrib/javanica/command/MetaHolder.java",
              "tnLine": 284,
              "tnColumn": -1,
              "tnPatch": null,
              "tnCodeLine": null,
              "tnProcedure": "List MetaHolder$6.get()",
              "tnPhase": "PhaseUnknown",
              "tnTool": {
                "tag": "Infer"
              }
            },
            {
              "tnType": "CHECKERS_IMMUTABLE_CAST",
              "tnDesc": "Method get() returns class com.google.common.collect.ImmutableList but the return type is class java.util.List. Make sure that users of this method do not try to modify the collection.",
              "tnFile": "hystrix-contrib/hystrix-javanica/src/main/java/com/netflix/hystrix/contrib/javanica/command/MetaHolder.java",
              "tnLine": 289,
              "tnColumn": -1,
              "tnPatch": null,
              "tnCodeLine": null,
              "tnProcedure": "List MetaHolder$7.get()",
              "tnPhase": "PhaseUnknown",
              "tnTool": {
                "tag": "Infer"
              }
            },
            {
              "tnType": "CHECKERS_IMMUTABLE_CAST",
              "tnDesc": "Method get() returns class com.google.common.collect.ImmutableList but the return type is class java.util.List. Make sure that users of this method do not try to modify the collection.",
              "tnFile": "hystrix-contrib/hystrix-javanica/src/main/java/com/netflix/hystrix/contrib/javanica/command/MetaHolder.java",
              "tnLine": 312,
              "tnColumn": -1,
              "tnPatch": null,
              "tnCodeLine": null,
              "tnProcedure": "List MetaHolder$8.get()",
              "tnPhase": "PhaseUnknown",
              "tnTool": {
                "tag": "Infer"
              }
            },
            {
              "tnType": "CHECKERS_IMMUTABLE_CAST",
              "tnDesc": "Method get() returns class com.google.common.collect.ImmutableList but the return type is class java.util.List. Make sure that users of this method do not try to modify the collection.",
              "tnFile": "hystrix-contrib/hystrix-javanica/src/main/java/com/netflix/hystrix/contrib/javanica/command/MetaHolder.java",
              "tnLine": 317,
              "tnColumn": -1,
              "tnPatch": null,
              "tnCodeLine": null,
              "tnProcedure": "List MetaHolder$9.get()",
              "tnPhase": "PhaseUnknown",
              "tnTool": {
                "tag": "Infer"
              }
            },
            {
              "tnType": "INTERFACE_NOT_THREAD_SAFE",
              "tnDesc": "Unprotected call to method void HystrixDynamicProperty.addCallback(Runnable) of un-annotated interface com.netflix.hystrix.strategy.properties.HystrixDynamicProperty. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.",
              "tnFile": "hystrix-contrib/hystrix-javanica/src/main/java/com/netflix/hystrix/contrib/javanica/command/AbstractHystrixCommand.java",
              "tnLine": 51,
              "tnColumn": -1,
              "tnPatch": null,
              "tnCodeLine": null,
              "tnProcedure": "AbstractHystrixCommand.<init>(HystrixCommandBuilder)",
              "tnPhase": "PhaseUnknown",
              "tnTool": {
                "tag": "Infer"
              }
            },
            {
              "tnType": "INTERFACE_NOT_THREAD_SAFE",
              "tnDesc": "Unprotected call to method void HystrixDynamicProperty.addCallback(Runnable) of un-annotated interface com.netflix.hystrix.strategy.properties.HystrixDynamicProperty. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.",
              "tnFile": "hystrix-contrib/hystrix-javanica/src/main/java/com/netflix/hystrix/contrib/javanica/command/BatchHystrixCommand.java",
              "tnLine": 41,
              "tnColumn": -1,
              "tnPatch": null,
              "tnCodeLine": null,
              "tnProcedure": "BatchHystrixCommand.<init>(HystrixCommandBuilder)",
              "tnPhase": "PhaseUnknown",
              "tnTool": {
                "tag": "Infer"
              }
            },
            {
              "tnType": "INTERFACE_NOT_THREAD_SAFE",
              "tnDesc": "Unprotected call to method void HystrixDynamicProperty.addCallback(Runnable) of un-annotated interface com.netflix.hystrix.strategy.properties.HystrixDynamicProperty. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.",
              "tnFile": "hystrix-contrib/hystrix-javanica/src/main/java/com/netflix/hystrix/contrib/javanica/command/GenericCommand.java",
              "tnLine": 36,
              "tnColumn": -1,
              "tnPatch": null,
              "tnCodeLine": null,
              "tnProcedure": "GenericCommand.<init>(HystrixCommandBuilder)",
              "tnPhase": "PhaseUnknown",
              "tnTool": {
                "tag": "Infer"
              }
            },
            {
              "tnType": "INTERFACE_NOT_THREAD_SAFE",
              "tnDesc": "Unprotected call to method void HystrixDynamicProperty.addCallback(Runnable) of un-annotated interface com.netflix.hystrix.strategy.properties.HystrixDynamicProperty. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.",
              "tnFile": "hystrix-contrib/hystrix-javanica/src/main/java/com/netflix/hystrix/contrib/javanica/command/GenericObservableCommand.java",
              "tnLine": 57,
              "tnColumn": -1,
              "tnPatch": null,
              "tnCodeLine": null,
              "tnProcedure": "GenericObservableCommand.<init>(HystrixCommandBuilder)",
              "tnPhase": "PhaseUnknown",
              "tnTool": {
                "tag": "Infer"
              }
            },
            {
              "tnType": "THREAD_SAFETY_VIOLATION",
              "tnDesc": "Unprotected write. Non-private method `void HystrixRollingNumber.add(HystrixRollingNumberEvent,long)` indirectly writes to field `rs.[_]` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
              "tnFile": "hystrix-core/src/main/java/com/netflix/hystrix/util/HystrixRollingNumber.java",
              "tnLine": 113,
              "tnColumn": -1,
              "tnPatch": null,
              "tnCodeLine": null,
              "tnProcedure": "void HystrixRollingNumber.add(HystrixRollingNumberEvent,long)",
              "tnPhase": "PhaseUnknown",
              "tnTool": {
                "tag": "Infer"
              }
            },
            {
              "tnType": "INTERFACE_NOT_THREAD_SAFE",
              "tnDesc": "Unprotected call to method String CacheRemove.commandKey() of un-annotated interface com.netflix.hystrix.contrib.javanica.cache.annotation.CacheRemove. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.",
              "tnFile": "hystrix-contrib/hystrix-javanica/src/main/java/com/netflix/hystrix/contrib/javanica/command/GenericObservableCommand.java",
              "tnLine": 83,
              "tnColumn": -1,
              "tnPatch": null,
              "tnCodeLine": null,
              "tnProcedure": "Observable GenericObservableCommand.construct()",
              "tnPhase": "PhaseUnknown",
              "tnTool": {
                "tag": "Infer"
              }
            },
            {
              "tnType": "INTERFACE_NOT_THREAD_SAFE",
              "tnDesc": "Unprotected call to method String CacheRemove.commandKey() of un-annotated interface com.netflix.hystrix.contrib.javanica.cache.annotation.CacheRemove. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.",
              "tnFile": "hystrix-contrib/hystrix-javanica/src/main/java/com/netflix/hystrix/contrib/javanica/command/AbstractHystrixCommand.java",
              "tnLine": 175,
              "tnColumn": -1,
              "tnPatch": null,
              "tnCodeLine": null,
              "tnProcedure": "void AbstractHystrixCommand.flushCache()",
              "tnPhase": "PhaseUnknown",
              "tnTool": {
                "tag": "Infer"
              }
            },
            {
              "tnType": "INTERFACE_NOT_THREAD_SAFE",
              "tnDesc": "Unprotected call to method String CacheRemove.commandKey() of un-annotated interface com.netflix.hystrix.contrib.javanica.cache.annotation.CacheRemove. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.",
              "tnFile": "hystrix-contrib/hystrix-javanica/src/main/java/com/netflix/hystrix/contrib/javanica/command/GenericObservableCommand.java",
              "tnLine": 146,
              "tnColumn": -1,
              "tnPatch": null,
              "tnCodeLine": null,
              "tnProcedure": "void GenericObservableCommand.flushCache()",
              "tnPhase": "PhaseUnknown",
              "tnTool": {
                "tag": "Infer"
              }
            },
            {
              "tnType": "INTERFACE_NOT_THREAD_SAFE",
              "tnDesc": "Unprotected call to method String HystrixGeneratedCacheKey.getCacheKey() of un-annotated interface com.netflix.hystrix.contrib.javanica.cache.HystrixGeneratedCacheKey. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.",
              "tnFile": "hystrix-contrib/hystrix-javanica/src/main/java/com/netflix/hystrix/contrib/javanica/command/AbstractHystrixCommand.java",
              "tnLine": 109,
              "tnColumn": -1,
              "tnPatch": null,
              "tnCodeLine": null,
              "tnProcedure": "String AbstractHystrixCommand.getCacheKey()",
              "tnPhase": "PhaseUnknown",
              "tnTool": {
                "tag": "Infer"
              }
            },
            {
              "tnType": "INTERFACE_NOT_THREAD_SAFE",
              "tnDesc": "Unprotected call to method String HystrixGeneratedCacheKey.getCacheKey() of un-annotated interface com.netflix.hystrix.contrib.javanica.cache.HystrixGeneratedCacheKey. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.",
              "tnFile": "hystrix-contrib/hystrix-javanica/src/main/java/com/netflix/hystrix/contrib/javanica/command/GenericObservableCommand.java",
              "tnLine": 136,
              "tnColumn": -1,
              "tnPatch": null,
              "tnCodeLine": null,
              "tnProcedure": "String GenericObservableCommand.getCacheKey()",
              "tnPhase": "PhaseUnknown",
              "tnTool": {
                "tag": "Infer"
              }
            },
            {
              "tnType": "INTERFACE_NOT_THREAD_SAFE",
              "tnDesc": "Unprotected call to method String CacheRemove.commandKey() of un-annotated interface com.netflix.hystrix.contrib.javanica.cache.annotation.CacheRemove. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.",
              "tnFile": "hystrix-contrib/hystrix-javanica/src/main/java/com/netflix/hystrix/contrib/javanica/command/BatchHystrixCommand.java",
              "tnLine": 35,
              "tnColumn": -1,
              "tnPatch": null,
              "tnCodeLine": null,
              "tnProcedure": "Object BatchHystrixCommand.getFallback()",
              "tnPhase": "PhaseUnknown",
              "tnTool": {
                "tag": "Infer"
              }
            },
            {
              "tnType": "INTERFACE_NOT_THREAD_SAFE",
              "tnDesc": "Unprotected call to method String CacheRemove.commandKey() of un-annotated interface com.netflix.hystrix.contrib.javanica.cache.annotation.CacheRemove. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.",
              "tnFile": "hystrix-contrib/hystrix-javanica/src/main/java/com/netflix/hystrix/contrib/javanica/command/BatchHystrixCommand.java",
              "tnLine": 71,
              "tnColumn": -1,
              "tnPatch": null,
              "tnCodeLine": null,
              "tnProcedure": "List BatchHystrixCommand.getFallback()",
              "tnPhase": "PhaseUnknown",
              "tnTool": {
                "tag": "Infer"
              }
            },
            {
              "tnType": "INTERFACE_NOT_THREAD_SAFE",
              "tnDesc": "Unprotected call to method String CacheRemove.commandKey() of un-annotated interface com.netflix.hystrix.contrib.javanica.cache.annotation.CacheRemove. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.",
              "tnFile": "hystrix-contrib/hystrix-javanica/src/main/java/com/netflix/hystrix/contrib/javanica/command/GenericCommand.java",
              "tnLine": 71,
              "tnColumn": -1,
              "tnPatch": null,
              "tnCodeLine": null,
              "tnProcedure": "Object GenericCommand.getFallback()",
              "tnPhase": "PhaseUnknown",
              "tnTool": {
                "tag": "Infer"
              }
            },
            {
              "tnType": "THREAD_SAFETY_VIOLATION",
              "tnDesc": "Read/Write race. Non-private method `HystrixCommandMetrics$HealthCounts HystrixCommandMetrics.getHealthCounts()` reads without synchronization from `this.com.netflix.hystrix.HystrixCommandMetrics.healthCountsStream`. Potentially races with write in method `HystrixCommandMetrics.resetStream()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
              "tnFile": "hystrix-core/src/main/java/com/netflix/hystrix/HystrixCommandMetrics.java",
              "tnLine": 374,
              "tnColumn": -1,
              "tnPatch": null,
              "tnCodeLine": null,
              "tnProcedure": "HystrixCommandMetrics$HealthCounts HystrixCommandMetrics.getHealthCounts()",
              "tnPhase": "PhaseUnknown",
              "tnTool": {
                "tag": "Infer"
              }
            },
            {
              "tnType": "THREAD_SAFETY_VIOLATION",
              "tnDesc": "Read/Write race. Non-private method `HealthCountsStream HystrixCommandMetrics.getHealthCountsStream()` reads without synchronization from `this.com.netflix.hystrix.HystrixCommandMetrics.healthCountsStream`. Potentially races with write in method `HystrixCommandMetrics.resetStream()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
              "tnFile": "hystrix-core/src/main/java/com/netflix/hystrix/HystrixCommandMetrics.java",
              "tnLine": 347,
              "tnColumn": -1,
              "tnPatch": null,
              "tnCodeLine": null,
              "tnProcedure": "HealthCountsStream HystrixCommandMetrics.getHealthCountsStream()",
              "tnPhase": "PhaseUnknown",
              "tnTool": {
                "tag": "Infer"
              }
            },
            {
              "tnType": "THREAD_SAFETY_VIOLATION",
              "tnDesc": "Unprotected write. Non-private method `void HystrixRollingNumber.increment(HystrixRollingNumberEvent)` indirectly writes to field `rs.[_]` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
              "tnFile": "hystrix-core/src/main/java/com/netflix/hystrix/util/HystrixRollingNumber.java",
              "tnLine": 99,
              "tnColumn": -1,
              "tnPatch": null,
              "tnCodeLine": null,
              "tnProcedure": "void HystrixRollingNumber.increment(HystrixRollingNumberEvent)",
              "tnPhase": "PhaseUnknown",
              "tnTool": {
                "tag": "Infer"
              }
            },
            {
              "tnType": "INTERFACE_NOT_THREAD_SAFE",
              "tnDesc": "Unprotected call to method String CacheRemove.commandKey() of un-annotated interface com.netflix.hystrix.contrib.javanica.cache.annotation.CacheRemove. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.",
              "tnFile": "hystrix-contrib/hystrix-javanica/src/main/java/com/netflix/hystrix/contrib/javanica/command/AbstractHystrixCommand.java",
              "tnLine": 146,
              "tnColumn": -1,
              "tnPatch": null,
              "tnCodeLine": null,
              "tnProcedure": "Object AbstractHystrixCommand.process(AbstractHystrixCommand$Action)",
              "tnPhase": "PhaseUnknown",
              "tnTool": {
                "tag": "Infer"
              }
            },
            {
              "tnType": "THREAD_SAFETY_VIOLATION",
              "tnDesc": "Unprotected write. Non-private method `void HystrixRollingNumber.reset()` indirectly writes to field `rs.[_]` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
              "tnFile": "hystrix-core/src/main/java/com/netflix/hystrix/util/HystrixRollingNumber.java",
              "tnLine": 137,
              "tnColumn": -1,
              "tnPatch": null,
              "tnCodeLine": null,
              "tnProcedure": "void HystrixRollingNumber.reset()",
              "tnPhase": "PhaseUnknown",
              "tnTool": {
                "tag": "Infer"
              }
            },
            {
              "tnType": "INTERFACE_NOT_THREAD_SAFE",
              "tnDesc": "Unprotected call to method Object CommandAction.executeWithArgs(ExecutionType,java.lang.Object[]) of un-annotated interface com.netflix.hystrix.contrib.javanica.command.CommandAction. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.",
              "tnFile": "hystrix-contrib/hystrix-javanica/src/main/java/com/netflix/hystrix/contrib/javanica/command/GenericObservableCommand.java",
              "tnLine": 108,
              "tnColumn": -1,
              "tnPatch": null,
              "tnCodeLine": null,
              "tnProcedure": "Observable GenericObservableCommand.resumeWithFallback()",
              "tnPhase": "PhaseUnknown",
              "tnTool": {
                "tag": "Infer"
              }
            },
            {
              "tnType": "INTERFACE_NOT_THREAD_SAFE",
              "tnDesc": "Unprotected call to method String CacheRemove.commandKey() of un-annotated interface com.netflix.hystrix.contrib.javanica.cache.annotation.CacheRemove. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.",
              "tnFile": "hystrix-contrib/hystrix-javanica/src/main/java/com/netflix/hystrix/contrib/javanica/command/BatchHystrixCommand.java",
              "tnLine": 35,
              "tnColumn": -1,
              "tnPatch": null,
              "tnCodeLine": null,
              "tnProcedure": "Object BatchHystrixCommand.run()",
              "tnPhase": "PhaseUnknown",
              "tnTool": {
                "tag": "Infer"
              }
            },
            {
              "tnType": "INTERFACE_NOT_THREAD_SAFE",
              "tnDesc": "Unprotected call to method String CacheRemove.commandKey() of un-annotated interface com.netflix.hystrix.contrib.javanica.cache.annotation.CacheRemove. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.",
              "tnFile": "hystrix-contrib/hystrix-javanica/src/main/java/com/netflix/hystrix/contrib/javanica/command/BatchHystrixCommand.java",
              "tnLine": 51,
              "tnColumn": -1,
              "tnPatch": null,
              "tnCodeLine": null,
              "tnProcedure": "List BatchHystrixCommand.run()",
              "tnPhase": "PhaseUnknown",
              "tnTool": {
                "tag": "Infer"
              }
            },
            {
              "tnType": "INTERFACE_NOT_THREAD_SAFE",
              "tnDesc": "Unprotected call to method String CacheRemove.commandKey() of un-annotated interface com.netflix.hystrix.contrib.javanica.cache.annotation.CacheRemove. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.",
              "tnFile": "hystrix-contrib/hystrix-javanica/src/main/java/com/netflix/hystrix/contrib/javanica/command/GenericCommand.java",
              "tnLine": 45,
              "tnColumn": -1,
              "tnPatch": null,
              "tnCodeLine": null,
              "tnProcedure": "Object GenericCommand.run()",
              "tnPhase": "PhaseUnknown",
              "tnTool": {
                "tag": "Infer"
              }
            },
            {
              "tnType": "THREAD_SAFETY_VIOLATION",
              "tnDesc": "Unprotected write. Non-private method `void HystrixRollingNumber.updateRollingMax(HystrixRollingNumberEvent,long)` indirectly writes to field `rs.[_]` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
              "tnFile": "hystrix-core/src/main/java/com/netflix/hystrix/util/HystrixRollingNumber.java",
              "tnLine": 125,
              "tnColumn": -1,
              "tnPatch": null,
              "tnCodeLine": null,
              "tnProcedure": "void HystrixRollingNumber.updateRollingMax(HystrixRollingNumberEvent,long)",
              "tnPhase": "PhaseUnknown",
              "tnTool": {
                "tag": "Infer"
              }
            }
          ],
          null
        ]
      }
    ],
    [
      {
        "tag": "ErrorProne"
      },
      {
        "tag": "ToolSuccess",
        "contents": [
          [],
          null
        ]
      }
    ]
  ]
}
