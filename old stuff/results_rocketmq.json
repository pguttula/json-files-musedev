{"tag":"AnalysisSuccess","contents":{"requestedTools":null,"toolResults":[[{"tag":"Infer"},{"tag":"ToolSuccess","contents":[[{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void RocketmqLog4jAppender.append(LoggingEvent)` reads without synchronization from `this.producer`. Potentially races with write in method `RocketmqLog4jAppender.close()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"logappender/src/main/java/org/apache/rocketmq/logappender/log4j/RocketmqLog4jAppender.java","tnLine":78,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.logappender.log4j.RocketmqLog4jAppender.append(org.apache.log4j.spi.LoggingEvent):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object `rt` last assigned on line 78 could be null and is dereferenced at line 79.","tnFile":"broker/src/main/java/org/apache/rocketmq/broker/latency/BrokerFastFailure.java","tnLine":79,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.broker.latency.BrokerFastFailure.cleanExpiredRequest():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `DataVersion RouteInfoManager.queryBrokerTopicConfig(String)` reads without synchronization from container `this.brokerLiveTable` via call to `get`. Potentially races with write in method `RouteInfoManager.registerBroker(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"namesrv/src/main/java/org/apache/rocketmq/namesrv/routeinfo/RouteInfoManager.java","tnLine":203,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.namesrv.routeinfo.RouteInfoManager.queryBrokerTopicConfig(java.lang.String):org.apache.rocketmq.common.DataVersion","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void DefaultMQPushConsumerImpl.resetOffsetByTimeStamp(long)` reads without synchronization from `this.mQClientFactory`. Potentially races with write in method `DefaultMQPushConsumerImpl.start()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPushConsumerImpl.java","tnLine":968,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.client.impl.consumer.DefaultMQPushConsumerImpl.resetOffsetByTimeStamp(long):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `getEffectiveLevel()` could be null and is dereferenced by call to `isGreaterOrEqual(...)` at line 113.","tnFile":"logging/src/main/java/org/apache/rocketmq/logging/inner/Logger.java","tnLine":113,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.logging.inner.Logger.debug(java.lang.Object,java.lang.Throwable):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object `offsetWrapper` last assigned on line 127 could be null and is dereferenced at line 128.","tnFile":"tools/src/main/java/org/apache/rocketmq/tools/command/consumer/ConsumerProgressSubCommand.java","tnLine":128,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.tools.command.consumer.ConsumerProgressSubCommand.execute(org.apache.commons.cli.CommandLine,org.apache.commons.cli.Options,org.apache.rocketmq.remoting.RPCHook):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void TopicConfigManager.updateOrderTopicConfig(KVTable)` indirectly reads without synchronization from `topicConfig.order`. Potentially races with write in method `TopicConfigManager.createTopicInSendMessageBackMethod(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"broker/src/main/java/org/apache/rocketmq/broker/topic/TopicConfigManager.java","tnLine":336,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.broker.topic.TopicConfigManager.updateOrderTopicConfig(org.apache.rocketmq.common.protocol.body.KVTable):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void DefaultMQPullConsumer.setMessageQueueListener(MessageQueueListener)` writes to field `this.messageQueueListener` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"client/src/main/java/org/apache/rocketmq/client/consumer/DefaultMQPullConsumer.java","tnLine":249,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.client.consumer.DefaultMQPullConsumer.setMessageQueueListener(org.apache.rocketmq.client.consumer.MessageQueueListener):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object `tu` last assigned on line 205 could be null and is dereferenced at line 212.","tnFile":"store/src/main/java/org/apache/rocketmq/store/schedule/ScheduleMessageService.java","tnLine":212,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.store.schedule.ScheduleMessageService.parseDelayLevel():boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object `msg` last assigned on line 892 could be null and is dereferenced at line 894.","tnFile":"store/src/main/java/org/apache/rocketmq/store/DefaultMessageStore.java","tnLine":894,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.store.DefaultMessageStore.queryMessage(java.lang.String,java.lang.String,int,long,long):org.apache.rocketmq.store.QueryMessageResult","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `boolean RouteInfoManager.isBrokerTopicConfigChanged(String,DataVersion)` indirectly reads without synchronization from container `this.brokerLiveTable` via call to `get`. Potentially races with write in method `RouteInfoManager.registerBroker(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"namesrv/src/main/java/org/apache/rocketmq/namesrv/routeinfo/RouteInfoManager.java","tnLine":198,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.namesrv.routeinfo.RouteInfoManager.isBrokerTopicConfigChanged(java.lang.String,org.apache.rocketmq.common.DataVersion):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `BrokerStatsManager.statsTable.get(\"TOPIC_PUT_NUMS\")` could be null and is dereferenced at line 125.","tnFile":"store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java","tnLine":125,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.store.stats.BrokerStatsManager.incTopicPutNums(java.lang.String):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `MessageExt DefaultMQPushConsumerImpl.viewMessage(String)` reads without synchronization from `this.mQClientFactory`. Potentially races with write in method `DefaultMQPushConsumerImpl.start()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPushConsumerImpl.java","tnLine":943,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.client.impl.consumer.DefaultMQPushConsumerImpl.viewMessage(java.lang.String):org.apache.rocketmq.common.message.MessageExt","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `DataCollector DataCollectorManager.fetchMapDataCollector(String)` reads without synchronization from container `this.collectMap` via call to `get`. Potentially races with write in method `DataCollectorManager.fetchListDataCollector(...)`.\n Reporting because this access may occur on a background thread.","tnFile":"test/src/main/java/org/apache/rocketmq/test/util/data/collect/DataCollectorManager.java","tnLine":69,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.test.util.data.collect.DataCollectorManager.fetchMapDataCollector(java.lang.String):org.apache.rocketmq.test.util.data.collect.DataCollector","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `BrokerStatsManager.statsTable.get(\"BROKER_PUT_NUMS\")` could be null and is dereferenced at line 164.","tnFile":"store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java","tnLine":164,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.store.stats.BrokerStatsManager.incBrokerPutNums(int):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `int MapDataCollectorImpl.getRepeatedTimeForData(Object)` reads without synchronization from container `this.datas` via call to `get`. Potentially races with write in method `MapDataCollectorImpl.addData(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"test/src/main/java/org/apache/rocketmq/test/util/data/collect/impl/MapDataCollectorImpl.java","tnLine":95,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.test.util.data.collect.impl.MapDataCollectorImpl.getRepeatedTimeForData(java.lang.Object):int","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void LoggingBuilder$FileAppender.reset()` indirectly reads without synchronization from `this.qw`. Potentially races with write in method `LoggingBuilder$FileAppender.setFile(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"logging/src/main/java/org/apache/rocketmq/logging/inner/LoggingBuilder.java","tnLine":729,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.logging.inner.LoggingBuilder$FileAppender.reset():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `ConsumerRunningInfo DefaultMQPushConsumerImpl.consumerRunningInfo()` reads without synchronization from `this.consumeOrderly`. Potentially races with write in method `DefaultMQPushConsumerImpl.start()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPushConsumerImpl.java","tnLine":1060,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.client.impl.consumer.DefaultMQPushConsumerImpl.consumerRunningInfo():org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `getEffectiveLevel()` could be null and is dereferenced by call to `isGreaterOrEqual(...)` at line 243.","tnFile":"logging/src/main/java/org/apache/rocketmq/logging/inner/Logger.java","tnLine":243,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.logging.inner.Logger.warn(java.lang.Object,java.lang.Throwable):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"RESOURCE_LEAK","tnDesc":"resource of type `java.io.FileOutputStream` acquired by call to `FileOutputStream(...)` at line 697 is not released after line 711.\n**Note**: potential exception at line 711","tnFile":"logging/src/main/java/org/apache/rocketmq/logging/inner/LoggingBuilder.java","tnLine":711,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.logging.inner.LoggingBuilder$FileAppender.setFile(java.lang.String,boolean,boolean,int):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `boolean LoggingBuilder$WriterAppender.checkEntryConditions()` reads without synchronization from `this.closed`. Potentially races with write in method `LoggingBuilder$WriterAppender.close()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"logging/src/main/java/org/apache/rocketmq/logging/inner/LoggingBuilder.java","tnLine":487,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.logging.inner.LoggingBuilder$WriterAppender.checkEntryConditions():boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `Throwable DefaultPromise.getThrowable()` reads without synchronization from `this.exception`. Potentially races with write in method `DefaultPromise.get(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"openmessaging/src/main/java/io/openmessaging/rocketmq/promise/DefaultPromise.java","tnLine":148,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"io.openmessaging.rocketmq.promise.DefaultPromise.getThrowable():java.lang.Throwable","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void DefaultMQPushConsumerImpl.pullMessage(PullRequest)` reads without synchronization from `this.pullAPIWrapper`. Potentially races with write in method `DefaultMQPushConsumerImpl.start()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPushConsumerImpl.java","tnLine":431,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.client.impl.consumer.DefaultMQPushConsumerImpl.pullMessage(org.apache.rocketmq.client.impl.consumer.PullRequest):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object `mappedFile` last assigned on line 197 could be null and is dereferenced at line 198.","tnFile":"store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java","tnLine":198,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.store.dledger.DLedgerCommitLog.deleteExpiredFile(long,int,long,boolean):int","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"RESOURCE_LEAK","tnDesc":"resource of type `java.io.OutputStreamWriter` acquired by call to `createWriter(...)` at line 1140 is not released after line 1140.\n**Note**: potential exception at line 1140","tnFile":"logging/src/main/java/org/apache/rocketmq/logging/inner/LoggingBuilder.java","tnLine":1140,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.logging.inner.LoggingBuilder$ConsoleAppender.activateOptions():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `Collection MapDataCollectorImpl.getAllData()` reads without synchronization from container `this.datas` via call to `entrySet`. Potentially races with write in method `MapDataCollectorImpl.addData(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"test/src/main/java/org/apache/rocketmq/test/util/data/collect/impl/MapDataCollectorImpl.java","tnLine":57,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.test.util.data.collect.impl.MapDataCollectorImpl.getAllData():java.util.Collection","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `long DefaultMQPushConsumerImpl.earliestMsgStoreTime(MessageQueue)` reads without synchronization from `this.mQClientFactory`. Potentially races with write in method `DefaultMQPushConsumerImpl.start()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPushConsumerImpl.java","tnLine":193,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.client.impl.consumer.DefaultMQPushConsumerImpl.earliestMsgStoreTime(org.apache.rocketmq.common.message.MessageQueue):long","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `Collection MapDataCollectorImpl.getAllDataWithoutDuplicate()` reads without synchronization from container `this.datas` via call to `keySet`. Potentially races with write in method `MapDataCollectorImpl.addData(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"test/src/main/java/org/apache/rocketmq/test/util/data/collect/impl/MapDataCollectorImpl.java","tnLine":90,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.test.util.data.collect.impl.MapDataCollectorImpl.getAllDataWithoutDuplicate():java.util.Collection","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `boolean MapDataCollectorImpl.isRepeatedData(Object)` reads without synchronization from container `this.datas` via call to `get`. Potentially races with write in method `MapDataCollectorImpl.addData(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"test/src/main/java/org/apache/rocketmq/test/util/data/collect/impl/MapDataCollectorImpl.java","tnLine":84,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.test.util.data.collect.impl.MapDataCollectorImpl.isRepeatedData(java.lang.Object):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `topicPublishInfo.getMessageQueueList()` could be null and is dereferenced at line 401.","tnFile":"client/src/main/java/org/apache/rocketmq/client/trace/AsyncTraceDispatcher.java","tnLine":401,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.client.trace.AsyncTraceDispatcher$AsyncAppenderRequest.tryGetMessageQueueBrokerSet(org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl,java.lang.String):java.util.Set","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void LoggingBuilder$FileAppender.closeFile()` reads without synchronization from `this.qw`. Potentially races with write in method `LoggingBuilder$FileAppender.setFile(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"logging/src/main/java/org/apache/rocketmq/logging/inner/LoggingBuilder.java","tnLine":651,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.logging.inner.LoggingBuilder$FileAppender.closeFile():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void LoggingBuilder$AsyncAppender.append(LoggingEvent)` indirectly writes to field `event.threadName` outside of synchronization.\n Reporting because this access may occur on a background thread.","tnFile":"logging/src/main/java/org/apache/rocketmq/logging/inner/LoggingBuilder.java","tnLine":185,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.logging.inner.LoggingBuilder$AsyncAppender.append(org.apache.rocketmq.logging.inner.LoggingEvent):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"RESOURCE_LEAK","tnDesc":"resource of type `java.net.HttpURLConnection` acquired by call to `openConnection()` at line 216 is not released after line 218.","tnFile":"common/src/main/java/org/apache/rocketmq/common/MixAll.java","tnLine":218,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.common.MixAll.file2String(java.net.URL):java.lang.String","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `ConsumerStatsManager DefaultMQPushConsumerImpl.getConsumerStatsManager()` reads without synchronization from `this.mQClientFactory`. Potentially races with write in method `DefaultMQPushConsumerImpl.start()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPushConsumerImpl.java","tnLine":473,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.client.impl.consumer.DefaultMQPushConsumerImpl.getConsumerStatsManager():org.apache.rocketmq.client.stat.ConsumerStatsManager","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void TopicConfigManager.deleteTopicConfig(String)` indirectly writes to field `this.dataVersion.timestamp` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"broker/src/main/java/org/apache/rocketmq/broker/topic/TopicConfigManager.java","tnLine":375,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.broker.topic.TopicConfigManager.deleteTopicConfig(java.lang.String):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `response.getExtFields()` could be null and is dereferenced at line 548.","tnFile":"client/src/main/java/org/apache/rocketmq/client/impl/MQClientAPIImpl.java","tnLine":548,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.client.impl.MQClientAPIImpl.processSendResponse(java.lang.String,org.apache.rocketmq.common.message.Message,org.apache.rocketmq.remoting.protocol.RemotingCommand):org.apache.rocketmq.client.producer.SendResult","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void DefaultMQPullConsumerImpl.pull(MessageQueue,MessageSelector,long,int,PullCallback)` indirectly reads without synchronization from `this.pullAPIWrapper`. Potentially races with write in method `DefaultMQPullConsumerImpl.start()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPullConsumerImpl.java","tnLine":450,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.client.impl.consumer.DefaultMQPullConsumerImpl.pull(org.apache.rocketmq.common.message.MessageQueue,org.apache.rocketmq.client.consumer.MessageSelector,long,int,org.apache.rocketmq.client.consumer.PullCallback):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void ListDataCollectorImpl.resetData()` mutates container `this.datas` via call to `clear` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"test/src/main/java/org/apache/rocketmq/test/util/data/collect/impl/ListDataCollectorImpl.java","tnLine":47,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.test.util.data.collect.impl.ListDataCollectorImpl.resetData():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object `msg` last assigned on line 172 could be null and is dereferenced by call to `sendMessageBack(...)` at line 195.","tnFile":"openmessaging/src/main/java/io/openmessaging/rocketmq/consumer/LocalMessageCache.java","tnLine":195,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"io.openmessaging.rocketmq.consumer.LocalMessageCache.cleanExpireMsg():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `boolean LoggingBuilder$FileAppender.getAppend()` reads without synchronization from `this.fileAppend`. Potentially races with write in method `LoggingBuilder$FileAppender.setFile(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"logging/src/main/java/org/apache/rocketmq/logging/inner/LoggingBuilder.java","tnLine":629,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.logging.inner.LoggingBuilder$FileAppender.getAppend():boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `Channel ProducerManager.getAvaliableChannel(String)` reads without synchronization from container `this.groupChannelTable` via call to `get`. Potentially races with write in method `ProducerManager.registerProducer(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"broker/src/main/java/org/apache/rocketmq/broker/client/ProducerManager.java","tnLine":196,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.broker.client.ProducerManager.getAvaliableChannel(java.lang.String):io.netty.channel.Channel","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void RocketmqLogbackAppender.append(ILoggingEvent)` reads without synchronization from `this.producer`. Potentially races with write in method `RocketmqLogbackAppender.stop()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"logappender/src/main/java/org/apache/rocketmq/logappender/logback/RocketmqLogbackAppender.java","tnLine":77,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.logappender.logback.RocketmqLogbackAppender.append(ch.qos.logback.classic.spi.ILoggingEvent):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void LoggingBuilder$RollingFileAppender.subAppend(LoggingEvent)` indirectly reads without synchronization from `this.bufferSize`. Potentially races with write in method `LoggingBuilder$RollingFileAppender.setFile(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"logging/src/main/java/org/apache/rocketmq/logging/inner/LoggingBuilder.java","tnLine":844,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.logging.inner.LoggingBuilder$RollingFileAppender.subAppend(org.apache.rocketmq.logging.inner.LoggingEvent):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void DefaultMQPushConsumerImpl.updateConsumeOffset(MessageQueue,long)` reads without synchronization from `this.offsetStore`. Potentially races with write in method `DefaultMQPushConsumerImpl.start()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPushConsumerImpl.java","tnLine":934,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.client.impl.consumer.DefaultMQPushConsumerImpl.updateConsumeOffset(org.apache.rocketmq.common.message.MessageQueue,long):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void DefaultMQPushConsumerImpl.subscribe(String,MessageSelector)` reads without synchronization from `this.mQClientFactory`. Potentially races with write in method `DefaultMQPushConsumerImpl.start()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPushConsumerImpl.java","tnLine":916,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.client.impl.consumer.DefaultMQPushConsumerImpl.subscribe(java.lang.String,org.apache.rocketmq.client.consumer.MessageSelector):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void LoggingBuilder$WriterAppender.reset()` writes to field `this.qw` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"logging/src/main/java/org/apache/rocketmq/logging/inner/LoggingBuilder.java","tnLine":577,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.logging.inner.LoggingBuilder$WriterAppender.reset():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void DefaultMQPullConsumerImpl.setPullAPIWrapper(PullAPIWrapper)` writes to field `this.pullAPIWrapper` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPullConsumerImpl.java","tnLine":779,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.client.impl.consumer.DefaultMQPullConsumerImpl.setPullAPIWrapper(org.apache.rocketmq.client.impl.consumer.PullAPIWrapper):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void LoggingBuilder$RollingFileAppender.rollOver()` reads without synchronization from `this.bufferSize`. Potentially races with write in method `LoggingBuilder$RollingFileAppender.setFile(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"logging/src/main/java/org/apache/rocketmq/logging/inner/LoggingBuilder.java","tnLine":794,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.logging.inner.LoggingBuilder$RollingFileAppender.rollOver():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"RESOURCE_LEAK","tnDesc":"resource of type `org.apache.rocketmq.remoting.netty.FileRegionEncoder$1` acquired by call to `new()` at line 51 is not released after line 77.","tnFile":"remoting/src/main/java/org/apache/rocketmq/remoting/netty/FileRegionEncoder.java","tnLine":77,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.remoting.netty.FileRegionEncoder.encode(io.netty.channel.ChannelHandlerContext,io.netty.channel.FileRegion,io.netty.buffer.ByteBuf):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"RESOURCE_LEAK","tnDesc":"resource of type `java.io.InputStreamReader` acquired by call to `InputStreamReader(...)` at line 140 is not released after line 152.\n**Note**: potential exception at line 144","tnFile":"broker/src/main/java/org/apache/rocketmq/broker/util/ServiceProvider.java","tnLine":152,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.broker.util.ServiceProvider.loadClass(java.lang.String,java.lang.Class):java.lang.Object","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `boolean DefaultMQPushConsumerImpl.isConsumeOrderly()` reads without synchronization from `this.consumeOrderly`. Potentially races with write in method `DefaultMQPushConsumerImpl.start()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPushConsumerImpl.java","tnLine":951,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.client.impl.consumer.DefaultMQPushConsumerImpl.isConsumeOrderly():boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void LoggingBuilder$FileAppender.setBufferedIO(boolean)` writes to field `this.immediateFlush` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"logging/src/main/java/org/apache/rocketmq/logging/inner/LoggingBuilder.java","tnLine":678,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.logging.inner.LoggingBuilder$FileAppender.setBufferedIO(boolean):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void ListDataCollectorImpl.removeData(Object)` mutates container `this.datas` via call to `remove` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"test/src/main/java/org/apache/rocketmq/test/util/data/collect/impl/ListDataCollectorImpl.java","tnLine":85,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.test.util.data.collect.impl.ListDataCollectorImpl.removeData(java.lang.Object):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `ConsumerRunningInfo DefaultMQPushConsumerImpl.consumerRunningInfo()` reads without synchronization from `this.consumeMessageService`. Potentially races with write in method `DefaultMQPushConsumerImpl.start()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPushConsumerImpl.java","tnLine":1061,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.client.impl.consumer.DefaultMQPushConsumerImpl.consumerRunningInfo():org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `Logger Logger$DefaultLoggerRepository.exists(String)` reads without synchronization from container `this.ht` via call to `get`. Potentially races with write in method `Logger$DefaultLoggerRepository.getLogger(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"logging/src/main/java/org/apache/rocketmq/logging/inner/Logger.java","tnLine":301,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.logging.inner.Logger$DefaultLoggerRepository.exists(java.lang.String):org.apache.rocketmq.logging.inner.Logger","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `consumer.getDefaultMQPullConsumerImpl().getOffsetStore()` could be null and is dereferenced at line 77.","tnFile":"client/src/main/java/org/apache/rocketmq/client/MQHelper.java","tnLine":77,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.client.MQHelper.resetOffsetByTimestamp(org.apache.rocketmq.common.protocol.heartbeat.MessageModel,java.lang.String,java.lang.String,java.lang.String,long):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"RESOURCE_LEAK","tnDesc":"resource of type `java.util.zip.Deflater` acquired by call to `Deflater(...)` at line 54 is not released after line 54.","tnFile":"common/src/main/java/org/apache/rocketmq/common/protocol/body/RegisterBrokerBody.java","tnLine":54,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.common.protocol.body.RegisterBrokerBody.encode(boolean):byte[]","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void LoggingBuilder$FileAppender.reset()` writes to field `this.fileName` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"logging/src/main/java/org/apache/rocketmq/logging/inner/LoggingBuilder.java","tnLine":730,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.logging.inner.LoggingBuilder$FileAppender.reset():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `DataCollector DataCollectorManager.fetchDataCollector(String)` reads without synchronization from container `this.collectMap` via call to `get`. Potentially races with write in method `DataCollectorManager.fetchListDataCollector(...)`.\n Reporting because this access may occur on a background thread.","tnFile":"test/src/main/java/org/apache/rocketmq/test/util/data/collect/DataCollectorManager.java","tnLine":47,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.test.util.data.collect.DataCollectorManager.fetchDataCollector(java.lang.String):org.apache.rocketmq.test.util.data.collect.DataCollector","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void DefaultMQPushConsumerImpl.resume()` indirectly reads without synchronization from `this.consumeOrderly`. Potentially races with write in method `DefaultMQPushConsumerImpl.start()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPushConsumerImpl.java","tnLine":506,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.client.impl.consumer.DefaultMQPushConsumerImpl.resume():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void TopicConfigManager.updateTopicUnitSubFlag(String,boolean)` indirectly writes to field `this.dataVersion.timestamp` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"broker/src/main/java/org/apache/rocketmq/broker/topic/TopicConfigManager.java","tnLine":309,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.broker.topic.TopicConfigManager.updateTopicUnitSubFlag(java.lang.String,boolean):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void DefaultMQPullConsumerImpl.doRebalance()` indirectly reads without synchronization from `this.rebalanceImpl.allocateMessageQueueStrategy`. Potentially races with write in method `DefaultMQPullConsumerImpl.start()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPullConsumerImpl.java","tnLine":379,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.client.impl.consumer.DefaultMQPullConsumerImpl.doRebalance():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void TopicConfigManager.updateOrderTopicConfig(KVTable)` indirectly writes to field `topicConfig.order` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"broker/src/main/java/org/apache/rocketmq/broker/topic/TopicConfigManager.java","tnLine":337,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.broker.topic.TopicConfigManager.updateOrderTopicConfig(org.apache.rocketmq.common.protocol.body.KVTable):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `int ListDataCollectorImpl.getRepeatedTimeForData(Object)` reads without synchronization from container `this.datas` via call to `iterator`. Potentially races with write in method `ListDataCollectorImpl.addData(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"test/src/main/java/org/apache/rocketmq/test/util/data/collect/impl/ListDataCollectorImpl.java","tnLine":76,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.test.util.data.collect.impl.ListDataCollectorImpl.getRepeatedTimeForData(java.lang.Object):int","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `long MapDataCollectorImpl.getDataSize()` reads without synchronization from container `this.datas` via call to `values`. Potentially races with write in method `MapDataCollectorImpl.addData(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"test/src/main/java/org/apache/rocketmq/test/util/data/collect/impl/MapDataCollectorImpl.java","tnLine":76,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.test.util.data.collect.impl.MapDataCollectorImpl.getDataSize():long","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void DefaultMQPushConsumerImpl.pullMessage(PullRequest)` indirectly reads without synchronization from `this.defaultMQPushConsumer.instanceName`. Potentially races with write in method `DefaultMQPushConsumerImpl.start()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPushConsumerImpl.java","tnLine":230,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.client.impl.consumer.DefaultMQPushConsumerImpl.pullMessage(org.apache.rocketmq.client.impl.consumer.PullRequest):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void DefaultMQPushConsumerImpl.setConsumeOrderly(boolean)` writes to field `this.consumeOrderly` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPushConsumerImpl.java","tnLine":955,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.client.impl.consumer.DefaultMQPushConsumerImpl.setConsumeOrderly(boolean):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void RouteInfoManager.scanNotActiveBroker()` reads without synchronization from container `this.brokerLiveTable` via call to `entrySet`. Potentially races with write in method `RouteInfoManager.registerBroker(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"namesrv/src/main/java/org/apache/rocketmq/namesrv/routeinfo/RouteInfoManager.java","tnLine":430,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.namesrv.routeinfo.RouteInfoManager.scanNotActiveBroker():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"RESOURCE_LEAK","tnDesc":"resource of type `java.io.OutputStreamWriter` acquired by call to `createWriter(...)` at line 1138 is not released after line 1138.\n**Note**: potential exception at line 1138","tnFile":"logging/src/main/java/org/apache/rocketmq/logging/inner/LoggingBuilder.java","tnLine":1138,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.logging.inner.LoggingBuilder$ConsoleAppender.activateOptions():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `MessageExt DefaultMQPullConsumerImpl.viewMessage(String)` reads without synchronization from `this.mQClientFactory`. Potentially races with write in method `DefaultMQPullConsumerImpl.start()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPullConsumerImpl.java","tnLine":758,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.client.impl.consumer.DefaultMQPullConsumerImpl.viewMessage(java.lang.String):org.apache.rocketmq.common.message.MessageExt","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"RESOURCE_LEAK","tnDesc":"resource of type `java.util.zip.InflaterInputStream` acquired by call to `new()` at line 103 is not released after line 127.","tnFile":"common/src/main/java/org/apache/rocketmq/common/protocol/body/RegisterBrokerBody.java","tnLine":127,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.common.protocol.body.RegisterBrokerBody.decode(byte[],boolean):org.apache.rocketmq.common.protocol.body.RegisterBrokerBody","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void DefaultMQPullConsumerImpl.createTopic(String,String,int,int)` reads without synchronization from `this.mQClientFactory`. Potentially races with write in method `DefaultMQPullConsumerImpl.start()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPullConsumerImpl.java","tnLine":98,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.client.impl.consumer.DefaultMQPullConsumerImpl.createTopic(java.lang.String,java.lang.String,int,int):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void DefaultMQPullConsumerImpl.sendMessageBack(MessageExt,int,String,String)` reads without synchronization from `this.mQClientFactory`. Potentially races with write in method `DefaultMQPullConsumerImpl.start()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPullConsumerImpl.java","tnLine":574,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.client.impl.consumer.DefaultMQPullConsumerImpl.sendMessageBack(org.apache.rocketmq.common.message.MessageExt,int,java.lang.String,java.lang.String):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `List DefaultMQPullConsumerImpl.fetchPublishMessageQueues(String)` reads without synchronization from `this.mQClientFactory`. Potentially races with write in method `DefaultMQPullConsumerImpl.start()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPullConsumerImpl.java","tnLine":134,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.client.impl.consumer.DefaultMQPullConsumerImpl.fetchPublishMessageQueues(java.lang.String):java.util.List","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `long DefaultMQPullConsumerImpl.minOffset(MessageQueue)` reads without synchronization from `this.mQClientFactory`. Potentially races with write in method `DefaultMQPullConsumerImpl.start()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPullConsumerImpl.java","tnLine":170,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.client.impl.consumer.DefaultMQPullConsumerImpl.minOffset(org.apache.rocketmq.common.message.MessageQueue):long","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void LoggingBuilder$WriterAppender.append(LoggingEvent)` indirectly reads without synchronization from `this.closed`. Potentially races with write in method `LoggingBuilder$WriterAppender.close()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"logging/src/main/java/org/apache/rocketmq/logging/inner/LoggingBuilder.java","tnLine":480,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.logging.inner.LoggingBuilder$WriterAppender.append(org.apache.rocketmq.logging.inner.LoggingEvent):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void LoggingBuilder$FileAppender.activateOptions()` reads without synchronization from `this.fileName`. Potentially races with write in method `LoggingBuilder$FileAppender.setFile(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"logging/src/main/java/org/apache/rocketmq/logging/inner/LoggingBuilder.java","tnLine":637,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.logging.inner.LoggingBuilder$FileAppender.activateOptions():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `getEffectiveLevel()` could be null and is dereferenced by call to `isGreaterOrEqual(...)` at line 191.","tnFile":"logging/src/main/java/org/apache/rocketmq/logging/inner/Logger.java","tnLine":191,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.logging.inner.Logger.info(java.lang.Object,java.lang.Throwable):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void MQAdminImpl$1.operationComplete(ResponseFuture)` indirectly reads without synchronization from container `protocol.RemotingCommand.CANONICAL_NAME_CACHE` via call to `get`. Potentially races with write in method `MQAdminImpl$1.operationComplete(...)`.\n Reporting because this access may occur on a background thread.","tnFile":"client/src/main/java/org/apache/rocketmq/client/impl/MQAdminImpl.java","tnLine":331,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.client.impl.MQAdminImpl$1.operationComplete(org.apache.rocketmq.remoting.netty.ResponseFuture):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `MessageExt DefaultMQPushConsumerImpl.queryMessageByUniqKey(String,String)` reads without synchronization from `this.mQClientFactory`. Potentially races with write in method `DefaultMQPushConsumerImpl.start()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPushConsumerImpl.java","tnLine":497,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.client.impl.consumer.DefaultMQPushConsumerImpl.queryMessageByUniqKey(java.lang.String,java.lang.String):org.apache.rocketmq.common.message.MessageExt","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void DefaultMQPushConsumerImpl.executeTaskLater(Runnable,long)` reads without synchronization from `this.mQClientFactory`. Potentially races with write in method `DefaultMQPushConsumerImpl.start()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPushConsumerImpl.java","tnLine":487,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.client.impl.consumer.DefaultMQPushConsumerImpl.executeTaskLater(java.lang.Runnable,long):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `boolean DefaultPromise.set(Object)` indirectly reads without synchronization from `this.promiseListenerList`. Potentially races with write in method `DefaultPromise.addListener(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"openmessaging/src/main/java/io/openmessaging/rocketmq/promise/DefaultPromise.java","tnLine":112,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"io.openmessaging.rocketmq.promise.DefaultPromise.set(java.lang.Object):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void MapDataCollectorImpl.removeData(Object)` mutates container `this.datas` via call to `remove` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"test/src/main/java/org/apache/rocketmq/test/util/data/collect/impl/MapDataCollectorImpl.java","tnLine":101,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.test.util.data.collect.impl.MapDataCollectorImpl.removeData(java.lang.Object):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `topicWrapper.getDataVersion()` could be null and is dereferenced by call to `assignNewOne(...)` at line 65.","tnFile":"broker/src/main/java/org/apache/rocketmq/broker/slave/SlaveSynchronize.java","tnLine":65,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.broker.slave.SlaveSynchronize.syncTopicConfig():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `subscriptionWrapper.getDataVersion()` could be null and is dereferenced by call to `assignNewOne(...)` at line 131.","tnFile":"broker/src/main/java/org/apache/rocketmq/broker/slave/SlaveSynchronize.java","tnLine":131,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.broker.slave.SlaveSynchronize.syncSubscriptionGroupConfig():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `msgDupMap.get(valueOf(i))` could be null and is dereferenced at line 128.","tnFile":"test/src/main/java/org/apache/rocketmq/test/util/DuplicateMessageInfo.java","tnLine":128,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.test.util.DuplicateMessageInfo.getDuplicateMsgNum(java.util.HashMap):int","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `OffsetStore DefaultMQPushConsumerImpl.getOffsetStore()` reads without synchronization from `this.offsetStore`. Potentially races with write in method `DefaultMQPushConsumerImpl.start()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPushConsumerImpl.java","tnLine":205,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.client.impl.consumer.DefaultMQPushConsumerImpl.getOffsetStore():org.apache.rocketmq.client.consumer.store.OffsetStore","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `MQClientInstance.<init>(ClientConfig,int,String,RPCHook)` indirectly writes to field `netty.TlsSystemConfig.tlsClientAuthServer` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"client/src/main/java/org/apache/rocketmq/client/impl/factory/MQClientInstance.java","tnLine":135,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.client.impl.factory.MQClientInstance.<init>(org.apache.rocketmq.client.ClientConfig,int,java.lang.String,org.apache.rocketmq.remoting.RPCHook)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `BrokerStatsManager.statsTable.get(\"SNDBCK_PUT_NUMS\")` could be null and is dereferenced at line 173.","tnFile":"store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java","tnLine":173,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.store.stats.BrokerStatsManager.incSendBackNums(java.lang.String,java.lang.String):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object `requestHeader` last assigned on line 257 could be null and is dereferenced at line 259.","tnFile":"broker/src/main/java/org/apache/rocketmq/broker/processor/AbstractSendMessageProcessor.java","tnLine":259,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.broker.processor.AbstractSendMessageProcessor.executeSendMessageHookBefore(io.netty.channel.ChannelHandlerContext,org.apache.rocketmq.remoting.protocol.RemotingCommand,org.apache.rocketmq.broker.mqtrace.SendMessageContext):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void LoggingBuilder$RollingFileAppender.rollOver()` reads without synchronization from `this.qw`. Potentially races with write in method `LoggingBuilder$RollingFileAppender.setFile(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"logging/src/main/java/org/apache/rocketmq/logging/inner/LoggingBuilder.java","tnLine":760,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.logging.inner.LoggingBuilder$RollingFileAppender.rollOver():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object `consumer.consumer` last assigned on line 49 could be null and is dereferenced by call to `create()` at line 51.","tnFile":"test/src/main/java/org/apache/rocketmq/test/factory/ConsumerFactory.java","tnLine":51,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.test.factory.ConsumerFactory.getRMQBroadCastConsumer(java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.apache.rocketmq.test.listener.AbstractListener):org.apache.rocketmq.test.client.rmq.RMQBroadCastConsumer","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void LoggingBuilder$AsyncAppender.append(LoggingEvent)` indirectly writes to field `event.renderedMessage` outside of synchronization.\n Reporting because this access may occur on a background thread.","tnFile":"logging/src/main/java/org/apache/rocketmq/logging/inner/LoggingBuilder.java","tnLine":186,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.logging.inner.LoggingBuilder$AsyncAppender.append(org.apache.rocketmq.logging.inner.LoggingEvent):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void LoggingBuilder$FileAppender.setFile(String)` writes to field `this.fileName` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"logging/src/main/java/org/apache/rocketmq/logging/inner/LoggingBuilder.java","tnLine":625,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.logging.inner.LoggingBuilder$FileAppender.setFile(java.lang.String):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"RESOURCE_LEAK","tnDesc":"resource of type `java.io.BufferedInputStream` acquired by call to `new()` at line 88 is not released after line 131.\n**Note**: potential exception at line 90","tnFile":"namesrv/src/main/java/org/apache/rocketmq/namesrv/NamesrvStartup.java","tnLine":131,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.namesrv.NamesrvStartup.createNamesrvController(java.lang.String[]):org.apache.rocketmq.namesrv.NamesrvController","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void TopicConfigManager.decode(String)` indirectly writes to field `this.dataVersion.timestamp` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"broker/src/main/java/org/apache/rocketmq/broker/topic/TopicConfigManager.java","tnLine":407,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.broker.topic.TopicConfigManager.decode(java.lang.String):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void ProcessQueue.cleanExpiredMsg(DefaultMQPushConsumer)` indirectly writes to field `msg.topic` outside of synchronization.\n Reporting because this access may occur on a background thread.","tnFile":"client/src/main/java/org/apache/rocketmq/client/impl/consumer/ProcessQueue.java","tnLine":102,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.client.impl.consumer.ProcessQueue.cleanExpiredMsg(org.apache.rocketmq.client.consumer.DefaultMQPushConsumer):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `MQClientInstance.<init>(ClientConfig,int,String)` indirectly writes to field `netty.TlsSystemConfig.tlsClientAuthServer` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"client/src/main/java/org/apache/rocketmq/client/impl/factory/MQClientInstance.java","tnLine":125,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.client.impl.factory.MQClientInstance.<init>(org.apache.rocketmq.client.ClientConfig,int,java.lang.String)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void DefaultMQPullConsumerImpl.updateConsumeOffsetToBroker(MessageQueue,long,boolean)` reads without synchronization from `this.offsetStore`. Potentially races with write in method `DefaultMQPullConsumerImpl.start()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPullConsumerImpl.java","tnLine":568,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.client.impl.consumer.DefaultMQPullConsumerImpl.updateConsumeOffsetToBroker(org.apache.rocketmq.common.message.MessageQueue,long,boolean):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `PullAPIWrapper DefaultMQPullConsumerImpl.getPullAPIWrapper()` reads without synchronization from `this.pullAPIWrapper`. Potentially races with write in method `DefaultMQPullConsumerImpl.start()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPullConsumerImpl.java","tnLine":775,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.client.impl.consumer.DefaultMQPullConsumerImpl.getPullAPIWrapper():org.apache.rocketmq.client.impl.consumer.PullAPIWrapper","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `MessageQueueListener DefaultMQPullConsumer.getMessageQueueListener()` reads without synchronization from `this.messageQueueListener`. Potentially races with write in method `DefaultMQPullConsumer.registerMessageQueueListener(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"client/src/main/java/org/apache/rocketmq/client/consumer/DefaultMQPullConsumer.java","tnLine":245,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.client.consumer.DefaultMQPullConsumer.getMessageQueueListener():org.apache.rocketmq.client.consumer.MessageQueueListener","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void LoggingBuilder$RollingFileAppender.subAppend(LoggingEvent)` indirectly reads without synchronization from `this.qw.count`. Potentially races with write in method `LoggingBuilder$RollingFileAppender.setFile(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"logging/src/main/java/org/apache/rocketmq/logging/inner/LoggingBuilder.java","tnLine":842,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.logging.inner.LoggingBuilder$RollingFileAppender.subAppend(org.apache.rocketmq.logging.inner.LoggingEvent):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void LoggingBuilder$RollingFileAppender.subAppend(LoggingEvent)` indirectly reads without synchronization from `this.immediateFlush`. Potentially races with write in method `LoggingBuilder$RollingFileAppender.setFile(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"logging/src/main/java/org/apache/rocketmq/logging/inner/LoggingBuilder.java","tnLine":840,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.logging.inner.LoggingBuilder$RollingFileAppender.subAppend(org.apache.rocketmq.logging.inner.LoggingEvent):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `BrokerStatsManager.statsTable.get(statsName)` could be null and is dereferenced at line 117.","tnFile":"store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java","tnLine":117,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.store.stats.BrokerStatsManager.getStatsItem(java.lang.String,java.lang.String):org.apache.rocketmq.common.stats.StatsItem","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `getEffectiveLevel()` could be null and is dereferenced by call to `isGreaterOrEqual(...)` at line 132.","tnFile":"logging/src/main/java/org/apache/rocketmq/logging/inner/Logger.java","tnLine":132,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.logging.inner.Logger.error(java.lang.Object,java.lang.Throwable):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `boolean Logger.isAttached(Appender)` reads without synchronization from `this.appenderPipeline`. Potentially races with write in method `Logger.addAppender(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"logging/src/main/java/org/apache/rocketmq/logging/inner/Logger.java","tnLine":197,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.logging.inner.Logger.isAttached(org.apache.rocketmq.logging.inner.Appender):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `long DefaultMQPushConsumerImpl.minOffset(MessageQueue)` reads without synchronization from `this.mQClientFactory`. Potentially races with write in method `DefaultMQPushConsumerImpl.start()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPushConsumerImpl.java","tnLine":201,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.client.impl.consumer.DefaultMQPushConsumerImpl.minOffset(org.apache.rocketmq.common.message.MessageQueue):long","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `getEffectiveLevel()` could be null and is dereferenced by call to `isGreaterOrEqual(...)` at line 103.","tnFile":"logging/src/main/java/org/apache/rocketmq/logging/inner/Logger.java","tnLine":103,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.logging.inner.Logger.debug(java.lang.Object):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `boolean IndexService.load(boolean)` mutates container `this.indexFileList` via call to `add` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"store/src/main/java/org/apache/rocketmq/store/index/IndexService.java","tnLine":77,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.store.index.IndexService.load(boolean):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `CommitLog.topicQueueTable.get(encodeResult.queueOffsetKey)` could be null and is dereferenced at line 419.","tnFile":"store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java","tnLine":419,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.store.dledger.DLedgerCommitLog.putMessage(org.apache.rocketmq.store.MessageExtBrokerInner):org.apache.rocketmq.store.PutMessageResult","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `BrokerStatsManager.statsTable.get(key)` could be null and is dereferenced at line 196.","tnFile":"store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java","tnLine":196,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.store.stats.BrokerStatsManager.incCommercialValue(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void DefaultMQPushConsumerImpl.persistConsumerOffset()` reads without synchronization from `this.offsetStore`. Potentially races with write in method `DefaultMQPushConsumerImpl.start()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPushConsumerImpl.java","tnLine":1021,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.client.impl.consumer.DefaultMQPushConsumerImpl.persistConsumerOffset():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void DefaultMQPushConsumerImpl.subscribe(String,String,String)` reads without synchronization from `this.mQClientFactory`. Potentially races with write in method `DefaultMQPushConsumerImpl.start()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPushConsumerImpl.java","tnLine":896,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.client.impl.consumer.DefaultMQPushConsumerImpl.subscribe(java.lang.String,java.lang.String,java.lang.String):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `BrokerStatsManager.statsTable.get(\"GROUP_GET_NUMS\")` could be null and is dereferenced at line 138.","tnFile":"store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java","tnLine":138,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.store.stats.BrokerStatsManager.incGroupGetNums(java.lang.String,java.lang.String,int):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `boolean DefaultPromise.setFailure(Throwable)` writes to field `this.exception` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"openmessaging/src/main/java/io/openmessaging/rocketmq/promise/DefaultPromise.java","tnLine":119,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"io.openmessaging.rocketmq.promise.DefaultPromise.setFailure(java.lang.Throwable):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void TopicConfigManager.updateTopicUnitFlag(String,boolean)` indirectly writes to field `this.dataVersion.timestamp` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"broker/src/main/java/org/apache/rocketmq/broker/topic/TopicConfigManager.java","tnLine":289,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.broker.topic.TopicConfigManager.updateTopicUnitFlag(java.lang.String,boolean):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `long ListDataCollectorImpl.getDataSize()` reads without synchronization from container `this.datas` via call to `size`. Potentially races with write in method `ListDataCollectorImpl.addData(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"test/src/main/java/org/apache/rocketmq/test/util/data/collect/impl/ListDataCollectorImpl.java","tnLine":63,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.test.util.data.collect.impl.ListDataCollectorImpl.getDataSize():long","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"RESOURCE_LEAK","tnDesc":"resource of type `java.io.InputStreamReader` acquired by call to `InputStreamReader(...)` at line 39 is not released after line 39.\n**Note**: potential exception at line 39","tnFile":"common/src/main/java/org/apache/rocketmq/common/utils/IOTinyUtils.java","tnLine":39,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.common.utils.IOTinyUtils.toString(java.io.InputStream,java.lang.String):java.lang.String","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `BrokerStatsManager.statsTable.get(\"BROKER_PUT_NUMS\")` could be null and is dereferenced at line 160.","tnFile":"store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java","tnLine":160,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.store.stats.BrokerStatsManager.incBrokerPutNums():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void LoggingBuilder$FileAppender.reset()` indirectly writes to field `this.qw` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"logging/src/main/java/org/apache/rocketmq/logging/inner/LoggingBuilder.java","tnLine":731,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.logging.inner.LoggingBuilder$FileAppender.reset():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `int LoggingBuilder$FileAppender.getBufferSize()` reads without synchronization from `this.bufferSize`. Potentially races with write in method `LoggingBuilder$FileAppender.setFile(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"logging/src/main/java/org/apache/rocketmq/logging/inner/LoggingBuilder.java","tnLine":668,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.logging.inner.LoggingBuilder$FileAppender.getBufferSize():int","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `ConsumerRunningInfo DefaultMQPushConsumerImpl.consumerRunningInfo()` reads without synchronization from `this.offsetStore`. Potentially races with write in method `DefaultMQPushConsumerImpl.start()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPushConsumerImpl.java","tnLine":1076,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.client.impl.consumer.DefaultMQPushConsumerImpl.consumerRunningInfo():org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"RESOURCE_LEAK","tnDesc":"resource of type `java.io.LineNumberReader` acquired to `reader` by call to `new()` at line 103 is not released after line 107.","tnFile":"logging/src/main/java/org/apache/rocketmq/logging/inner/LoggingEvent.java","tnLine":107,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.logging.inner.LoggingEvent.getThrowableStr():java.lang.String[]","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object `headerData` last assigned on line 409 could be null and is dereferenced at line 411.","tnFile":"remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RemotingCommand.java","tnLine":411,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.remoting.protocol.RemotingCommand.encodeHeader(int):java.nio.ByteBuffer","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `QueryResult DefaultMQPullConsumerImpl.queryMessage(String,String,int,long,long)` reads without synchronization from `this.mQClientFactory`. Potentially races with write in method `DefaultMQPullConsumerImpl.start()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPullConsumerImpl.java","tnLine":547,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.client.impl.consumer.DefaultMQPullConsumerImpl.queryMessage(java.lang.String,java.lang.String,int,long,long):org.apache.rocketmq.client.QueryResult","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void TopicConfigManager.updateTopicConfig(TopicConfig)` indirectly writes to field `this.dataVersion.timestamp` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"broker/src/main/java/org/apache/rocketmq/broker/topic/TopicConfigManager.java","tnLine":324,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.broker.topic.TopicConfigManager.updateTopicConfig(org.apache.rocketmq.common.TopicConfig):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `getEffectiveLevel()` could be null and is dereferenced by call to `isGreaterOrEqual(...)` at line 182.","tnFile":"logging/src/main/java/org/apache/rocketmq/logging/inner/Logger.java","tnLine":182,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.logging.inner.Logger.info(java.lang.Object):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object `extFieldsBytes` last assigned on line 41 could be null and is dereferenced at line 42.","tnFile":"remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RocketMQSerializable.java","tnLine":42,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.remoting.protocol.RocketMQSerializable.rocketMQProtocolEncode(org.apache.rocketmq.remoting.protocol.RemotingCommand):byte[]","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void LoggingBuilder$WriterAppender.reset()` indirectly reads without synchronization from `this.qw`. Potentially races with write in method `LoggingBuilder$WriterAppender.setWriter(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"logging/src/main/java/org/apache/rocketmq/logging/inner/LoggingBuilder.java","tnLine":576,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.logging.inner.LoggingBuilder$WriterAppender.reset():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `PullResult DefaultMQPullConsumerImpl.pullBlockIfNotFound(MessageQueue,String,long,int)` indirectly reads without synchronization from `this.pullAPIWrapper`. Potentially races with write in method `DefaultMQPullConsumerImpl.start()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPullConsumerImpl.java","tnLine":529,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.client.impl.consumer.DefaultMQPullConsumerImpl.pullBlockIfNotFound(org.apache.rocketmq.common.message.MessageQueue,java.lang.String,long,int):org.apache.rocketmq.client.consumer.PullResult","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void DefaultMQPushConsumerImpl.doRebalance()` indirectly reads without synchronization from `this.consumeOrderly`. Potentially races with write in method `DefaultMQPushConsumerImpl.start()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPushConsumerImpl.java","tnLine":1009,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.client.impl.consumer.DefaultMQPushConsumerImpl.doRebalance():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object `topicOffset` last assigned on line 79 could be null and is dereferenced at line 82.","tnFile":"tools/src/main/java/org/apache/rocketmq/tools/command/topic/TopicStatusSubCommand.java","tnLine":82,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.tools.command.topic.TopicStatusSubCommand.execute(org.apache.commons.cli.CommandLine,org.apache.commons.cli.Options,org.apache.rocketmq.remoting.RPCHook):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void DefaultMQPushConsumerImpl.setOffsetStore(OffsetStore)` writes to field `this.offsetStore` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPushConsumerImpl.java","tnLine":209,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.client.impl.consumer.DefaultMQPushConsumerImpl.setOffsetStore(org.apache.rocketmq.client.consumer.store.OffsetStore):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"RESOURCE_LEAK","tnDesc":"resource of type `java.io.CharArrayWriter` acquired to `sw` by call to `new()` at line 44 is not released after line 46.\n**Note**: potential exception at line 45","tnFile":"common/src/main/java/org/apache/rocketmq/common/utils/IOTinyUtils.java","tnLine":46,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.common.utils.IOTinyUtils.toString(java.io.InputStreamReader):java.lang.String","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void RouteInfoManager.updateBrokerInfoUpdateTimestamp(String)` reads without synchronization from container `this.brokerLiveTable` via call to `get`. Potentially races with write in method `RouteInfoManager.registerBroker(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"namesrv/src/main/java/org/apache/rocketmq/namesrv/routeinfo/RouteInfoManager.java","tnLine":211,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.namesrv.routeinfo.RouteInfoManager.updateBrokerInfoUpdateTimestamp(java.lang.String):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `MessageListener DefaultMQPushConsumerImpl.getMessageListenerInner()` reads without synchronization from `this.messageListenerInner`. Potentially races with write in method `DefaultMQPushConsumerImpl.start()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPushConsumerImpl.java","tnLine":858,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.client.impl.consumer.DefaultMQPushConsumerImpl.getMessageListenerInner():org.apache.rocketmq.client.consumer.listener.MessageListener","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `String LoggingBuilder$FileAppender.getFile()` reads without synchronization from `this.fileName`. Potentially races with write in method `LoggingBuilder$FileAppender.setFile(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"logging/src/main/java/org/apache/rocketmq/logging/inner/LoggingBuilder.java","tnLine":633,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.logging.inner.LoggingBuilder$FileAppender.getFile():java.lang.String","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `boolean LoggingBuilder$WriterAppender.checkEntryConditions()` reads without synchronization from `this.qw`. Potentially races with write in method `LoggingBuilder$WriterAppender.setWriter(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"logging/src/main/java/org/apache/rocketmq/logging/inner/LoggingBuilder.java","tnLine":492,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.logging.inner.LoggingBuilder$WriterAppender.checkEntryConditions():boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object `headerData` last assigned on line 333 could be null and is dereferenced at line 334.","tnFile":"remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RemotingCommand.java","tnLine":334,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.remoting.protocol.RemotingCommand.encode():java.nio.ByteBuffer","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `BrokerStatsManager.statsTable.get(\"TOPIC_PUT_NUMS\")` could be null and is dereferenced at line 129.","tnFile":"store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java","tnLine":129,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.store.stats.BrokerStatsManager.incTopicPutNums(java.lang.String,int,int):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `MQClientInstance DefaultMQPushConsumerImpl.getmQClientFactory()` reads without synchronization from `this.mQClientFactory`. Potentially races with write in method `DefaultMQPushConsumerImpl.start()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPushConsumerImpl.java","tnLine":1090,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.client.impl.consumer.DefaultMQPushConsumerImpl.getmQClientFactory():org.apache.rocketmq.client.impl.factory.MQClientInstance","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `long MapDataCollectorImpl.getDataSizeWithoutDuplicate()` reads without synchronization from container `this.datas` via call to `keySet`. Potentially races with write in method `MapDataCollectorImpl.addData(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"test/src/main/java/org/apache/rocketmq/test/util/data/collect/impl/MapDataCollectorImpl.java","tnLine":66,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.test.util.data.collect.impl.MapDataCollectorImpl.getDataSizeWithoutDuplicate():long","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void DefaultMQPullConsumerImpl.pull(MessageQueue,String,long,int,PullCallback,long)` indirectly reads without synchronization from `this.pullAPIWrapper`. Potentially races with write in method `DefaultMQPullConsumerImpl.start()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPullConsumerImpl.java","tnLine":444,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.client.impl.consumer.DefaultMQPullConsumerImpl.pull(org.apache.rocketmq.common.message.MessageQueue,java.lang.String,long,int,org.apache.rocketmq.client.consumer.PullCallback,long):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void DefaultMQPushConsumerImpl.registerMessageListener(MessageListener)` writes to field `this.messageListenerInner` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPushConsumerImpl.java","tnLine":501,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.client.impl.consumer.DefaultMQPushConsumerImpl.registerMessageListener(org.apache.rocketmq.client.consumer.listener.MessageListener):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void LoggingBuilder$WriterAppender.closeWriter()` reads without synchronization from `this.qw`. Potentially races with write in method `LoggingBuilder$WriterAppender.setWriter(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"logging/src/main/java/org/apache/rocketmq/logging/inner/LoggingBuilder.java","tnLine":515,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.logging.inner.LoggingBuilder$WriterAppender.closeWriter():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void LoggingBuilder$RollingFileAppender.setQWForFiles(Writer)` writes to field `this.qw` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"logging/src/main/java/org/apache/rocketmq/logging/inner/LoggingBuilder.java","tnLine":836,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.logging.inner.LoggingBuilder$RollingFileAppender.setQWForFiles(java.io.Writer):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `Set DefaultMQPullConsumerImpl.fetchSubscribeMessageQueues(String)` reads without synchronization from `this.mQClientFactory`. Potentially races with write in method `DefaultMQPullConsumerImpl.start()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPullConsumerImpl.java","tnLine":142,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.client.impl.consumer.DefaultMQPullConsumerImpl.fetchSubscribeMessageQueues(java.lang.String):java.util.Set","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void LoggingBuilder$RollingFileAppender.rollOver()` reads without synchronization from `this.fileName`. Potentially races with write in method `LoggingBuilder$RollingFileAppender.setFile(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"logging/src/main/java/org/apache/rocketmq/logging/inner/LoggingBuilder.java","tnLine":769,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.logging.inner.LoggingBuilder$RollingFileAppender.rollOver():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `List DefaultMQPushConsumerImpl.queryConsumeTimeSpan(String)` reads without synchronization from `this.mQClientFactory`. Potentially races with write in method `DefaultMQPushConsumerImpl.start()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPushConsumerImpl.java","tnLine":1140,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.client.impl.consumer.DefaultMQPushConsumerImpl.queryConsumeTimeSpan(java.lang.String):java.util.List","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object `pgroupRead` last assigned on line 166 could be null and is dereferenced at line 167.","tnFile":"broker/src/main/java/org/apache/rocketmq/broker/processor/EndTransactionProcessor.java","tnLine":167,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.broker.processor.EndTransactionProcessor.checkPrepareMessage(org.apache.rocketmq.common.message.MessageExt,org.apache.rocketmq.common.protocol.header.EndTransactionRequestHeader):org.apache.rocketmq.remoting.protocol.RemotingCommand","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `request.getExtFields()` could be null and is dereferenced at line 82.","tnFile":"broker/src/main/java/org/apache/rocketmq/broker/processor/QueryMessageProcessor.java","tnLine":82,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.broker.processor.QueryMessageProcessor.queryMessage(io.netty.channel.ChannelHandlerContext,org.apache.rocketmq.remoting.protocol.RemotingCommand):org.apache.rocketmq.remoting.protocol.RemotingCommand","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void LoggingBuilder$WriterAppender.writeHeader()` reads without synchronization from `this.qw`. Potentially races with write in method `LoggingBuilder$WriterAppender.setWriter(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"logging/src/main/java/org/apache/rocketmq/logging/inner/LoggingBuilder.java","tnLine":593,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.logging.inner.LoggingBuilder$WriterAppender.writeHeader():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `PullResult DefaultMQPullConsumerImpl.pull(MessageQueue,MessageSelector,long,int)` indirectly reads without synchronization from `this.pullAPIWrapper`. Potentially races with write in method `DefaultMQPullConsumerImpl.start()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPullConsumerImpl.java","tnLine":186,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.client.impl.consumer.DefaultMQPullConsumerImpl.pull(org.apache.rocketmq.common.message.MessageQueue,org.apache.rocketmq.client.consumer.MessageSelector,long,int):org.apache.rocketmq.client.consumer.PullResult","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"RESOURCE_LEAK","tnDesc":"resource of type `java.io.FileOutputStream` acquired by call to `FileOutputStream(...)` at line 92 is not released after line 103.\n**Note**: potential exception at line 97","tnFile":"common/src/main/java/org/apache/rocketmq/common/utils/IOTinyUtils.java","tnLine":103,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.common.utils.IOTinyUtils.copyFile(java.lang.String,java.lang.String):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void DefaultMQPushConsumerImpl.executePullRequestImmediately(PullRequest)` reads without synchronization from `this.mQClientFactory`. Potentially races with write in method `DefaultMQPushConsumerImpl.start()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPushConsumerImpl.java","tnLine":477,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.client.impl.consumer.DefaultMQPushConsumerImpl.executePullRequestImmediately(org.apache.rocketmq.client.impl.consumer.PullRequest):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void DefaultMQPullConsumerImpl.pull(MessageQueue,MessageSelector,long,int,PullCallback,long)` indirectly reads without synchronization from `this.pullAPIWrapper`. Potentially races with write in method `DefaultMQPullConsumerImpl.start()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPullConsumerImpl.java","tnLine":458,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.client.impl.consumer.DefaultMQPullConsumerImpl.pull(org.apache.rocketmq.common.message.MessageQueue,org.apache.rocketmq.client.consumer.MessageSelector,long,int,org.apache.rocketmq.client.consumer.PullCallback,long):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object `brokerNameSet` last assigned on line 649 could be null and is dereferenced at line 650.","tnFile":"namesrv/src/main/java/org/apache/rocketmq/namesrv/routeinfo/RouteInfoManager.java","tnLine":650,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.namesrv.routeinfo.RouteInfoManager.getTopicsByCluster(java.lang.String):byte[]","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void DataCollectorManager.removeAll()` mutates container `this.collectMap` via call to `clear` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"test/src/main/java/org/apache/rocketmq/test/util/data/collect/DataCollectorManager.java","tnLine":110,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.test.util.data.collect.DataCollectorManager.removeAll():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void DefaultMQPullConsumerImpl.pull(MessageQueue,String,long,int,PullCallback)` indirectly reads without synchronization from `this.pullAPIWrapper`. Potentially races with write in method `DefaultMQPullConsumerImpl.start()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPullConsumerImpl.java","tnLine":437,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.client.impl.consumer.DefaultMQPullConsumerImpl.pull(org.apache.rocketmq.common.message.MessageQueue,java.lang.String,long,int,org.apache.rocketmq.client.consumer.PullCallback):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object `brokerNameSet` last assigned on line 129 could be null and is dereferenced at line 130.","tnFile":"tools/src/main/java/org/apache/rocketmq/tools/command/CommandUtil.java","tnLine":130,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.tools.command.CommandUtil.fetchBrokerNameByClusterName(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String):java.util.Set","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void DefaultMQPushConsumerImpl.setmQClientFactory(MQClientInstance)` writes to field `this.mQClientFactory` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPushConsumerImpl.java","tnLine":1094,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.client.impl.consumer.DefaultMQPushConsumerImpl.setmQClientFactory(org.apache.rocketmq.client.impl.factory.MQClientInstance):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `OffsetStore DefaultMQPullConsumerImpl.getOffsetStore()` reads without synchronization from `this.offsetStore`. Potentially races with write in method `DefaultMQPullConsumerImpl.start()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPullConsumerImpl.java","tnLine":767,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.client.impl.consumer.DefaultMQPullConsumerImpl.getOffsetStore():org.apache.rocketmq.client.consumer.store.OffsetStore","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void MapDataCollectorImpl.resetData()` mutates container `this.datas` via call to `clear` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"test/src/main/java/org/apache/rocketmq/test/util/data/collect/impl/MapDataCollectorImpl.java","tnLine":70,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.test.util.data.collect.impl.MapDataCollectorImpl.resetData():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `long DefaultMQPushConsumerImpl.maxOffset(MessageQueue)` reads without synchronization from `this.mQClientFactory`. Potentially races with write in method `DefaultMQPushConsumerImpl.start()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPushConsumerImpl.java","tnLine":197,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.client.impl.consumer.DefaultMQPushConsumerImpl.maxOffset(org.apache.rocketmq.common.message.MessageQueue):long","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `BrokerStatsManager.statsTable.get(\"BROKER_GET_NUMS\")` could be null and is dereferenced at line 168.","tnFile":"store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java","tnLine":168,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.store.stats.BrokerStatsManager.incBrokerGetNums(int):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void PushConsumerImpl.resume()` indirectly reads without synchronization from `this.rocketmqPushConsumer.defaultMQPushConsumerImpl.consumeOrderly`. Potentially races with write in method `PushConsumerImpl.startup()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"openmessaging/src/main/java/io/openmessaging/rocketmq/consumer/PushConsumerImpl.java","tnLine":89,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"io.openmessaging.rocketmq.consumer.PushConsumerImpl.resume():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `brokers.get(brokerName)` could be null and is dereferenced at line 127.","tnFile":"test/src/main/java/org/apache/rocketmq/test/util/MQAdmin.java","tnLine":127,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.test.util.MQAdmin.isBrokerExist(java.lang.String,java.lang.String):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void DefaultMQPushConsumerImpl.createTopic(String,String,int,int)` reads without synchronization from `this.mQClientFactory`. Potentially races with write in method `DefaultMQPushConsumerImpl.start()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPushConsumerImpl.java","tnLine":161,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.client.impl.consumer.DefaultMQPushConsumerImpl.createTopic(java.lang.String,java.lang.String,int,int):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `QueryResult DefaultMQPushConsumerImpl.queryMessage(String,String,int,long,long)` reads without synchronization from `this.mQClientFactory`. Potentially races with write in method `DefaultMQPushConsumerImpl.start()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPushConsumerImpl.java","tnLine":492,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.client.impl.consumer.DefaultMQPushConsumerImpl.queryMessage(java.lang.String,java.lang.String,int,long,long):org.apache.rocketmq.client.QueryResult","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void LoggingBuilder$FileAppender.activateOptions()` reads without synchronization from `this.bufferSize`. Potentially races with write in method `LoggingBuilder$FileAppender.setFile(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"logging/src/main/java/org/apache/rocketmq/logging/inner/LoggingBuilder.java","tnLine":639,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.logging.inner.LoggingBuilder$FileAppender.activateOptions():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `BrokerStatsManager.statsTable.get(\"GROUP_GET_NUMS\")` could be null and is dereferenced at line 178.","tnFile":"store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java","tnLine":178,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.store.stats.BrokerStatsManager.tpsGroupGetNums(java.lang.String,java.lang.String):double","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `Set DefaultMQPushConsumerImpl.fetchSubscribeMessageQueues(String)` reads without synchronization from `this.mQClientFactory`. Potentially races with write in method `DefaultMQPushConsumerImpl.start()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPushConsumerImpl.java","tnLine":167,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.client.impl.consumer.DefaultMQPushConsumerImpl.fetchSubscribeMessageQueues(java.lang.String):java.util.Set","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void DefaultMQPushConsumerImpl.updateCorePoolSize(int)` reads without synchronization from `this.consumeMessageService`. Potentially races with write in method `DefaultMQPushConsumerImpl.start()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPushConsumerImpl.java","tnLine":938,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.client.impl.consumer.DefaultMQPushConsumerImpl.updateCorePoolSize(int):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `boolean LoggingBuilder$AsyncAppender.getBlocking()` reads without synchronization from `this.blocking`. Potentially races with write in method `LoggingBuilder$AsyncAppender.setBlocking(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"logging/src/main/java/org/apache/rocketmq/logging/inner/LoggingBuilder.java","tnLine":318,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.logging.inner.LoggingBuilder$AsyncAppender.getBlocking():boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void LoggingBuilder$RollingFileAppender.subAppend(LoggingEvent)` reads without synchronization from `this.fileName`. Potentially races with write in method `LoggingBuilder$RollingFileAppender.setFile(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"logging/src/main/java/org/apache/rocketmq/logging/inner/LoggingBuilder.java","tnLine":841,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.logging.inner.LoggingBuilder$RollingFileAppender.subAppend(org.apache.rocketmq.logging.inner.LoggingEvent):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `BrokerStatsManager.statsTable.get(\"TOPIC_PUT_SIZE\")` could be null and is dereferenced at line 133.","tnFile":"store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java","tnLine":133,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.store.stats.BrokerStatsManager.incTopicPutSize(java.lang.String,int):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void DefaultMQPushConsumerImpl.pullMessage(PullRequest)` indirectly reads without synchronization from `this.mQClientFactory`. Potentially races with write in method `DefaultMQPushConsumerImpl.start()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPushConsumerImpl.java","tnLine":293,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.client.impl.consumer.DefaultMQPushConsumerImpl.pullMessage(org.apache.rocketmq.client.impl.consumer.PullRequest):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `Enumeration Logger$DefaultLoggerRepository.getCurrentLoggers()` reads without synchronization from container `this.ht` via call to `size`. Potentially races with write in method `Logger$DefaultLoggerRepository.getLogger(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"logging/src/main/java/org/apache/rocketmq/logging/inner/Logger.java","tnLine":351,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.logging.inner.Logger$DefaultLoggerRepository.getCurrentLoggers():java.util.Enumeration","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `boolean DefaultPromise.setFailure(Throwable)` indirectly reads without synchronization from `this.promiseListenerList`. Potentially races with write in method `DefaultPromise.addListener(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"openmessaging/src/main/java/io/openmessaging/rocketmq/promise/DefaultPromise.java","tnLine":120,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"io.openmessaging.rocketmq.promise.DefaultPromise.setFailure(java.lang.Throwable):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `long DefaultMQPullConsumerImpl.searchOffset(MessageQueue,long)` reads without synchronization from `this.mQClientFactory`. Potentially races with write in method `DefaultMQPullConsumerImpl.start()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPullConsumerImpl.java","tnLine":558,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.client.impl.consumer.DefaultMQPullConsumerImpl.searchOffset(org.apache.rocketmq.common.message.MessageQueue,long):long","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `long DefaultMQPullConsumerImpl.earliestMsgStoreTime(MessageQueue)` reads without synchronization from `this.mQClientFactory`. Potentially races with write in method `DefaultMQPullConsumerImpl.start()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPullConsumerImpl.java","tnLine":160,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.client.impl.consumer.DefaultMQPullConsumerImpl.earliestMsgStoreTime(org.apache.rocketmq.common.message.MessageQueue):long","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `PushConsumer PushConsumerImpl.attachQueue(String,MessageListener,KeyValue)` indirectly reads without synchronization from `this.rocketmqPushConsumer.defaultMQPushConsumerImpl.mQClientFactory`. Potentially races with write in method `PushConsumerImpl.startup()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"openmessaging/src/main/java/io/openmessaging/rocketmq/consumer/PushConsumerImpl.java","tnLine":120,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"io.openmessaging.rocketmq.consumer.PushConsumerImpl.attachQueue(java.lang.String,io.openmessaging.consumer.MessageListener,io.openmessaging.KeyValue):io.openmessaging.consumer.PushConsumer","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `PullResult DefaultMQPullConsumerImpl.pull(MessageQueue,String,long,int)` indirectly reads without synchronization from `this.pullAPIWrapper`. Potentially races with write in method `DefaultMQPullConsumerImpl.start()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPullConsumerImpl.java","tnLine":175,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.client.impl.consumer.DefaultMQPullConsumerImpl.pull(org.apache.rocketmq.common.message.MessageQueue,java.lang.String,long,int):org.apache.rocketmq.client.consumer.PullResult","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void LoggingBuilder$WriterAppender.writeFooter()` reads without synchronization from `this.qw`. Potentially races with write in method `LoggingBuilder$WriterAppender.setWriter(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"logging/src/main/java/org/apache/rocketmq/logging/inner/LoggingBuilder.java","tnLine":583,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.logging.inner.LoggingBuilder$WriterAppender.writeFooter():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `boolean LoggingBuilder$FileAppender.getBufferedIO()` reads without synchronization from `this.bufferedIO`. Potentially races with write in method `LoggingBuilder$FileAppender.setFile(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"logging/src/main/java/org/apache/rocketmq/logging/inner/LoggingBuilder.java","tnLine":664,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.logging.inner.LoggingBuilder$FileAppender.getBufferedIO():boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void KVConfigManager.load()` mutates container `this.configTable` via call to `putAll` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"namesrv/src/main/java/org/apache/rocketmq/namesrv/kvconfig/KVConfigManager.java","tnLine":55,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.namesrv.kvconfig.KVConfigManager.load():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object `consumer.consumer` last assigned on line 59 could be null and is dereferenced by call to `create()` at line 61.","tnFile":"test/src/main/java/org/apache/rocketmq/test/factory/ConsumerFactory.java","tnLine":61,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.test.factory.ConsumerFactory.getRMQSqlConsumer(java.lang.String,java.lang.String,java.lang.String,org.apache.rocketmq.client.consumer.MessageSelector,org.apache.rocketmq.test.listener.AbstractListener):org.apache.rocketmq.test.client.rmq.RMQSqlConsumer","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `MQProducer RocketmqLog4jAppender.getProducer()` reads without synchronization from `this.producer`. Potentially races with write in method `RocketmqLog4jAppender.close()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"logappender/src/main/java/org/apache/rocketmq/logappender/log4j/RocketmqLog4jAppender.java","tnLine":179,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.logappender.log4j.RocketmqLog4jAppender.getProducer():org.apache.rocketmq.client.producer.MQProducer","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void LoggingBuilder$WriterAppender.subAppend(LoggingEvent)` reads without synchronization from `this.qw`. Potentially races with write in method `LoggingBuilder$WriterAppender.setWriter(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"logging/src/main/java/org/apache/rocketmq/logging/inner/LoggingBuilder.java","tnLine":558,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.logging.inner.LoggingBuilder$WriterAppender.subAppend(org.apache.rocketmq.logging.inner.LoggingEvent):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `BrokerStatsManager.statsTable.get(\"GROUP_GET_SIZE\")` could be null and is dereferenced at line 151.","tnFile":"store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java","tnLine":151,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.store.stats.BrokerStatsManager.incGroupGetSize(java.lang.String,java.lang.String,int):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `DataCollector DataCollectorManager.fetchListDataCollector(String)` reads without synchronization from container `this.collectMap` via call to `get`. Potentially races with write in method `DataCollectorManager.fetchListDataCollector(...)`.\n Reporting because this access may occur on a background thread.","tnFile":"test/src/main/java/org/apache/rocketmq/test/util/data/collect/DataCollectorManager.java","tnLine":90,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.test.util.data.collect.DataCollectorManager.fetchListDataCollector(java.lang.String):org.apache.rocketmq.test.util.data.collect.DataCollector","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `request.getExtFields()` could be null and is dereferenced at line 996.","tnFile":"broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java","tnLine":996,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.broker.processor.AdminBrokerProcessor.consumeMessageDirectly(io.netty.channel.ChannelHandlerContext,org.apache.rocketmq.remoting.protocol.RemotingCommand):org.apache.rocketmq.remoting.protocol.RemotingCommand","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"RESOURCE_LEAK","tnDesc":"resource of type `java.io.BufferedInputStream` acquired by call to `new()` at line 128 is not released after line 244.\n**Note**: potential exception at line 130","tnFile":"broker/src/main/java/org/apache/rocketmq/broker/BrokerStartup.java","tnLine":244,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.broker.BrokerStartup.createBrokerController(java.lang.String[]):org.apache.rocketmq.broker.BrokerController","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `PullResult DefaultMQPullConsumerImpl.pull(MessageQueue,MessageSelector,long,int,long)` indirectly reads without synchronization from `this.pullAPIWrapper`. Potentially races with write in method `DefaultMQPullConsumerImpl.start()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPullConsumerImpl.java","tnLine":192,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.client.impl.consumer.DefaultMQPullConsumerImpl.pull(org.apache.rocketmq.common.message.MessageQueue,org.apache.rocketmq.client.consumer.MessageSelector,long,int,long):org.apache.rocketmq.client.consumer.PullResult","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object `consumer.consumer` last assigned on line 39 could be null and is dereferenced by call to `start()` at line 42.","tnFile":"test/src/main/java/org/apache/rocketmq/test/factory/ConsumerFactory.java","tnLine":42,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.test.factory.ConsumerFactory.getRMQNormalConsumer(java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.apache.rocketmq.test.listener.AbstractListener,boolean):org.apache.rocketmq.test.client.rmq.RMQNormalConsumer","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void DefaultMQPullConsumerImpl.createTopic(String,String,int)` indirectly reads without synchronization from `this.mQClientFactory`. Potentially races with write in method `DefaultMQPullConsumerImpl.start()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPullConsumerImpl.java","tnLine":93,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.client.impl.consumer.DefaultMQPullConsumerImpl.createTopic(java.lang.String,java.lang.String,int):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `ConsumeMessageService DefaultMQPushConsumerImpl.getConsumeMessageService()` reads without synchronization from `this.consumeMessageService`. Potentially races with write in method `DefaultMQPushConsumerImpl.start()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPushConsumerImpl.java","tnLine":1164,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.client.impl.consumer.DefaultMQPushConsumerImpl.getConsumeMessageService():org.apache.rocketmq.client.impl.consumer.ConsumeMessageService","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `BrokerStatsManager.statsTable.get(\"GROUP_GET_LATENCY\")` could be null and is dereferenced at line 156.","tnFile":"store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java","tnLine":156,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.store.stats.BrokerStatsManager.incGroupGetLatency(java.lang.String,java.lang.String,int,int):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void DefaultMQPullConsumer.registerMessageQueueListener(String,MessageQueueListener)` reads without synchronization from `this.registerTopics`. Potentially races with write in method `DefaultMQPullConsumer.setRegisterTopics(...)`.\n Reporting because this access may occur on a background thread.","tnFile":"client/src/main/java/org/apache/rocketmq/client/consumer/DefaultMQPullConsumer.java","tnLine":302,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.client.consumer.DefaultMQPullConsumer.registerMessageQueueListener(java.lang.String,org.apache.rocketmq.client.consumer.MessageQueueListener):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `long DefaultMQPullConsumerImpl.maxOffset(MessageQueue)` reads without synchronization from `this.mQClientFactory`. Potentially races with write in method `DefaultMQPullConsumerImpl.start()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPullConsumerImpl.java","tnLine":165,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.client.impl.consumer.DefaultMQPullConsumerImpl.maxOffset(org.apache.rocketmq.common.message.MessageQueue):long","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void DefaultMQPushConsumerImpl.pullMessage(PullRequest)` reads without synchronization from `this.offsetStore`. Potentially races with write in method `DefaultMQPushConsumerImpl.start()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPushConsumerImpl.java","tnLine":407,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.client.impl.consumer.DefaultMQPushConsumerImpl.pullMessage(org.apache.rocketmq.client.impl.consumer.PullRequest):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void DataCollectorManager.removeDataCollect(String)` mutates container `this.collectMap` via call to `remove` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"test/src/main/java/org/apache/rocketmq/test/util/data/collect/DataCollectorManager.java","tnLine":106,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.test.util.data.collect.DataCollectorManager.removeDataCollect(java.lang.String):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `ConsumerRunningInfo DefaultMQPushConsumerImpl.consumerRunningInfo()` reads without synchronization from `this.mQClientFactory`. Potentially races with write in method `DefaultMQPushConsumerImpl.start()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPushConsumerImpl.java","tnLine":1082,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.client.impl.consumer.DefaultMQPushConsumerImpl.consumerRunningInfo():org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `long DefaultMQPullConsumerImpl.fetchConsumeOffset(MessageQueue,boolean)` reads without synchronization from `this.offsetStore`. Potentially races with write in method `DefaultMQPullConsumerImpl.start()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPullConsumerImpl.java","tnLine":112,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.client.impl.consumer.DefaultMQPullConsumerImpl.fetchConsumeOffset(org.apache.rocketmq.common.message.MessageQueue,boolean):long","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void ProcessQueue.cleanExpiredMsg(DefaultMQPushConsumer)` reads without synchronization from container `this.msgTreeMap` via call to `size`. Potentially races with write in method `ProcessQueue.rollback()`.\n Reporting because this access may occur on a background thread.","tnFile":"client/src/main/java/org/apache/rocketmq/client/impl/consumer/ProcessQueue.java","tnLine":81,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.client.impl.consumer.ProcessQueue.cleanExpiredMsg(org.apache.rocketmq.client.consumer.DefaultMQPushConsumer):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `PushConsumer PushConsumerImpl.attachQueue(String,MessageListener)` indirectly reads without synchronization from `this.rocketmqPushConsumer.defaultMQPushConsumerImpl.mQClientFactory`. Potentially races with write in method `PushConsumerImpl.startup()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"openmessaging/src/main/java/io/openmessaging/rocketmq/consumer/PushConsumerImpl.java","tnLine":111,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"io.openmessaging.rocketmq.consumer.PushConsumerImpl.attachQueue(java.lang.String,io.openmessaging.consumer.MessageListener):io.openmessaging.consumer.PushConsumer","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void DefaultMQPushConsumerImpl.sendMessageBack(MessageExt,int,String)` reads without synchronization from `this.mQClientFactory`. Potentially races with write in method `DefaultMQPushConsumerImpl.start()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPushConsumerImpl.java","tnLine":513,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.client.impl.consumer.DefaultMQPushConsumerImpl.sendMessageBack(org.apache.rocketmq.common.message.MessageExt,int,java.lang.String):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void DefaultMQPullConsumerImpl.sendMessageBack(MessageExt,int,String)` indirectly reads without synchronization from `this.mQClientFactory`. Potentially races with write in method `DefaultMQPullConsumerImpl.start()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPullConsumerImpl.java","tnLine":563,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.client.impl.consumer.DefaultMQPullConsumerImpl.sendMessageBack(org.apache.rocketmq.common.message.MessageExt,int,java.lang.String):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `long DefaultMQPushConsumerImpl.searchOffset(MessageQueue,long)` reads without synchronization from `this.mQClientFactory`. Potentially races with write in method `DefaultMQPushConsumerImpl.start()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPushConsumerImpl.java","tnLine":974,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.client.impl.consumer.DefaultMQPushConsumerImpl.searchOffset(org.apache.rocketmq.common.message.MessageQueue,long):long","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `BrokerController.messageStore.getDispatcherList()` could be null and is dereferenced at line 249.","tnFile":"broker/src/main/java/org/apache/rocketmq/broker/BrokerController.java","tnLine":249,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.broker.BrokerController.initialize():boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void LoggingBuilder$FileAppender.setBufferSize(int)` writes to field `this.bufferSize` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"logging/src/main/java/org/apache/rocketmq/logging/inner/LoggingBuilder.java","tnLine":683,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.logging.inner.LoggingBuilder$FileAppender.setBufferSize(int):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void DataCollectorManager.resetAll()` reads without synchronization from container `this.collectMap` via call to `entrySet`. Potentially races with write in method `DataCollectorManager.fetchListDataCollector(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"test/src/main/java/org/apache/rocketmq/test/util/data/collect/DataCollectorManager.java","tnLine":100,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.test.util.data.collect.DataCollectorManager.resetAll():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `PullResult DefaultMQPullConsumerImpl.pull(MessageQueue,String,long,int,long)` indirectly reads without synchronization from `this.pullAPIWrapper`. Potentially races with write in method `DefaultMQPullConsumerImpl.start()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPullConsumerImpl.java","tnLine":181,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.client.impl.consumer.DefaultMQPullConsumerImpl.pull(org.apache.rocketmq.common.message.MessageQueue,java.lang.String,long,int,long):org.apache.rocketmq.client.consumer.PullResult","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"RESOURCE_LEAK","tnDesc":"resource of type `java.io.InputStreamReader` acquired by call to `InputStreamReader(...)` at line 106 is not released after line 128.\n**Note**: potential exception at line 110","tnFile":"broker/src/main/java/org/apache/rocketmq/broker/util/ServiceProvider.java","tnLine":128,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.broker.util.ServiceProvider.load(java.lang.String,java.lang.Class):java.util.List","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `getEffectiveLevel()` could be null and is dereferenced by call to `isGreaterOrEqual(...)` at line 123.","tnFile":"logging/src/main/java/org/apache/rocketmq/logging/inner/Logger.java","tnLine":123,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.logging.inner.Logger.error(java.lang.Object):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void LoggingBuilder$FileAppender.setAppend(boolean)` writes to field `this.fileAppend` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"logging/src/main/java/org/apache/rocketmq/logging/inner/LoggingBuilder.java","tnLine":672,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.logging.inner.LoggingBuilder$FileAppender.setAppend(boolean):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void TopicConfigManager.updateOrderTopicConfig(KVTable)` indirectly writes to field `this.dataVersion.timestamp` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"broker/src/main/java/org/apache/rocketmq/broker/topic/TopicConfigManager.java","tnLine":356,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.broker.topic.TopicConfigManager.updateOrderTopicConfig(org.apache.rocketmq.common.protocol.body.KVTable):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object `buffer` last assigned on line 59 could be null and is dereferenced at line 62.","tnFile":"common/src/main/java/org/apache/rocketmq/common/protocol/body/RegisterBrokerBody.java","tnLine":62,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.common.protocol.body.RegisterBrokerBody.encode(boolean):byte[]","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `getEffectiveLevel()` could be null and is dereferenced by call to `isGreaterOrEqual(...)` at line 234.","tnFile":"logging/src/main/java/org/apache/rocketmq/logging/inner/Logger.java","tnLine":234,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.logging.inner.Logger.warn(java.lang.Object):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void DefaultMQPushConsumerImpl.createTopic(String,String,int)` indirectly reads without synchronization from `this.mQClientFactory`. Potentially races with write in method `DefaultMQPushConsumerImpl.start()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPushConsumerImpl.java","tnLine":157,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.client.impl.consumer.DefaultMQPushConsumerImpl.createTopic(java.lang.String,java.lang.String,int):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void DefaultMQPullConsumerImpl.setOffsetStore(OffsetStore)` writes to field `this.offsetStore` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPullConsumerImpl.java","tnLine":771,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.client.impl.consumer.DefaultMQPullConsumerImpl.setOffsetStore(org.apache.rocketmq.client.consumer.store.OffsetStore):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void DefaultMQPushConsumerImpl.subscribe(String,String)` reads without synchronization from `this.mQClientFactory`. Potentially races with write in method `DefaultMQPushConsumerImpl.start()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPushConsumerImpl.java","tnLine":880,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.client.impl.consumer.DefaultMQPushConsumerImpl.subscribe(java.lang.String,java.lang.String):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void LoggingBuilder$FileAppender.setBufferedIO(boolean)` writes to field `this.bufferedIO` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"logging/src/main/java/org/apache/rocketmq/logging/inner/LoggingBuilder.java","tnLine":676,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.logging.inner.LoggingBuilder$FileAppender.setBufferedIO(boolean):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void LoggingBuilder$RollingFileAppender.rollOver()` indirectly reads without synchronization from `this.qw.count`. Potentially races with write in method `LoggingBuilder$RollingFileAppender.setFile(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"logging/src/main/java/org/apache/rocketmq/logging/inner/LoggingBuilder.java","tnLine":761,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.logging.inner.LoggingBuilder$RollingFileAppender.rollOver():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"RESOURCE_LEAK","tnDesc":"resource of type `java.io.CharArrayWriter` acquired by call to `new()` at line 44 is not released after line 46.","tnFile":"common/src/main/java/org/apache/rocketmq/common/utils/IOTinyUtils.java","tnLine":46,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.common.utils.IOTinyUtils.toString(java.io.InputStreamReader):java.lang.String","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void RocketmqLogbackAppender.append(Object)` indirectly reads without synchronization from `this.producer`. Potentially races with write in method `RocketmqLogbackAppender.stop()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"logappender/src/main/java/org/apache/rocketmq/logappender/logback/RocketmqLogbackAppender.java","tnLine":32,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.logappender.logback.RocketmqLogbackAppender.append(java.lang.Object):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void DefaultMQPullConsumerImpl.persistConsumerOffset()` reads without synchronization from `this.offsetStore`. Potentially races with write in method `DefaultMQPullConsumerImpl.start()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPullConsumerImpl.java","tnLine":390,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.client.impl.consumer.DefaultMQPullConsumerImpl.persistConsumerOffset():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void LoggingBuilder$FileAppender.setQWForFiles(Writer)` writes to field `this.qw` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"logging/src/main/java/org/apache/rocketmq/logging/inner/LoggingBuilder.java","tnLine":725,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.logging.inner.LoggingBuilder$FileAppender.setQWForFiles(java.io.Writer):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `MessageExt DefaultMQPullConsumerImpl.queryMessageByUniqKey(String,String)` reads without synchronization from `this.mQClientFactory`. Potentially races with write in method `DefaultMQPullConsumerImpl.start()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPullConsumerImpl.java","tnLine":553,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.client.impl.consumer.DefaultMQPullConsumerImpl.queryMessageByUniqKey(java.lang.String,java.lang.String):org.apache.rocketmq.common.message.MessageExt","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void DefaultMQPullConsumerImpl.pullBlockIfNotFound(MessageQueue,String,long,int,PullCallback)` indirectly reads without synchronization from `this.pullAPIWrapper`. Potentially races with write in method `DefaultMQPullConsumerImpl.start()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPullConsumerImpl.java","tnLine":540,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.client.impl.consumer.DefaultMQPullConsumerImpl.pullBlockIfNotFound(org.apache.rocketmq.common.message.MessageQueue,java.lang.String,long,int,org.apache.rocketmq.client.consumer.PullCallback):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void DefaultMQPushConsumerImpl.adjustThreadPool()` reads without synchronization from `this.consumeMessageService`. Potentially races with write in method `DefaultMQPushConsumerImpl.start()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPushConsumerImpl.java","tnLine":1116,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.client.impl.consumer.DefaultMQPushConsumerImpl.adjustThreadPool():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object `first` last assigned on line 46 could be null and is dereferenced at line 68.","tnFile":"common/src/main/java/org/apache/rocketmq/common/message/MessageBatch.java","tnLine":68,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.common.message.MessageBatch.generateFromList(java.util.Collection):org.apache.rocketmq.common.message.MessageBatch","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void DataCollectorManager.resetDataCollect(String)` reads without synchronization from container `this.collectMap` via call to `get`. Potentially races with write in method `DataCollectorManager.fetchListDataCollector(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"test/src/main/java/org/apache/rocketmq/test/util/data/collect/DataCollectorManager.java","tnLine":95,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.test.util.data.collect.DataCollectorManager.resetDataCollect(java.lang.String):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void DefaultMQPushConsumerImpl.pullMessage(PullRequest)` reads without synchronization from `this.consumeOrderly`. Potentially races with write in method `DefaultMQPushConsumerImpl.start()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPushConsumerImpl.java","tnLine":258,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.client.impl.consumer.DefaultMQPushConsumerImpl.pullMessage(org.apache.rocketmq.client.impl.consumer.PullRequest):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void DefaultMQPushConsumerImpl.setConsumeMessageService(ConsumeMessageService)` writes to field `this.consumeMessageService` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPushConsumerImpl.java","tnLine":1168,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.client.impl.consumer.DefaultMQPushConsumerImpl.setConsumeMessageService(org.apache.rocketmq.client.impl.consumer.ConsumeMessageService):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object `msg` last assigned on line 83 could be null and is dereferenced by call to `sendMessageBack(...)` at line 102.","tnFile":"client/src/main/java/org/apache/rocketmq/client/impl/consumer/ProcessQueue.java","tnLine":102,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.client.impl.consumer.ProcessQueue.cleanExpiredMsg(org.apache.rocketmq.client.consumer.DefaultMQPushConsumer):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void DefaultMQPullConsumerImpl.updateConsumeOffset(MessageQueue,long)` reads without synchronization from `this.offsetStore`. Potentially races with write in method `DefaultMQPullConsumerImpl.start()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPullConsumerImpl.java","tnLine":752,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.apache.rocketmq.client.impl.consumer.DefaultMQPullConsumerImpl.updateConsumeOffset(org.apache.rocketmq.common.message.MessageQueue,long):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}}],null,{"analysisLOC":null,"analysisBuildSys":"Maven []","analysisLang":null}]}]],"debugLog":"APIImpl.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/client/src/main/java/org/apache/rocketmq/client/hook/ConsumeMessageHook.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/client/src/main/java/org/apache/rocketmq/client/consumer/listener/ConsumeOrderlyStatus.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/client/src/main/java/org/apache/rocketmq/client/producer/SendResult.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/client/src/main/java/org/apache/rocketmq/client/producer/TransactionMQProducer.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/client/src/main/java/org/apache/rocketmq/client/consumer/store/RemoteBrokerOffsetStore.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/client/src/main/java/org/apache/rocketmq/client/MQHelper.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/client/src/main/java/org/apache/rocketmq/client/hook/SendMessageHook.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/client/src/main/java/org/apache/rocketmq/client/exception/MQClientException.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/client/src/main/java/org/apache/rocketmq/client/consumer/PullTaskContext.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/client/src/main/java/org/apache/rocketmq/client/trace/TraceDispatcherType.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/client/src/main/java/org/apache/rocketmq/client/consumer/PullStatus.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/client/src/main/java/org/apache/rocketmq/client/trace/TraceType.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/client/src/main/java/org/apache/rocketmq/client/trace/hook/ConsumeMessageTraceHookImpl.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/client/src/main/java/org/apache/rocketmq/client/impl/consumer/RebalanceService.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/client/src/main/java/org/apache/rocketmq/client/impl/consumer/PullMessageService.java\\\"],\\\"classpath\\\":[\\\"/root/.m2/repository/net/bytebuddy/byte-buddy-agent/1.6.2/byte-buddy-agent-1.6.2.jar\\\",\\\"/root/.m2/repository/io/netty/netty-tcnative-boringssl-static/1.1.33.Fork26/netty-tcnative-boringssl-static-1.1.33.Fork26.jar\\\",\\\"/root/.m2/repository/org/assertj/assertj-core/2.6.0/assertj-core-2.6.0.jar\\\",\\\"/root/.m2/repository/org/apache/commons/commons-lang3/3.4/commons-lang3-3.4.jar\\\",\\\"/root/.m2/repository/org/mockito/mockito-core/2.6.3/mockito-core-2.6.3.jar\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/logging/target/rocketmq-logging-4.5.1.jar\\\",\\\"/root/.m2/repository/org/apache/logging/log4j/log4j-slf4j-impl/2.7/log4j-slf4j-impl-2.7.jar\\\",\\\"/root/.m2/repository/net/bytebuddy/byte-buddy/1.6.2/byte-buddy-1.6.2.jar\\\",\\\"/root/.m2/repository/org/objenesis/objenesis/2.5/objenesis-2.5.jar\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/common/target/rocketmq-common-4.5.1.jar\\\",\\\"/root/.m2/repository/org/apache/logging/log4j/log4j-api/2.7/log4j-api-2.7.jar\\\",\\\"/root/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar\\\",\\\"/root/.m2/repository/org/apache/logging/log4j/log4j-core/2.7/log4j-core-2.7.jar\\\",\\\"/root/.m2/repository/junit/junit/4.11/junit-4.11.jar\\\",\\\"/root/.m2/repository/io/netty/netty-all/4.0.42.Final/netty-all-4.0.42.Final.jar\\\",\\\"/root/.m2/repository/com/alibaba/fastjson/1.2.51/fastjson-1.2.51.jar\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/remoting/target/rocketmq-remoting-4.5.1.jar\\\",\\\"/root/.m2/repository/org/slf4j/slf4j-api/1.7.7/slf4j-api-1.7.7.jar\\\"],\\\"output_dir\\\":\\\"/tmp/analyzing-5e1bb2a46035d063/client/target/classes\\\",\\\"jdk\\\":\\\"JDK1.6\\\"},{\\\"arguments\\\":[],\\\"files\\\":[\\\"/tmp/analyzing-5e1bb2a46035d063/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/store/src/main/java/org/apache/rocketmq/store/GetMessageResult.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/store/src/main/java/org/apache/rocketmq/store/MessageStore.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/store/src/main/java/org/apache/rocketmq/store/StoreUtil.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/store/src/main/java/org/apache/rocketmq/store/PutMessageResult.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/store/src/main/java/org/apache/rocketmq/store/MappedFileQueue.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/store/src/main/java/org/apache/rocketmq/store/DefaultMessageStore.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/store/src/main/java/org/apache/rocketmq/store/PutMessageSpinLock.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/store/src/main/java/org/apache/rocketmq/store/config/StorePathConfigHelper.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/store/src/main/java/org/apache/rocketmq/store/RunningFlags.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/store/src/main/java/org/apache/rocketmq/store/TransientStorePool.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/store/src/main/java/org/apache/rocketmq/store/index/IndexService.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/store/src/main/java/org/apache/rocketmq/store/PutMessageReentrantLock.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/store/src/main/java/org/apache/rocketmq/store/ConsumeQueueExt.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/store/src/main/java/org/apache/rocketmq/store/util/LibC.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/store/src/main/java/org/apache/rocketmq/store/PutMessageLock.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/store/src/main/java/org/apache/rocketmq/store/CommitLog.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/store/src/main/java/org/apache/rocketmq/store/PutMessageStatus.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/store/src/main/java/org/apache/rocketmq/store/QueryMessageResult.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/store/src/main/java/org/apache/rocketmq/store/index/IndexFile.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStats.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/store/src/main/java/org/apache/rocketmq/store/ha/HAConnection.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/store/src/main/java/org/apache/rocketmq/store/AllocateMappedFileService.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/store/src/main/java/org/apache/rocketmq/store/ha/WaitNotifyObject.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/store/src/main/java/org/apache/rocketmq/store/StoreCheckpoint.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/store/src/main/java/org/apache/rocketmq/store/index/QueryOffsetResult.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/store/src/main/java/org/apache/rocketmq/store/GetMessageStatus.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/store/src/main/java/org/apache/rocketmq/store/ConsumeQueue.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/store/src/main/java/org/apache/rocketmq/store/AppendMessageCallback.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/store/src/main/java/org/apache/rocketmq/store/config/FlushDiskType.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/store/src/main/java/org/apache/rocketmq/store/config/BrokerRole.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/store/src/main/java/org/apache/rocketmq/store/schedule/ScheduleMessageService.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/store/src/main/java/org/apache/rocketmq/store/AppendMessageResult.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/store/src/main/java/org/apache/rocketmq/store/MappedFile.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/store/src/main/java/org/apache/rocketmq/store/StoreStatsService.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/store/src/main/java/org/apache/rocketmq/store/ha/HAService.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/store/src/main/java/org/apache/rocketmq/store/MessageFilter.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/store/src/main/java/org/apache/rocketmq/store/DispatchRequest.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/store/src/main/java/org/apache/rocketmq/store/MessageExtBrokerInner.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/store/src/main/java/org/apache/rocketmq/store/config/MessageStoreConfig.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/store/src/main/java/org/apache/rocketmq/store/MessageArrivingListener.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/store/src/main/java/org/apache/rocketmq/store/ReferenceResource.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/store/src/main/java/org/apache/rocketmq/store/SelectMappedBufferResult.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/store/src/main/java/org/apache/rocketmq/store/index/IndexHeader.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/store/src/main/java/org/apache/rocketmq/store/DefaultMessageFilter.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/store/src/main/java/org/apache/rocketmq/store/CommitLogDispatcher.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/store/src/main/java/org/apache/rocketmq/store/AppendMessageStatus.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/store/src/main/java/org/apache/rocketmq/store/schedule/DelayOffsetSerializeWrapper.java\\\"],\\\"classpath\\\":[\\\"/root/.m2/repository/net/bytebuddy/byte-buddy-agent/1.6.2/byte-buddy-agent-1.6.2.jar\\\",\\\"/root/.m2/repository/io/netty/netty-tcnative-boringssl-static/1.1.33.Fork26/netty-tcnative-boringssl-static-1.1.33.Fork26.jar\\\",\\\"/root/.m2/repository/org/assertj/assertj-core/2.6.0/assertj-core-2.6.0.jar\\\",\\\"/root/.m2/repository/org/apache/commons/commons-lang3/3.4/commons-lang3-3.4.jar\\\",\\\"/root/.m2/repository/net/java/dev/jna/jna/4.2.2/jna-4.2.2.jar\\\",\\\"/root/.m2/repository/com/beust/jcommander/1.72/jcommander-1.72.jar\\\",\\\"/root/.m2/repository/ch/qos/logback/logback-classic/1.0.13/logback-classic-1.0.13.jar\\\",\\\"/root/.m2/repository/io/openmessaging/storage/dledger/0.1/dledger-0.1.jar\\\",\\\"/root/.m2/repository/org/mockito/mockito-core/2.6.3/mockito-core-2.6.3.jar\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/logging/target/rocketmq-logging-4.5.1.jar\\\",\\\"/root/.m2/repository/net/bytebuddy/byte-buddy/1.6.2/byte-buddy-1.6.2.jar\\\",\\\"/root/.m2/repository/org/objenesis/objenesis/2.5/objenesis-2.5.jar\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/common/target/rocketmq-common-4.5.1.jar\\\",\\\"/root/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar\\\",\\\"/root/.m2/repository/ch/qos/logback/logback-core/1.0.13/logback-core-1.0.13.jar\\\",\\\"/root/.m2/repository/junit/junit/4.11/junit-4.11.jar\\\",\\\"/root/.m2/repository/io/netty/netty-all/4.0.42.Final/netty-all-4.0.42.Final.jar\\\",\\\"/root/.m2/repository/com/alibaba/fastjson/1.2.51/fastjson-1.2.51.jar\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/remoting/target/rocketmq-remoting-4.5.1.jar\\\",\\\"/root/.m2/repository/org/slf4j/slf4j-api/1.7.7/slf4j-api-1.7.7.jar\\\"],\\\"output_dir\\\":\\\"/tmp/analyzing-5e1bb2a46035d063/store/target/classes\\\",\\\"jdk\\\":\\\"JDK1.8\\\"},{\\\"arguments\\\":[],\\\"files\\\":[\\\"/tmp/analyzing-5e1bb2a46035d063/srvutil/src/main/java/org/apache/rocketmq/srvutil/ShutdownHookThread.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/srvutil/src/main/java/org/apache/rocketmq/srvutil/FileWatchService.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/srvutil/src/main/java/org/apache/rocketmq/srvutil/ServerUtil.java\\\"],\\\"classpath\\\":[\\\"/root/.m2/repository/net/bytebuddy/byte-buddy-agent/1.6.2/byte-buddy-agent-1.6.2.jar\\\",\\\"/root/.m2/repository/io/netty/netty-tcnative-boringssl-static/1.1.33.Fork26/netty-tcnative-boringssl-static-1.1.33.Fork26.jar\\\",\\\"/root/.m2/repository/org/assertj/assertj-core/2.6.0/assertj-core-2.6.0.jar\\\",\\\"/root/.m2/repository/org/apache/commons/commons-lang3/3.4/commons-lang3-3.4.jar\\\",\\\"/root/.m2/repository/com/google/guava/guava/19.0/guava-19.0.jar\\\",\\\"/root/.m2/repository/org/mockito/mockito-core/2.6.3/mockito-core-2.6.3.jar\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/logging/target/rocketmq-logging-4.5.1.jar\\\",\\\"/root/.m2/repository/net/bytebuddy/byte-buddy/1.6.2/byte-buddy-1.6.2.jar\\\",\\\"/root/.m2/repository/org/objenesis/objenesis/2.5/objenesis-2.5.jar\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/common/target/rocketmq-common-4.5.1.jar\\\",\\\"/root/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar\\\",\\\"/root/.m2/repository/commons-cli/commons-cli/1.2/commons-cli-1.2.jar\\\",\\\"/root/.m2/repository/junit/junit/4.11/junit-4.11.jar\\\",\\\"/root/.m2/repository/io/netty/netty-all/4.0.42.Final/netty-all-4.0.42.Final.jar\\\",\\\"/root/.m2/repository/com/alibaba/fastjson/1.2.51/fastjson-1.2.51.jar\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/remoting/target/rocketmq-remoting-4.5.1.jar\\\"],\\\"output_dir\\\":\\\"/tmp/analyzing-5e1bb2a46035d063/srvutil/target/classes\\\",\\\"jdk\\\":\\\"JDK1.8\\\"},{\\\"arguments\\\":[],\\\"files\\\":[\\\"/tmp/analyzing-5e1bb2a46035d063/filter/src/main/java/org/apache/rocketmq/filter/expression/PropertyExpression.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/filter/src/main/java/org/apache/rocketmq/filter/parser/SelectorParserConstants.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/filter/src/main/java/org/apache/rocketmq/filter/expression/Expression.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/filter/src/main/java/org/apache/rocketmq/filter/expression/BooleanExpression.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/filter/src/main/java/org/apache/rocketmq/filter/FilterSpi.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/filter/src/main/java/org/apache/rocketmq/filter/expression/EvaluationContext.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/filter/src/main/java/org/apache/rocketmq/filter/expression/UnaryExpression.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/filter/src/main/java/org/apache/rocketmq/filter/parser/ParseException.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/filter/src/main/java/org/apache/rocketmq/filter/expression/NowExpression.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/filter/src/main/java/org/apache/rocketmq/filter/parser/TokenMgrError.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/filter/src/main/java/org/apache/rocketmq/filter/util/BloomFilter.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/filter/src/main/java/org/apache/rocketmq/filter/expression/MQFilterException.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/filter/src/main/java/org/apache/rocketmq/filter/parser/SelectorParserTokenManager.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/filter/src/main/java/org/apache/rocketmq/filter/expression/LogicExpression.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/filter/src/main/java/org/apache/rocketmq/filter/util/BloomFilterData.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/filter/src/main/java/org/apache/rocketmq/filter/parser/SimpleCharStream.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/filter/src/main/java/org/apache/rocketmq/filter/SqlFilter.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/filter/src/main/java/org/apache/rocketmq/filter/FilterFactory.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/filter/src/main/java/org/apache/rocketmq/filter/parser/SelectorParser.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/filter/src/main/java/org/apache/rocketmq/filter/expression/ComparisonExpression.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/filter/src/main/java/org/apache/rocketmq/filter/expression/ConstantExpression.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/filter/src/main/java/org/apache/rocketmq/filter/expression/EmptyEvaluationContext.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/filter/src/main/java/org/apache/rocketmq/filter/constant/UnaryType.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/filter/src/main/java/org/apache/rocketmq/filter/util/BitsArray.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/filter/src/main/java/org/apache/rocketmq/filter/expression/BinaryExpression.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/filter/src/main/java/org/apache/rocketmq/filter/parser/Token.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/filter/src/main/java/org/apache/rocketmq/filter/expression/UnaryInExpression.java\\\"],\\\"classpath\\\":[\\\"/tmp/analyzing-5e1bb2a46035d063/srvutil/target/rocketmq-srvutil-4.5.1.jar\\\",\\\"/root/.m2/repository/net/bytebuddy/byte-buddy-agent/1.6.2/byte-buddy-agent-1.6.2.jar\\\",\\\"/root/.m2/repository/io/netty/netty-tcnative-boringssl-static/1.1.33.Fork26/netty-tcnative-boringssl-static-1.1.33.Fork26.jar\\\",\\\"/root/.m2/repository/org/assertj/assertj-core/2.6.0/assertj-core-2.6.0.jar\\\",\\\"/root/.m2/repository/org/apache/commons/commons-lang3/3.4/commons-lang3-3.4.jar\\\",\\\"/root/.m2/repository/com/google/guava/guava/19.0/guava-19.0.jar\\\",\\\"/root/.m2/repository/org/mockito/mockito-core/2.6.3/mockito-core-2.6.3.jar\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/logging/target/rocketmq-logging-4.5.1.jar\\\",\\\"/root/.m2/repository/net/bytebuddy/byte-buddy/1.6.2/byte-buddy-1.6.2.jar\\\",\\\"/root/.m2/repository/org/objenesis/objenesis/2.5/objenesis-2.5.jar\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/common/target/rocketmq-common-4.5.1.jar\\\",\\\"/root/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar\\\",\\\"/root/.m2/repository/commons-cli/commons-cli/1.2/commons-cli-1.2.jar\\\",\\\"/root/.m2/repository/junit/junit/4.11/junit-4.11.jar\\\",\\\"/root/.m2/repository/io/netty/netty-all/4.0.42.Final/netty-all-4.0.42.Final.jar\\\",\\\"/root/.m2/repository/com/alibaba/fastjson/1.2.51/fastjson-1.2.51.jar\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/remoting/target/rocketmq-remoting-4.5.1.jar\\\"],\\\"output_dir\\\":\\\"/tmp/analyzing-5e1bb2a46035d063/filter/target/classes\\\",\\\"jdk\\\":\\\"JDK1.8\\\"},{\\\"arguments\\\":[],\\\"files\\\":[\\\"/tmp/analyzing-5e1bb2a46035d063/acl/src/main/java/org/apache/rocketmq/acl/plain/PlainAccessResource.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/acl/src/main/java/org/apache/rocketmq/acl/common/SessionCredentials.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/acl/src/main/java/org/apache/rocketmq/acl/common/SigningAlgorithm.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/acl/src/main/java/org/apache/rocketmq/acl/plain/RemoteAddressStrategy.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/acl/src/main/java/org/apache/rocketmq/acl/common/AclException.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/acl/src/main/java/org/apache/rocketmq/acl/common/AclSigner.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/acl/src/main/java/org/apache/rocketmq/acl/AccessValidator.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/acl/src/main/java/org/apache/rocketmq/acl/common/Permission.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/acl/src/main/java/org/apache/rocketmq/acl/plain/PlainPermissionLoader.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/acl/src/main/java/org/apache/rocketmq/acl/AccessResource.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/acl/src/main/java/org/apache/rocketmq/acl/plain/PlainAccessValidator.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/acl/src/main/java/org/apache/rocketmq/acl/plain/RemoteAddressStrategyFactory.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/acl/src/main/java/org/apache/rocketmq/acl/common/AclUtils.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/acl/src/main/java/org/apache/rocketmq/acl/common/AclClientRPCHook.java\\\"],\\\"classpath\\\":[\\\"/tmp/analyzing-5e1bb2a46035d063/srvutil/target/rocketmq-srvutil-4.5.1.jar\\\",\\\"/root/.m2/repository/net/bytebuddy/byte-buddy-agent/1.6.2/byte-buddy-agent-1.6.2.jar\\\",\\\"/root/.m2/repository/io/netty/netty-tcnative-boringssl-static/1.1.33.Fork26/netty-tcnative-boringssl-static-1.1.33.Fork26.jar\\\",\\\"/root/.m2/repository/org/assertj/assertj-core/2.6.0/assertj-core-2.6.0.jar\\\",\\\"/root/.m2/repository/org/apache/commons/commons-lang3/3.4/commons-lang3-3.4.jar\\\",\\\"/root/.m2/repository/com/google/guava/guava/19.0/guava-19.0.jar\\\",\\\"/root/.m2/repository/ch/qos/logback/logback-classic/1.0.13/logback-classic-1.0.13.jar\\\",\\\"/root/.m2/repository/org/mockito/mockito-core/2.6.3/mockito-core-2.6.3.jar\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/logging/target/rocketmq-logging-4.5.1.jar\\\",\\\"/root/.m2/repository/net/bytebuddy/byte-buddy/1.6.2/byte-buddy-1.6.2.jar\\\",\\\"/root/.m2/repository/org/objenesis/objenesis/2.5/objenesis-2.5.jar\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/common/target/rocketmq-common-4.5.1.jar\\\",\\\"/root/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar\\\",\\\"/root/.m2/repository/org/yaml/snakeyaml/1.19/snakeyaml-1.19.jar\\\",\\\"/root/.m2/repository/commons-codec/commons-codec/1.9/commons-codec-1.9.jar\\\",\\\"/root/.m2/repository/ch/qos/logback/logback-core/1.0.13/logback-core-1.0.13.jar\\\",\\\"/root/.m2/repository/commons-cli/commons-cli/1.2/commons-cli-1.2.jar\\\",\\\"/root/.m2/repository/junit/junit/4.11/junit-4.11.jar\\\",\\\"/root/.m2/repository/io/netty/netty-all/4.0.42.Final/netty-all-4.0.42.Final.jar\\\",\\\"/root/.m2/repository/com/alibaba/fastjson/1.2.51/fastjson-1.2.51.jar\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/remoting/target/rocketmq-remoting-4.5.1.jar\\\",\\\"/root/.m2/repository/org/slf4j/slf4j-api/1.7.7/slf4j-api-1.7.7.jar\\\"],\\\"output_dir\\\":\\\"/tmp/analyzing-5e1bb2a46035d063/acl/target/classes\\\",\\\"jdk\\\":\\\"JDK1.8\\\"},{\\\"arguments\\\":[],\\\"files\\\":[\\\"/tmp/analyzing-5e1bb2a46035d063/broker/src/main/java/org/apache/rocketmq/broker/client/ClientChannelInfo.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/broker/src/main/java/org/apache/rocketmq/broker/transaction/OperationResult.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/broker/src/main/java/org/apache/rocketmq/broker/mqtrace/SendMessageHook.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/broker/src/main/java/org/apache/rocketmq/broker/subscription/SubscriptionGroupManager.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/broker/src/main/java/org/apache/rocketmq/broker/client/ConsumerManager.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/broker/src/main/java/org/apache/rocketmq/broker/processor/ConsumerManageProcessor.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/broker/src/main/java/org/apache/rocketmq/broker/filtersrv/FilterServerManager.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/broker/src/main/java/org/apache/rocketmq/broker/client/ConsumerGroupInfo.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/broker/src/main/java/org/apache/rocketmq/broker/BrokerStartup.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/broker/src/main/java/org/apache/rocketmq/broker/processor/SendMessageProcessor.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/broker/src/main/java/org/apache/rocketmq/broker/BrokerPathConfigHelper.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/broker/src/main/java/org/apache/rocketmq/broker/slave/SlaveSynchronize.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/broker/src/main/java/org/apache/rocketmq/broker/client/ClientHousekeepingService.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/broker/src/main/java/org/apache/rocketmq/broker/client/net/Broker2Client.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/broker/src/main/java/org/apache/rocketmq/broker/transaction/queue/GetResult.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/broker/src/main/java/org/apache/rocketmq/broker/transaction/queue/TransactionalMessageUtil.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/broker/src/main/java/org/apache/rocketmq/broker/client/ConsumerGroupEvent.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/broker/src/main/java/org/apache/rocketmq/broker/mqtrace/ConsumeMessageHook.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/broker/src/main/java/org/apache/rocketmq/broker/processor/EndTransactionProcessor.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/broker/src/main/java/org/apache/rocketmq/broker/client/ProducerManager.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/broker/src/main/java/org/apache/rocketmq/broker/filter/ExpressionMessageFilter.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/broker/src/main/java/org/apache/rocketmq/broker/transaction/jdbc/JDBCTransactionStore.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/broker/src/main/java/org/apache/rocketmq/broker/processor/QueryMessageProcessor.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/broker/src/main/java/org/apache/rocketmq/broker/plugin/MessageStoreFactory.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/broker/src/main/java/org/apache/rocketmq/broker/mqtrace/ConsumeMessageContext.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/broker/src/main/java/org/apache/rocketmq/broker/processor/PullMessageProcessor.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/broker/src/main/java/org/apache/rocketmq/broker/offset/ConsumerOffsetManager.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/broker/src/main/java/org/apache/rocketmq/broker/client/DefaultConsumerIdsChangeListener.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/broker/src/main/java/org/apache/rocketmq/broker/longpolling/PullRequest.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/broker/src/main/java/org/apache/rocketmq/broker/transaction/jdbc/JDBCTransactionStoreConfig.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/broker/src/main/java/org/apache/rocketmq/broker/longpolling/NotifyMessageArrivingListener.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/broker/src/main/java/org/apache/rocketmq/broker/transaction/queue/DefaultTransactionalMessageCheckListener.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/broker/src/main/java/org/apache/rocketmq/broker/plugin/MessageStorePluginContext.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/broker/src/main/java/org/apache/rocketmq/broker/client/rebalance/RebalanceLockManager.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/broker/src/main/java/org/apache/rocketmq/broker/mqtrace/SendMessageContext.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/broker/src/main/java/org/apache/rocketmq/broker/processor/AbstractSendMessageProcessor.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/broker/src/main/java/org/apache/rocketmq/broker/latency/BrokerFastFailure.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/broker/src/main/java/org/apache/rocketmq/broker/dledger/DLedgerRoleChangeHandler.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/broker/src/main/java/org/apache/rocketmq/broker/client/ConsumerIdsChangeListener.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/broker/src/main/java/org/apache/rocketmq/broker/topic/TopicConfigManager.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/broker/src/main/java/org/apache/rocketmq/broker/transaction/TransactionalMessageCheckService.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/broker/src/main/java/org/apache/rocketmq/broker/filter/ConsumerFilterManager.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/broker/src/main/java/org/apache/rocketmq/broker/filter/CommitLogDispatcherCalcBitMap.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/broker/src/main/java/org/apache/rocketmq/broker/BrokerController.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/broker/src/main/java/org/apache/rocketmq/broker/latency/FutureTaskExt.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/broker/src/main/java/org/apache/rocketmq/broker/pagecache/QueryMessageTransfer.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/broker/src/main/java/org/apache/rocketmq/broker/latency/BrokerFixedThreadPoolExecutor.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/broker/src/main/java/org/apache/rocketmq/broker/filtersrv/FilterServerUtil.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/broker/src/main/java/org/apache/rocketmq/broker/longpolling/ManyPullRequest.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/broker/src/main/java/org/apache/rocketmq/broker/util/ServiceProvider.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/broker/src/main/java/org/apache/rocketmq/broker/longpolling/PullRequestHoldService.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/broker/src/main/java/org/apache/rocketmq/broker/processor/ClientManageProcessor.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/broker/src/main/java/org/apache/rocketmq/broker/transaction/TransactionRecord.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/broker/src/main/java/org/apache/rocketmq/broker/transaction/queue/TransactionalMessageServiceImpl.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/broker/src/main/java/org/apache/rocketmq/broker/out/BrokerOuterAPI.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/broker/src/main/java/org/apache/rocketmq/broker/transaction/AbstractTransactionalMessageCheckListener.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/broker/src/main/java/org/apache/rocketmq/broker/processor/ForwardRequestProcessor.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/broker/src/main/java/org/apache/rocketmq/broker/filter/MessageEvaluationContext.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/broker/src/main/java/org/apache/rocketmq/broker/filter/ExpressionForRetryMessageFilter.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/broker/src/main/java/org/apache/rocketmq/broker/pagecache/ManyMessageTransfer.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/broker/src/main/java/org/apache/rocketmq/broker/transaction/queue/TransactionalMessageBridge.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/broker/src/main/java/org/apache/rocketmq/broker/pagecache/OneMessageTransfer.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/broker/src/main/java/org/apache/rocketmq/broker/plugin/AbstractPluginMessageStore.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/broker/src/main/java/org/apache/rocketmq/broker/util/PositiveAtomicCounter.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/broker/src/main/java/org/apache/rocketmq/broker/transaction/TransactionalMessageService.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/broker/src/main/java/org/apache/rocketmq/broker/filter/ConsumerFilterData.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/broker/src/main/java/org/apache/rocketmq/broker/transaction/TransactionStore.java\\\"],\\\"classpath\\\":[\\\"/root/.m2/repository/net/java/dev/jna/jna/4.2.2/jna-4.2.2.jar\\\",\\\"/root/.m2/repository/io/openmessaging/storage/dledger/0.1/dledger-0.1.jar\\\",\\\"/root/.m2/repository/org/mockito/mockito-core/2.6.3/mockito-core-2.6.3.jar\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/common/target/rocketmq-common-4.5.1.jar\\\",\\\"/root/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar\\\",\\\"/root/.m2/repository/ch/qos/logback/logback-core/1.0.13/logback-core-1.0.13.jar\\\",\\\"/root/.m2/repository/io/netty/netty-all/4.0.42.Final/netty-all-4.0.42.Final.jar\\\",\\\"/root/.m2/repository/org/slf4j/slf4j-api/1.7.7/slf4j-api-1.7.7.jar\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/srvutil/target/rocketmq-srvutil-4.5.1.jar\\\",\\\"/root/.m2/repository/net/bytebuddy/byte-buddy-agent/1.6.2/byte-buddy-agent-1.6.2.jar\\\",\\\"/root/.m2/repository/io/netty/netty-tcnative-boringssl-static/1.1.33.Fork26/netty-tcnative-boringssl-static-1.1.33.Fork26.jar\\\",\\\"/root/.m2/repository/org/assertj/assertj-core/2.6.0/assertj-core-2.6.0.jar\\\",\\\"/root/.m2/repository/org/apache/commons/commons-lang3/3.4/commons-lang3-3.4.jar\\\",\\\"/root/.m2/repository/com/google/guava/guava/19.0/guava-19.0.jar\\\",\\\"/root/.m2/repository/com/beust/jcommander/1.72/jcommander-1.72.jar\\\",\\\"/root/.m2/repository/ch/qos/logback/logback-classic/1.0.13/logback-classic-1.0.13.jar\\\",\\\"/root/.m2/repository/org/javassist/javassist/3.20.0-GA/javassist-3.20.0-GA.jar\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/logging/target/rocketmq-logging-4.5.1.jar\\\",\\\"/root/.m2/repository/net/bytebuddy/byte-buddy/1.6.2/byte-buddy-1.6.2.jar\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/client/target/rocketmq-client-4.5.1.jar\\\",\\\"/root/.m2/repository/org/objenesis/objenesis/2.5/objenesis-2.5.jar\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/acl/target/rocketmq-acl-4.5.1.jar\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/filter/target/rocketmq-filter-4.5.1.jar\\\",\\\"/root/.m2/repository/org/yaml/snakeyaml/1.19/snakeyaml-1.19.jar\\\",\\\"/root/.m2/repository/commons-codec/commons-codec/1.9/commons-codec-1.9.jar\\\",\\\"/root/.m2/repository/commons-cli/commons-cli/1.2/commons-cli-1.2.jar\\\",\\\"/root/.m2/repository/junit/junit/4.11/junit-4.11.jar\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/store/target/rocketmq-store-4.5.1.jar\\\",\\\"/root/.m2/repository/com/alibaba/fastjson/1.2.51/fastjson-1.2.51.jar\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/remoting/target/rocketmq-remoting-4.5.1.jar\\\"],\\\"output_dir\\\":\\\"/tmp/analyzing-5e1bb2a46035d063/broker/target/classes\\\",\\\"jdk\\\":\\\"JDK1.8\\\"},{\\\"arguments\\\":[],\\\"files\\\":[\\\"/tmp/analyzing-5e1bb2a46035d063/tools/src/main/java/org/apache/rocketmq/tools/command/consumer/ConsumerStatusSubCommand.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/tools/src/main/java/org/apache/rocketmq/tools/monitor/MonitorService.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/tools/src/main/java/org/apache/rocketmq/tools/command/consumer/StartMonitoringSubCommand.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/tools/src/main/java/org/apache/rocketmq/tools/command/message/QueryMsgByUniqueKeySubCommand.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/tools/src/main/java/org/apache/rocketmq/tools/command/topic/UpdateTopicPermSubCommand.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/tools/src/main/java/org/apache/rocketmq/tools/command/connection/ConsumerConnectionSubCommand.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/tools/src/main/java/org/apache/rocketmq/tools/command/broker/CleanExpiredCQSubCommand.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/tools/src/main/java/org/apache/rocketmq/tools/command/broker/GetBrokerConfigCommand.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/tools/src/main/java/org/apache/rocketmq/tools/monitor/MonitorListener.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/tools/src/main/java/org/apache/rocketmq/tools/command/offset/CloneGroupOffsetCommand.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/tools/src/main/java/org/apache/rocketmq/tools/command/topic/RebalanceResult.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/tools/src/main/java/org/apache/rocketmq/tools/command/cluster/CLusterSendMsgRTCommand.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/tools/src/main/java/org/apache/rocketmq/tools/command/SubCommandException.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/tools/src/main/java/org/apache/rocketmq/tools/command/message/ConsumeMessageCommand.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/tools/src/main/java/org/apache/rocketmq/tools/admin/MQAdminExt.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/tools/src/main/java/org/apache/rocketmq/tools/admin/api/MessageTrack.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/tools/src/main/java/org/apache/rocketmq/tools/command/namesrv/WipeWritePermSubCommand.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/tools/src/main/java/org/apache/rocketmq/tools/monitor/FailedMsgs.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/tools/src/main/java/org/apache/rocketmq/tools/command/broker/BrokerStatusSubCommand.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/tools/src/main/java/org/apache/rocketmq/tools/command/offset/ResetOffsetByTimeOldCommand.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/tools/src/main/java/org/apache/rocketmq/tools/command/topic/TopicStatusSubCommand.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/tools/src/main/java/org/apache/rocketmq/tools/command/topic/UpdateOrderConfCommand.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/tools/src/main/java/org/apache/rocketmq/tools/command/consumer/UpdateSubGroupSubCommand.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/tools/src/main/java/org/apache/rocketmq/tools/command/namesrv/GetNamesrvConfigCommand.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/tools/src/main/java/org/apache/rocketmq/tools/command/topic/DeleteTopicSubCommand.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/tools/src/main/java/org/apache/rocketmq/tools/monitor/DeleteMsgsEvent.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/tools/src/main/java/org/apache/rocketmq/tools/command/topic/TopicListSubCommand.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/tools/src/main/java/org/apache/rocketmq/tools/command/consumer/ConsumerProgressSubCommand.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/tools/src/main/java/org/apache/rocketmq/tools/command/message/CheckMsgSendRTCommand.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/tools/src/main/java/org/apache/rocketmq/tools/command/namesrv/DeleteKvConfigCommand.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/tools/src/main/java/org/apache/rocketmq/tools/command/broker/BrokerConsumeStatsSubCommad.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/tools/src/main/java/org/apache/rocketmq/tools/monitor/DefaultMonitorListener.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/tools/src/main/java/org/apache/rocketmq/tools/command/topic/TopicRouteSubCommand.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/tools/src/main/java/org/apache/rocketmq/tools/command/message/QueryMsgByKeySubCommand.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/tools/src/main/java/org/apache/rocketmq/tools/admin/DefaultMQAdminExtImpl.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/tools/src/main/java/org/apache/rocketmq/tools/command/cluster/ClusterListSubCommand.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/tools/src/main/java/org/apache/rocketmq/tools/admin/api/TrackType.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/tools/src/main/java/org/apache/rocketmq/tools/command/topic/TopicClusterSubCommand.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/tools/src/main/java/org/apache/rocketmq/tools/command/topic/AllocateMQSubCommand.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/tools/src/main/java/org/apache/rocketmq/tools/command/connection/ProducerConnectionSubCommand.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/tools/src/main/java/org/apache/rocketmq/tools/command/broker/CleanUnusedTopicCommand.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/tools/src/main/java/org/apache/rocketmq/tools/command/namesrv/UpdateNamesrvConfigCommand.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/tools/src/main/java/org/apache/rocketmq/tools/admin/DefaultMQAdminExt.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/tools/src/main/java/org/apache/rocketmq/tools/command/message/SendMessageCommand.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/tools/src/main/java/org/apache/rocketmq/tools/monitor/MonitorConfig.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/tools/src/main/java/org/apache/rocketmq/tools/command/stats/StatsAllSubCommand.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/tools/src/main/java/org/apache/rocketmq/tools/command/offset/GetConsumerStatusCommand.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/tools/src/main/java/org/apache/rocketmq/tools/command/MQAdminStartup.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/tools/src/main/java/org/apache/rocketmq/tools/command/CommandUtil.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/tools/src/main/java/org/apache/rocketmq/tools/command/message/PrintMessageSubCommand.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/tools/src/main/java/org/apache/rocketmq/tools/command/message/PrintMessageByQueueCommand.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/tools/src/main/java/org/apache/rocketmq/tools/command/broker/UpdateBrokerConfigSubCommand.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/tools/src/main/java/org/apache/rocketmq/tools/command/message/DecodeMessageIdCommond.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/tools/src/main/java/org/apache/rocketmq/tools/command/queue/QueryConsumeQueueCommand.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/tools/src/main/java/org/apache/rocketmq/tools/command/broker/SendMsgStatusCommand.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/tools/src/main/java/org/apache/rocketmq/tools/command/consumer/DeleteSubscriptionGroupCommand.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/tools/src/main/java/org/apache/rocketmq/tools/command/message/QueryMsgByIdSubCommand.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/tools/src/main/java/org/apache/rocketmq/tools/command/consumer/ConsumerSubCommand.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/tools/src/main/java/org/apache/rocketmq/tools/monitor/UndoneMsgs.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/tools/src/main/java/org/apache/rocketmq/tools/command/SubCommand.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/tools/src/main/java/org/apache/rocketmq/tools/command/topic/UpdateTopicSubCommand.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/tools/src/main/java/org/apache/rocketmq/tools/command/namesrv/UpdateKvConfigCommand.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/tools/src/main/java/org/apache/rocketmq/tools/command/offset/ResetOffsetByTimeCommand.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/tools/src/main/java/org/apache/rocketmq/tools/command/message/QueryMsgByOffsetSubCommand.java\\\"],\\\"classpath\\\":[\\\"/root/.m2/repository/net/java/dev/jna/jna/4.2.2/jna-4.2.2.jar\\\",\\\"/root/.m2/repository/io/openmessaging/storage/dledger/0.1/dledger-0.1.jar\\\",\\\"/root/.m2/repository/org/mockito/mockito-core/2.6.3/mockito-core-2.6.3.jar\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/common/target/rocketmq-common-4.5.1.jar\\\",\\\"/root/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar\\\",\\\"/root/.m2/repository/ch/qos/logback/logback-core/1.0.13/logback-core-1.0.13.jar\\\",\\\"/root/.m2/repository/io/netty/netty-all/4.0.42.Final/netty-all-4.0.42.Final.jar\\\",\\\"/root/.m2/repository/org/slf4j/slf4j-api/1.7.7/slf4j-api-1.7.7.jar\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/srvutil/target/rocketmq-srvutil-4.5.1.jar\\\",\\\"/root/.m2/repository/net/bytebuddy/byte-buddy-agent/1.6.2/byte-buddy-agent-1.6.2.jar\\\",\\\"/root/.m2/repository/io/netty/netty-tcnative-boringssl-static/1.1.33.Fork26/netty-tcnative-boringssl-static-1.1.33.Fork26.jar\\\",\\\"/root/.m2/repository/org/assertj/assertj-core/2.6.0/assertj-core-2.6.0.jar\\\",\\\"/root/.m2/repository/org/apache/commons/commons-lang3/3.4/commons-lang3-3.4.jar\\\",\\\"/root/.m2/repository/com/google/guava/guava/19.0/guava-19.0.jar\\\",\\\"/root/.m2/repository/com/beust/jcommander/1.72/jcommander-1.72.jar\\\",\\\"/root/.m2/repository/ch/qos/logback/logback-classic/1.0.13/logback-classic-1.0.13.jar\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/logging/target/rocketmq-logging-4.5.1.jar\\\",\\\"/root/.m2/repository/net/bytebuddy/byte-buddy/1.6.2/byte-buddy-1.6.2.jar\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/client/target/rocketmq-client-4.5.1.jar\\\",\\\"/root/.m2/repository/org/objenesis/objenesis/2.5/objenesis-2.5.jar\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/acl/target/rocketmq-acl-4.5.1.jar\\\",\\\"/root/.m2/repository/commons-codec/commons-codec/1.9/commons-codec-1.9.jar\\\",\\\"/root/.m2/repository/org/yaml/snakeyaml/1.19/snakeyaml-1.19.jar\\\",\\\"/root/.m2/repository/commons-cli/commons-cli/1.2/commons-cli-1.2.jar\\\",\\\"/root/.m2/repository/junit/junit/4.11/junit-4.11.jar\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/store/target/rocketmq-store-4.5.1.jar\\\",\\\"/root/.m2/repository/com/alibaba/fastjson/1.2.51/fastjson-1.2.51.jar\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/remoting/target/rocketmq-remoting-4.5.1.jar\\\"],\\\"output_dir\\\":\\\"/tmp/analyzing-5e1bb2a46035d063/tools/target/classes\\\",\\\"jdk\\\":\\\"JDK1.8\\\"},{\\\"arguments\\\":[],\\\"files\\\":[\\\"/tmp/analyzing-5e1bb2a46035d063/namesrv/src/main/java/org/apache/rocketmq/namesrv/processor/DefaultRequestProcessor.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/namesrv/src/main/java/org/apache/rocketmq/namesrv/NamesrvStartup.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/namesrv/src/main/java/org/apache/rocketmq/namesrv/routeinfo/BrokerHousekeepingService.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/namesrv/src/main/java/org/apache/rocketmq/namesrv/processor/ClusterTestRequestProcessor.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/namesrv/src/main/java/org/apache/rocketmq/namesrv/routeinfo/RouteInfoManager.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/namesrv/src/main/java/org/apache/rocketmq/namesrv/NamesrvController.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/namesrv/src/main/java/org/apache/rocketmq/namesrv/kvconfig/KVConfigManager.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/namesrv/src/main/java/org/apache/rocketmq/namesrv/kvconfig/KVConfigSerializeWrapper.java\\\"],\\\"classpath\\\":[\\\"/root/.m2/repository/net/java/dev/jna/jna/4.2.2/jna-4.2.2.jar\\\",\\\"/root/.m2/repository/io/openmessaging/storage/dledger/0.1/dledger-0.1.jar\\\",\\\"/root/.m2/repository/org/mockito/mockito-core/2.6.3/mockito-core-2.6.3.jar\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/common/target/rocketmq-common-4.5.1.jar\\\",\\\"/root/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar\\\",\\\"/root/.m2/repository/ch/qos/logback/logback-core/1.0.13/logback-core-1.0.13.jar\\\",\\\"/root/.m2/repository/io/netty/netty-all/4.0.42.Final/netty-all-4.0.42.Final.jar\\\",\\\"/root/.m2/repository/org/slf4j/slf4j-api/1.7.7/slf4j-api-1.7.7.jar\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/srvutil/target/rocketmq-srvutil-4.5.1.jar\\\",\\\"/root/.m2/repository/net/bytebuddy/byte-buddy-agent/1.6.2/byte-buddy-agent-1.6.2.jar\\\",\\\"/root/.m2/repository/io/netty/netty-tcnative-boringssl-static/1.1.33.Fork26/netty-tcnative-boringssl-static-1.1.33.Fork26.jar\\\",\\\"/root/.m2/repository/org/assertj/assertj-core/2.6.0/assertj-core-2.6.0.jar\\\",\\\"/root/.m2/repository/org/apache/commons/commons-lang3/3.4/commons-lang3-3.4.jar\\\",\\\"/root/.m2/repository/com/google/guava/guava/19.0/guava-19.0.jar\\\",\\\"/root/.m2/repository/com/beust/jcommander/1.72/jcommander-1.72.jar\\\",\\\"/root/.m2/repository/ch/qos/logback/logback-classic/1.0.13/logback-classic-1.0.13.jar\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/logging/target/rocketmq-logging-4.5.1.jar\\\",\\\"/root/.m2/repository/net/bytebuddy/byte-buddy/1.6.2/byte-buddy-1.6.2.jar\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/client/target/rocketmq-client-4.5.1.jar\\\",\\\"/root/.m2/repository/org/objenesis/objenesis/2.5/objenesis-2.5.jar\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/tools/target/rocketmq-tools-4.5.1.jar\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/acl/target/rocketmq-acl-4.5.1.jar\\\",\\\"/root/.m2/repository/commons-codec/commons-codec/1.9/commons-codec-1.9.jar\\\",\\\"/root/.m2/repository/org/yaml/snakeyaml/1.19/snakeyaml-1.19.jar\\\",\\\"/root/.m2/repository/commons-cli/commons-cli/1.2/commons-cli-1.2.jar\\\",\\\"/root/.m2/repository/junit/junit/4.11/junit-4.11.jar\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/store/target/rocketmq-store-4.5.1.jar\\\",\\\"/root/.m2/repository/com/alibaba/fastjson/1.2.51/fastjson-1.2.51.jar\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/remoting/target/rocketmq-remoting-4.5.1.jar\\\"],\\\"output_dir\\\":\\\"/tmp/analyzing-5e1bb2a46035d063/namesrv/target/classes\\\",\\\"jdk\\\":\\\"JDK1.8\\\"},{\\\"arguments\\\":[],\\\"files\\\":[\\\"/tmp/analyzing-5e1bb2a46035d063/logappender/src/main/java/org/apache/rocketmq/logappender/log4j2/RocketmqLog4j2Appender.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/logappender/src/main/java/org/apache/rocketmq/logappender/log4j/RocketmqLog4jAppender.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/logappender/src/main/java/org/apache/rocketmq/logappender/logback/RocketmqLogbackAppender.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/logappender/src/main/java/org/apache/rocketmq/logappender/common/ProducerInstance.java\\\"],\\\"classpath\\\":[\\\"/root/.m2/repository/net/java/dev/jna/jna/4.2.2/jna-4.2.2.jar\\\",\\\"/root/.m2/repository/io/openmessaging/storage/dledger/0.1/dledger-0.1.jar\\\",\\\"/root/.m2/repository/org/mockito/mockito-core/2.6.3/mockito-core-2.6.3.jar\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/namesrv/target/rocketmq-namesrv-4.5.1.jar\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/common/target/rocketmq-common-4.5.1.jar\\\",\\\"/root/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar\\\",\\\"/root/.m2/repository/ch/qos/logback/logback-core/1.0.13/logback-core-1.0.13.jar\\\",\\\"/root/.m2/repository/io/netty/netty-all/4.0.42.Final/netty-all-4.0.42.Final.jar\\\",\\\"/root/.m2/repository/org/slf4j/slf4j-api/1.7.7/slf4j-api-1.7.7.jar\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/srvutil/target/rocketmq-srvutil-4.5.1.jar\\\",\\\"/root/.m2/repository/net/bytebuddy/byte-buddy-agent/1.6.2/byte-buddy-agent-1.6.2.jar\\\",\\\"/root/.m2/repository/io/netty/netty-tcnative-boringssl-static/1.1.33.Fork26/netty-tcnative-boringssl-static-1.1.33.Fork26.jar\\\",\\\"/root/.m2/repository/org/assertj/assertj-core/2.6.0/assertj-core-2.6.0.jar\\\",\\\"/root/.m2/repository/org/apache/commons/commons-lang3/3.4/commons-lang3-3.4.jar\\\",\\\"/root/.m2/repository/com/google/guava/guava/19.0/guava-19.0.jar\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/broker/target/rocketmq-broker-4.5.1.jar\\\",\\\"/root/.m2/repository/log4j/log4j/1.2.17/log4j-1.2.17.jar\\\",\\\"/root/.m2/repository/ch/qos/logback/logback-classic/1.0.13/logback-classic-1.0.13.jar\\\",\\\"/root/.m2/repository/com/beust/jcommander/1.72/jcommander-1.72.jar\\\",\\\"/root/.m2/repository/org/javassist/javassist/3.20.0-GA/javassist-3.20.0-GA.jar\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/logging/target/rocketmq-logging-4.5.1.jar\\\",\\\"/root/.m2/repository/net/bytebuddy/byte-buddy/1.6.2/byte-buddy-1.6.2.jar\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/client/target/rocketmq-client-4.5.1.jar\\\",\\\"/root/.m2/repository/org/objenesis/objenesis/2.5/objenesis-2.5.jar\\\",\\\"/root/.m2/repository/org/apache/logging/log4j/log4j-api/2.7/log4j-api-2.7.jar\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/tools/target/rocketmq-tools-4.5.1.jar\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/acl/target/rocketmq-acl-4.5.1.jar\\\",\\\"/root/.m2/repository/org/apache/logging/log4j/log4j-core/2.7/log4j-core-2.7.jar\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/filter/target/rocketmq-filter-4.5.1.jar\\\",\\\"/root/.m2/repository/org/yaml/snakeyaml/1.19/snakeyaml-1.19.jar\\\",\\\"/root/.m2/repository/commons-codec/commons-codec/1.9/commons-codec-1.9.jar\\\",\\\"/root/.m2/repository/commons-cli/commons-cli/1.2/commons-cli-1.2.jar\\\",\\\"/root/.m2/repository/junit/junit/4.11/junit-4.11.jar\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/store/target/rocketmq-store-4.5.1.jar\\\",\\\"/root/.m2/repository/com/alibaba/fastjson/1.2.51/fastjson-1.2.51.jar\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/remoting/target/rocketmq-remoting-4.5.1.jar\\\"],\\\"output_dir\\\":\\\"/tmp/analyzing-5e1bb2a46035d063/logappender/target/classes\\\",\\\"jdk\\\":\\\"JDK1.8\\\"},{\\\"arguments\\\":[],\\\"files\\\":[\\\"/tmp/analyzing-5e1bb2a46035d063/openmessaging/src/main/java/io/openmessaging/rocketmq/MessagingAccessPointImpl.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/openmessaging/src/main/java/io/openmessaging/rocketmq/config/ClientConfig.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/openmessaging/src/main/java/io/openmessaging/rocketmq/domain/ConsumeRequest.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/openmessaging/src/main/java/io/openmessaging/rocketmq/domain/RocketMQConstants.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/openmessaging/src/main/java/io/openmessaging/rocketmq/consumer/LocalMessageCache.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/openmessaging/src/main/java/io/openmessaging/rocketmq/utils/OMSUtil.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/openmessaging/src/main/java/io/openmessaging/rocketmq/producer/AbstractOMSProducer.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/openmessaging/src/main/java/io/openmessaging/rocketmq/consumer/PullConsumerImpl.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/openmessaging/src/main/java/io/openmessaging/rocketmq/utils/BeanUtils.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/openmessaging/src/main/java/io/openmessaging/rocketmq/producer/ProducerImpl.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/openmessaging/src/main/java/io/openmessaging/rocketmq/domain/NonStandardKeys.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/openmessaging/src/main/java/io/openmessaging/rocketmq/promise/FutureState.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/openmessaging/src/main/java/io/openmessaging/rocketmq/domain/SendResultImpl.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/openmessaging/src/main/java/io/openmessaging/rocketmq/consumer/PushConsumerImpl.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/openmessaging/src/main/java/io/openmessaging/rocketmq/domain/BytesMessageImpl.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/openmessaging/src/main/java/io/openmessaging/rocketmq/promise/DefaultPromise.java\\\"],\\\"classpath\\\":[\\\"/root/.m2/repository/io/openmessaging/openmessaging-api/0.3.1-alpha/openmessaging-api-0.3.1-alpha.jar\\\",\\\"/root/.m2/repository/net/bytebuddy/byte-buddy-agent/1.6.2/byte-buddy-agent-1.6.2.jar\\\",\\\"/root/.m2/repository/io/netty/netty-tcnative-boringssl-static/1.1.33.Fork26/netty-tcnative-boringssl-static-1.1.33.Fork26.jar\\\",\\\"/root/.m2/repository/org/assertj/assertj-core/2.6.0/assertj-core-2.6.0.jar\\\",\\\"/root/.m2/repository/org/apache/commons/commons-lang3/3.4/commons-lang3-3.4.jar\\\",\\\"/root/.m2/repository/org/mockito/mockito-core/2.6.3/mockito-core-2.6.3.jar\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/logging/target/rocketmq-logging-4.5.1.jar\\\",\\\"/root/.m2/repository/net/bytebuddy/byte-buddy/1.6.2/byte-buddy-1.6.2.jar\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/client/target/rocketmq-client-4.5.1.jar\\\",\\\"/root/.m2/repository/org/objenesis/objenesis/2.5/objenesis-2.5.jar\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/common/target/rocketmq-common-4.5.1.jar\\\",\\\"/root/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar\\\",\\\"/root/.m2/repository/junit/junit/4.11/junit-4.11.jar\\\",\\\"/root/.m2/repository/io/netty/netty-all/4.0.42.Final/netty-all-4.0.42.Final.jar\\\",\\\"/root/.m2/repository/com/alibaba/fastjson/1.2.51/fastjson-1.2.51.jar\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/remoting/target/rocketmq-remoting-4.5.1.jar\\\"],\\\"output_dir\\\":\\\"/tmp/analyzing-5e1bb2a46035d063/openmessaging/target/classes\\\",\\\"jdk\\\":\\\"JDK1.8\\\"},{\\\"arguments\\\":[],\\\"files\\\":[\\\"/tmp/analyzing-5e1bb2a46035d063/example/src/main/java/org/apache/rocketmq/example/benchmark/TransactionProducer.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/example/src/main/java/org/apache/rocketmq/example/simple/PullScheduleService.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/example/src/main/java/org/apache/rocketmq/example/openmessaging/SimpleProducer.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/example/src/main/java/org/apache/rocketmq/example/transaction/TransactionProducer.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/example/src/main/java/org/apache/rocketmq/example/openmessaging/SimplePushConsumer.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/example/src/main/java/org/apache/rocketmq/example/simple/PullConsumer.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/example/src/main/java/org/apache/rocketmq/example/openmessaging/SimplePullConsumer.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/example/src/main/java/org/apache/rocketmq/example/ordermessage/Consumer.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/example/src/main/java/org/apache/rocketmq/example/simple/CachedQueue.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/example/src/main/java/org/apache/rocketmq/example/tracemessage/TraceProducer.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/example/src/main/java/org/apache/rocketmq/example/simple/RandomAsyncCommit.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/example/src/main/java/org/apache/rocketmq/example/filter/TagFilterProducer.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/example/src/main/java/org/apache/rocketmq/example/quickstart/Producer.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/example/src/main/java/org/apache/rocketmq/example/simple/Producer.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/example/src/main/java/org/apache/rocketmq/example/simple/PushConsumer.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/example/src/main/java/org/apache/rocketmq/example/filter/SqlFilterProducer.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/example/src/main/java/org/apache/rocketmq/example/benchmark/Producer.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/example/src/main/java/org/apache/rocketmq/example/batch/SimpleBatchProducer.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/example/src/main/java/org/apache/rocketmq/example/tracemessage/TracePushConsumer.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/example/src/main/java/org/apache/rocketmq/example/batch/SplitBatchProducer.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/example/src/main/java/org/apache/rocketmq/example/namespace/ProducerWithNamespace.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/example/src/main/java/org/apache/rocketmq/example/simple/AclClient.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/example/src/main/java/org/apache/rocketmq/example/transaction/TransactionListenerImpl.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/example/src/main/java/org/apache/rocketmq/example/operation/Producer.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/example/src/main/java/org/apache/rocketmq/example/broadcast/PushConsumer.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/example/src/main/java/org/apache/rocketmq/example/namespace/PullConsumerWithNamespace.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/example/src/main/java/org/apache/rocketmq/example/filter/SqlFilterConsumer.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/example/src/main/java/org/apache/rocketmq/example/namespace/PushConsumerWithNamespace.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/example/src/main/java/org/apache/rocketmq/example/operation/Consumer.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/example/src/main/java/org/apache/rocketmq/example/filter/TagFilterConsumer.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/example/src/main/java/org/apache/rocketmq/example/simple/PullConsumerTest.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/example/src/main/java/org/apache/rocketmq/example/quickstart/Consumer.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/example/src/main/java/org/apache/rocketmq/example/ordermessage/Producer.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/example/src/main/java/org/apache/rocketmq/example/benchmark/Consumer.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/example/src/main/java/org/apache/rocketmq/example/simple/TestProducer.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/example/src/main/java/org/apache/rocketmq/example/simple/AsyncProducer.java\\\"],\\\"classpath\\\":[\\\"/root/.m2/repository/io/openmessaging/openmessaging-api/0.3.1-alpha/openmessaging-api-0.3.1-alpha.jar\\\",\\\"/root/.m2/repository/org/mockito/mockito-core/2.6.3/mockito-core-2.6.3.jar\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/openmessaging/target/rocketmq-openmessaging-4.5.1.jar\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/common/target/rocketmq-common-4.5.1.jar\\\",\\\"/root/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar\\\",\\\"/root/.m2/repository/ch/qos/logback/logback-core/1.0.13/logback-core-1.0.13.jar\\\",\\\"/root/.m2/repository/io/netty/netty-all/4.0.42.Final/netty-all-4.0.42.Final.jar\\\",\\\"/root/.m2/repository/org/slf4j/slf4j-api/1.7.7/slf4j-api-1.7.7.jar\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/srvutil/target/rocketmq-srvutil-4.5.1.jar\\\",\\\"/root/.m2/repository/net/bytebuddy/byte-buddy-agent/1.6.2/byte-buddy-agent-1.6.2.jar\\\",\\\"/root/.m2/repository/io/netty/netty-tcnative-boringssl-static/1.1.33.Fork26/netty-tcnative-boringssl-static-1.1.33.Fork26.jar\\\",\\\"/root/.m2/repository/org/assertj/assertj-core/2.6.0/assertj-core-2.6.0.jar\\\",\\\"/root/.m2/repository/org/apache/commons/commons-lang3/3.4/commons-lang3-3.4.jar\\\",\\\"/root/.m2/repository/com/google/guava/guava/19.0/guava-19.0.jar\\\",\\\"/root/.m2/repository/ch/qos/logback/logback-classic/1.0.13/logback-classic-1.0.13.jar\\\",\\\"/root/.m2/repository/org/javassist/javassist/3.20.0-GA/javassist-3.20.0-GA.jar\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/logging/target/rocketmq-logging-4.5.1.jar\\\",\\\"/root/.m2/repository/net/bytebuddy/byte-buddy/1.6.2/byte-buddy-1.6.2.jar\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/client/target/rocketmq-client-4.5.1.jar\\\",\\\"/root/.m2/repository/org/objenesis/objenesis/2.5/objenesis-2.5.jar\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/acl/target/rocketmq-acl-4.5.1.jar\\\",\\\"/root/.m2/repository/org/yaml/snakeyaml/1.19/snakeyaml-1.19.jar\\\",\\\"/root/.m2/repository/commons-codec/commons-codec/1.9/commons-codec-1.9.jar\\\",\\\"/root/.m2/repository/commons-cli/commons-cli/1.2/commons-cli-1.2.jar\\\",\\\"/root/.m2/repository/junit/junit/4.11/junit-4.11.jar\\\",\\\"/root/.m2/repository/com/alibaba/fastjson/1.2.51/fastjson-1.2.51.jar\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/remoting/target/rocketmq-remoting-4.5.1.jar\\\"],\\\"output_dir\\\":\\\"/tmp/analyzing-5e1bb2a46035d063/example/target/classes\\\",\\\"jdk\\\":\\\"JDK1.8\\\"},{\\\"arguments\\\":[],\\\"files\\\":[\\\"/tmp/analyzing-5e1bb2a46035d063/test/src/main/java/org/apache/rocketmq/test/listener/rmq/concurrent/RMQDelayListner.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/test/src/main/java/org/apache/rocketmq/test/factory/ProducerFactory.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/test/src/main/java/org/apache/rocketmq/test/util/FileUtil.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/test/src/main/java/org/apache/rocketmq/test/util/parallel/ParallelTaskExecutor.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/test/src/main/java/org/apache/rocketmq/test/util/DuplicateMessageInfo.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/test/src/main/java/org/apache/rocketmq/test/util/RandomUtils.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/test/src/main/java/org/apache/rocketmq/test/util/VerifyUtils.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/test/src/main/java/org/apache/rocketmq/test/factory/MQMessageFactory.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/test/src/main/java/org/apache/rocketmq/test/util/MQAdmin.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/test/src/main/java/org/apache/rocketmq/test/factory/MessageFactory.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/test/src/main/java/org/apache/rocketmq/test/util/parallel/Task4Test.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/test/src/main/java/org/apache/rocketmq/test/util/MQRandomUtils.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/test/src/main/java/org/apache/rocketmq/test/clientinterface/AbstractMQProducer.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/test/src/main/java/org/apache/rocketmq/test/util/TestUtil.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/test/src/main/java/org/apache/rocketmq/test/factory/TagMessage.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/test/src/main/java/org/apache/rocketmq/test/util/RandomUtil.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/test/src/main/java/org/apache/rocketmq/test/util/Condition.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/test/src/main/java/org/apache/rocketmq/test/util/data/collect/DataCollector.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/test/src/main/java/org/apache/rocketmq/test/listener/rmq/concurrent/RMQNormalListener.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/test/src/main/java/org/apache/rocketmq/test/client/rmq/RMQNormalProducer.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/test/src/main/java/org/apache/rocketmq/test/sendresult/ResultWrapper.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/test/src/main/java/org/apache/rocketmq/test/client/rmq/RMQAsyncSendProducer.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/test/src/main/java/org/apache/rocketmq/test/client/rmq/RMQSqlConsumer.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/test/src/main/java/org/apache/rocketmq/test/message/MessageQueueMsg.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/test/src/main/java/org/apache/rocketmq/test/client/rmq/RMQBroadCastConsumer.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/test/src/main/java/org/apache/rocketmq/test/factory/SendCallBackFactory.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/test/src/main/java/org/apache/rocketmq/test/util/MQWait.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/test/src/main/java/org/apache/rocketmq/test/util/data/collect/DataFilter.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/test/src/main/java/org/apache/rocketmq/test/util/TestUtils.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/test/src/main/java/org/apache/rocketmq/test/util/data/collect/impl/MapDataCollectorImpl.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/test/src/main/java/org/apache/rocketmq/test/listener/rmq/order/RMQOrderListener.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/test/src/main/java/org/apache/rocketmq/test/util/data/collect/impl/ListDataCollectorImpl.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/test/src/main/java/org/apache/rocketmq/test/factory/ConsumerFactory.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/test/src/main/java/org/apache/rocketmq/test/clientinterface/MQCollector.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/test/src/main/java/org/apache/rocketmq/test/clientinterface/MQConsumer.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/test/src/main/java/org/apache/rocketmq/test/clientinterface/MQProducer.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/test/src/main/java/org/apache/rocketmq/test/clientinterface/AbstractMQConsumer.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/test/src/main/java/org/apache/rocketmq/test/util/parallel/ParallelTask.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/test/src/main/java/org/apache/rocketmq/test/client/mq/MQAsyncProducer.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/test/src/main/java/org/apache/rocketmq/test/util/data/collect/DataCollectorManager.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/test/src/main/java/org/apache/rocketmq/test/listener/AbstractListener.java\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/test/src/main/java/org/apache/rocketmq/test/client/rmq/RMQNormalConsumer.java\\\"],\\\"classpath\\\":[\\\"/root/.m2/repository/net/java/dev/jna/jna/4.2.2/jna-4.2.2.jar\\\",\\\"/root/.m2/repository/io/openmessaging/storage/dledger/0.1/dledger-0.1.jar\\\",\\\"/root/.m2/repository/org/mockito/mockito-core/2.6.3/mockito-core-2.6.3.jar\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/namesrv/target/rocketmq-namesrv-4.5.1.jar\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/common/target/rocketmq-common-4.5.1.jar\\\",\\\"/root/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar\\\",\\\"/root/.m2/repository/ch/qos/logback/logback-core/1.0.13/logback-core-1.0.13.jar\\\",\\\"/root/.m2/repository/io/netty/netty-all/4.0.42.Final/netty-all-4.0.42.Final.jar\\\",\\\"/root/.m2/repository/org/slf4j/slf4j-api/1.7.7/slf4j-api-1.7.7.jar\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/srvutil/target/rocketmq-srvutil-4.5.1.jar\\\",\\\"/root/.m2/repository/net/bytebuddy/byte-buddy-agent/1.6.2/byte-buddy-agent-1.6.2.jar\\\",\\\"/root/.m2/repository/io/netty/netty-tcnative-boringssl-static/1.1.33.Fork26/netty-tcnative-boringssl-static-1.1.33.Fork26.jar\\\",\\\"/root/.m2/repository/org/assertj/assertj-core/2.6.0/assertj-core-2.6.0.jar\\\",\\\"/root/.m2/repository/org/apache/commons/commons-lang3/3.4/commons-lang3-3.4.jar\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/broker/target/rocketmq-broker-4.5.1.jar\\\",\\\"/root/.m2/repository/com/google/guava/guava/19.0/guava-19.0.jar\\\",\\\"/root/.m2/repository/log4j/log4j/1.2.17/log4j-1.2.17.jar\\\",\\\"/root/.m2/repository/com/beust/jcommander/1.72/jcommander-1.72.jar\\\",\\\"/root/.m2/repository/ch/qos/logback/logback-classic/1.0.13/logback-classic-1.0.13.jar\\\",\\\"/root/.m2/repository/org/javassist/javassist/3.20.0-GA/javassist-3.20.0-GA.jar\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/logging/target/rocketmq-logging-4.5.1.jar\\\",\\\"/root/.m2/repository/net/bytebuddy/byte-buddy/1.6.2/byte-buddy-1.6.2.jar\\\",\\\"/root/.m2/repository/com/google/truth/truth/0.30/truth-0.30.jar\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/client/target/rocketmq-client-4.5.1.jar\\\",\\\"/root/.m2/repository/org/objenesis/objenesis/2.5/objenesis-2.5.jar\\\",\\\"/root/.m2/repository/com/google/errorprone/error_prone_annotations/2.0.8/error_prone_annotations-2.0.8.jar\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/acl/target/rocketmq-acl-4.5.1.jar\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/tools/target/rocketmq-tools-4.5.1.jar\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/filter/target/rocketmq-filter-4.5.1.jar\\\",\\\"/root/.m2/repository/org/yaml/snakeyaml/1.19/snakeyaml-1.19.jar\\\",\\\"/root/.m2/repository/commons-codec/commons-codec/1.9/commons-codec-1.9.jar\\\",\\\"/root/.m2/repository/commons-cli/commons-cli/1.2/commons-cli-1.2.jar\\\",\\\"/root/.m2/repository/junit/junit/4.11/junit-4.11.jar\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/store/target/rocketmq-store-4.5.1.jar\\\",\\\"/root/.m2/repository/com/alibaba/fastjson/1.2.51/fastjson-1.2.51.jar\\\",\\\"/tmp/analyzing-5e1bb2a46035d063/remoting/target/rocketmq-remoting-4.5.1.jar\\\"],\\\"output_dir\\\":\\\"/tmp/analyzing-5e1bb2a46035d063/test/target/classes\\\",\\\"jdk\\\":\\\"JDK1.8\\\"}]\"\n[DEBUG] [20/Jun/2019:16:02:32 +0000] [()] Done generating compilation database.\n[DEBUG] [20/Jun/2019:16:02:32 +0000] [()] Trying to autodetect the build system based on files present in the repository.\n[DEBUG] [20/Jun/2019:16:02:32 +0000] [()] Errorprone JDK1.8 and jceJDK \"JDK1.6\" are not compatible.\n[DEBUG] [20/Jun/2019:17:28:52 +0000] [()] Tool completed with 237 but only reporting up to 1200.\n[DEBUG] [20/Jun/2019:17:28:52 +0000] [()] All tools complete for commit \"master\"\n[DEBUG] [20/Jun/2019:17:28:54 +0000] [()] Analysis has completed.\n"}}
