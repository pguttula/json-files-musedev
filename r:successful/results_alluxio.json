{"tag":"AnalysisSuccess","contents":{"requestedTools":null,"toolResults":[[{"tag":"Infer"},{"tag":"ToolSuccess","contents":[[{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Set AlluxioConfiguration.keySet()` of un-annotated interface `alluxio.conf.AlluxioConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/conf/path/SpecificPathConfiguration.java","tnLine":93,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.conf.path.SpecificPathConfiguration.keySet():java.util.Set","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object BaseFileSystem$RpcCallable.call(Object)` of un-annotated interface `alluxio.client.file.BaseFileSystem$RpcCallable`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/client/fs/src/main/java/alluxio/client/file/BaseFileSystem.java","tnLine":203,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.client.file.BaseFileSystem.delete(alluxio.AlluxioURI):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void CpCommand.validateArgs(CommandLine)` writes to field `this.mPreservePermissions` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"shell/src/main/java/alluxio/cli/fs/command/CpCommand.java","tnLine":332,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.CpCommand.validateArgs(org.apache.commons.cli.CommandLine):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `int AlluxioConfiguration.getInt(PropertyKey)` of un-annotated interface `alluxio.conf.AlluxioConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"underfs/oss/src/main/java/alluxio/underfs/oss/OSSUnderFileSystem.java","tnLine":171,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.oss.OSSUnderFileSystem.getObjectListingChunk(java.lang.String,boolean):alluxio.underfs.ObjectUnderFileSystem$ObjectListingChunk","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `other.getValueCase()` could be null and is dereferenced at line 505.","tnFile":"core/transport/src/main/java/alluxio/grpc/WriteRequest.java","tnLine":505,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.grpc.WriteRequest$Builder.mergeFrom(alluxio.grpc.WriteRequest):alluxio.grpc.WriteRequest$Builder","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Authority URI.getAuthority()` of un-annotated interface `alluxio.uri.URI`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/base/src/main/java/alluxio/uri/StandardURI.java","tnLine":88,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.uri.StandardURI.createNewPath(java.lang.String,boolean):alluxio.uri.URI","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String URI.getPath()` of un-annotated interface `alluxio.uri.URI`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"underfs/local/src/main/java/alluxio/underfs/local/LocalUnderFileSystem.java","tnLine":313,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.local.LocalUnderFileSystem.mkdirs(java.lang.String,alluxio.underfs.options.MkdirsOptions):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"UNSAFE_GUARDED_BY_ACCESS","tnDesc":"The field `alluxio.metrics.MetricsSystem.sSinks` is annotated with `@GuardedBy(\"MetricsSystem\")`, but the lock `MetricsSystem` is not held during the access to the field at line 196. Since the current method is non-private, it can be called from outside the current class without synchronization. Consider wrapping the access in a `synchronized(MetricsSystem)` block or making the method private.","tnFile":"core/common/src/main/java/alluxio/metrics/MetricsSystem.java","tnLine":196,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.metrics.MetricsSystem.getNumSinks():int","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `PrefixPathConfiguration.<init>()` indirectly writes to field `current.mIsTerminal` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/common/src/main/java/alluxio/conf/path/PrefixPathConfiguration.java","tnLine":49,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.conf.path.PrefixPathConfiguration.<init>()","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `FileSystem ClientPool.getClient()` mutates container `this.mClients` via call to `add` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"minicluster/src/main/java/alluxio/master/ClientPool.java","tnLine":46,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.ClientPool.getClient():alluxio.client.file.FileSystem","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `UserState UserStateFactory.create(Subject,AlluxioConfiguration,boolean)` of un-annotated interface `alluxio.security.user.UserStateFactory`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/CpCommand.java","tnLine":295,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.CpCommand.<init>(alluxio.client.file.FileSystemContext)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `boolean AlluxioConfiguration.getBoolean(PropertyKey)` of un-annotated interface `alluxio.conf.AlluxioConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/util/TieredIdentityUtils.java","tnLine":86,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.util.TieredIdentityUtils.nearest(alluxio.wire.TieredIdentity,java.util.List,alluxio.conf.AlluxioConfiguration):java.util.Optional","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Set AlluxioConfiguration.keySet()` of un-annotated interface `alluxio.conf.AlluxioConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/conf/path/SpecificPathConfiguration.java","tnLine":180,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.conf.path.SpecificPathConfiguration.toMap(alluxio.conf.ConfigurationValueOptions):java.util.Map","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void AbstractClient.checkVersion(long)` reads without synchronization from `this.mServiceVersion`. Potentially races with write in method `AbstractClient.retryRPC(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/common/src/main/java/alluxio/AbstractClient.java","tnLine":140,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.AbstractClient.checkVersion(long):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `ExecutorService ExecutorServiceFactory.create()` of un-annotated interface `alluxio.util.executor.ExecutorServiceFactory`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"underfs/cos/src/main/java/alluxio/underfs/cos/COSUnderFileSystem.java","tnLine":106,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.cos.COSUnderFileSystem.<init>(alluxio.AlluxioURI,com.qcloud.cos.COSClient,java.lang.String,java.lang.String,alluxio.underfs.UnderFileSystemConfiguration)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String Command.getCommandName()` of un-annotated interface `alluxio.cli.Command`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/MkdirCommand.java","tnLine":74,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.MkdirCommand.validateArgs(org.apache.commons.cli.CommandLine):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `int Authority.compareTo(Authority)` of un-annotated interface `alluxio.uri.Authority`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/base/src/main/java/alluxio/uri/StandardURI.java","tnLine":24,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.uri.StandardURI.compareTo(java.lang.Object):int","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.error(String)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/server/common/src/main/java/alluxio/master/journal/ufs/UfsJournalLogWriter.java","tnLine":108,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.journal.ufs.UfsJournalLogWriter.<init>(alluxio.master.journal.ufs.UfsJournal,long)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `String AlluxioURI.toString()` reads without synchronization from `this.mUriString`. Potentially races with write in method `AlluxioURI.getRootPath()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/base/src/main/java/alluxio/AlluxioURI.java","tnLine":474,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.AlluxioURI.toString():java.lang.String","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `InstancedConfiguration ServerConfiguration.global()` reads without synchronization from `conf.ServerConfiguration.sConf`. Potentially races with write in method `ServerConfiguration.loadClusterDefaultsIfNotLoaded(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"core/server/common/src/main/java/alluxio/conf/ServerConfiguration.java","tnLine":340,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.conf.ServerConfiguration.global():alluxio.conf.InstancedConfiguration","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `WorkerNetAddress BlockLocationPolicy.getWorker(GetWorkerOptions)` of un-annotated interface `alluxio.client.block.policy.BlockLocationPolicy`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/client/fs/src/main/java/alluxio/client/block/AlluxioBlockStore.java","tnLine":338,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.client.block.AlluxioBlockStore.getOutStream(long,long,alluxio.client.file.options.OutStreamOptions):alluxio.client.block.stream.BlockOutStream","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void ConfigurationDocGenerator.main(java.lang.String[])` indirectly reads without synchronization from container `conf.PropertyKey.DEFAULT_KEYS_MAP` via call to `values`. Potentially races with write in method `ConfigurationDocGenerator.main(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"shell/src/main/java/alluxio/cli/ConfigurationDocGenerator.java","tnLine":210,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.ConfigurationDocGenerator.main(java.lang.String[]):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object BaseFileSystem$RpcCallable.call(Object)` of un-annotated interface `alluxio.client.file.BaseFileSystem$RpcCallable`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/client/fs/src/main/java/alluxio/client/file/BaseFileSystem.java","tnLine":363,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.client.file.BaseFileSystem.updateMount(alluxio.AlluxioURI,alluxio.grpc.MountPOptions):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void AlluxioLogServerProcess.stop()` reads without synchronization from `this.mThreadPool`. Potentially races with write in method `AlluxioLogServerProcess.start()`.\n Reporting because this access may occur on a background thread.","tnFile":"logserver/src/main/java/alluxio/logserver/AlluxioLogServerProcess.java","tnLine":166,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.logserver.AlluxioLogServerProcess.stop():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String URI.getPath()` of un-annotated interface `alluxio.uri.URI`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"underfs/local/src/main/java/alluxio/underfs/local/LocalUnderFileSystem.java","tnLine":155,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.local.LocalUnderFileSystem.deleteFile(java.lang.String):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `Optional HeapInodeStore.getMutable(long,ReadOption)` reads without synchronization from container `this.mInodes` via call to `get`. Potentially races with write in method `HeapInodeStore.restoreFromCheckpoint(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/server/master/src/main/java/alluxio/master/metastore/heap/HeapInodeStore.java","tnLine":74,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.metastore.heap.HeapInodeStore.getMutable(long,alluxio.master.metastore.ReadOption):java.util.Optional","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String AlluxioConfiguration.get(PropertyKey)` of un-annotated interface `alluxio.conf.AlluxioConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/underfs/BaseUnderFileSystem.java","tnLine":71,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.BaseUnderFileSystem.create(java.lang.String):java.io.OutputStream","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `boolean ForkJoinPool.tryExternalUnpush(ForkJoinTask)` reads without synchronization from `this.workQueues`. Potentially races with write in method `ForkJoinPool.registerWorker(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"core/common/src/main/java/alluxio/concurrent/jsr/ForkJoinPool.java","tnLine":1708,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.jsr.ForkJoinPool.tryExternalUnpush(alluxio.concurrent.jsr.ForkJoinTask):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `Duration ServerConfiguration.getDuration(PropertyKey)` reads without synchronization from `conf.ServerConfiguration.sConf`. Potentially races with write in method `ServerConfiguration.loadClusterDefaultsIfNotLoaded(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"core/server/common/src/main/java/alluxio/conf/ServerConfiguration.java","tnLine":285,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.conf.ServerConfiguration.getDuration(alluxio.conf.PropertyKey):java.time.Duration","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `String MutableInodeDirectory.toString()` reads without synchronization from `this.mDirectChildrenLoaded`. Potentially races with write in method `MutableInodeDirectory.setDirectChildrenLoaded(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"core/server/master/src/main/java/alluxio/master/file/meta/MutableInodeDirectory.java","tnLine":171,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.file.meta.MutableInodeDirectory.toString():java.lang.String","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `UserState UserStateFactory.create(Subject,AlluxioConfiguration,boolean)` of un-annotated interface `alluxio.security.user.UserStateFactory`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/ChmodCommand.java","tnLine":51,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.ChmodCommand.<init>(alluxio.client.file.FileSystemContext)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.error(String)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"underfs/s3a/src/main/java/alluxio/underfs/s3a/S3AUnderFileSystem.java","tnLine":314,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.s3a.S3AUnderFileSystem.createObject(java.lang.String):java.io.OutputStream","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `ufsResource.get()` could be null and is dereferenced at line 168.","tnFile":"core/server/master/src/main/java/alluxio/master/file/activesync/ActiveSyncManager.java","tnLine":168,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.file.activesync.ActiveSyncManager.start():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"UNSAFE_GUARDED_BY_ACCESS","tnDesc":"The field `alluxio.master.file.meta.MountTable.mState` is annotated with `@GuardedBy(\"mReadLock,mWriteLock\")`, but the lock `mReadLock,mWriteLock` is not held during the access to the field at line 271. Since the current method is non-private, it can be called from outside the current class without synchronization. Consider wrapping the access in a `synchronized(mReadLock,mWriteLock)` block or making the method private.","tnFile":"core/server/master/src/main/java/alluxio/master/file/meta/MountTable.java","tnLine":271,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.file.meta.MountTable.containsMountPoint(alluxio.AlluxioURI):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String AlluxioConfiguration.get(PropertyKey)` of un-annotated interface `alluxio.conf.AlluxioConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/util/network/NetworkAddressUtils.java","tnLine":323,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.util.network.NetworkAddressUtils.getBindAddress(alluxio.util.network.NetworkAddressUtils$ServiceType,alluxio.conf.AlluxioConfiguration):java.net.InetSocketAddress","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `int Authority.compareTo(Authority)` of un-annotated interface `alluxio.uri.Authority`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/base/src/main/java/alluxio/uri/StandardURI.java","tnLine":143,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.uri.StandardURI.compareTo(alluxio.uri.URI):int","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void JournalCrashTest$ClientThread.run()` writes to field `this.mSuccessNum` outside of synchronization.\n Reporting because this access may occur on a background thread.","tnFile":"examples/src/main/java/alluxio/cli/JournalCrashTest.java","tnLine":155,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.JournalCrashTest$ClientThread.run():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void Format.main(java.lang.String[])` indirectly reads without synchronization from container `conf.PropertyKey.DEFAULT_ALIAS_MAP` via call to `get`. Potentially races with write in method `Format.main(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/server/common/src/main/java/alluxio/cli/Format.java","tnLine":97,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.Format.main(java.lang.String[]):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `UserState UserStateFactory.create(Subject,AlluxioConfiguration,boolean)` of un-annotated interface `alluxio.security.user.UserStateFactory`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/ChgrpCommand.java","tnLine":49,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.ChgrpCommand.<init>(alluxio.client.file.FileSystemContext)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `boolean DefaultBlockMaster.processJournalEntry(Journal$JournalEntry)` reads without synchronization from `this.mJournaledNextContainerId`. Potentially races with write in method `DefaultBlockMaster.getNewContainerId()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"core/server/master/src/main/java/alluxio/master/block/DefaultBlockMaster.java","tnLine":278,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.block.DefaultBlockMaster.processJournalEntry(alluxio.proto.journal.Journal$JournalEntry):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `URIStatus FileSystem.getStatus(AlluxioURI)` of un-annotated interface `alluxio.client.file.FileSystem`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/CatCommand.java","tnLine":51,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.CatCommand.runPlainPath(alluxio.AlluxioURI,org.apache.commons.cli.CommandLine):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"UNSAFE_GUARDED_BY_ACCESS","tnDesc":"The field `alluxio.metrics.MetricsSystem.sSinks` is annotated with `@GuardedBy(\"MetricsSystem\")`, but the lock `MetricsSystem` is not held during the access to the field at line 183. Since the current method is non-private, it can be called from outside the current class without synchronization. Consider wrapping the access in a `synchronized(MetricsSystem)` block or making the method private.","tnFile":"core/common/src/main/java/alluxio/metrics/MetricsSystem.java","tnLine":183,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.metrics.MetricsSystem.stopSinks():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `UserState UserStateFactory.create(Subject,AlluxioConfiguration,boolean)` of un-annotated interface `alluxio.security.user.UserStateFactory`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/LsCommand.java","tnLine":199,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.LsCommand.<init>(alluxio.client.file.FileSystemContext)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.error(String)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/server/common/src/main/java/alluxio/master/journal/ufs/UfsJournalGarbageCollector.java","tnLine":96,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.journal.ufs.UfsJournalGarbageCollector.gc():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `__new(alluxio.concurrent.ManagedBlockingUfsForwarder$10).get()` could be null and is dereferenced at line 174.","tnFile":"core/common/src/main/java/alluxio/concurrent/ManagedBlockingUfsForwarder.java","tnLine":174,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.ManagedBlockingUfsForwarder.deleteExistingFile(java.lang.String):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"RESOURCE_LEAK","tnDesc":"resource of type `alluxio.master.journal.ufs.UfsJournalReader` acquired by call to `start()` at line 108 is not released after line 108.","tnFile":"core/server/common/src/main/java/alluxio/master/journal/ufs/UfsJournalSystem.java","tnLine":108,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.journal.ufs.UfsJournalSystem.startInternal():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void ForkJoinPool.helpQuiescePool(ForkJoinPool$WorkQueue)` reads without synchronization from `this.workQueues`. Potentially races with write in method `ForkJoinPool.registerWorker(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"core/common/src/main/java/alluxio/concurrent/jsr/ForkJoinPool.java","tnLine":1504,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.jsr.ForkJoinPool.helpQuiescePool(alluxio.concurrent.jsr.ForkJoinPool$WorkQueue):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `int URI.compareTo(Object)` of un-annotated interface `alluxio.uri.URI`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/base/src/main/java/alluxio/AlluxioURI.java","tnLine":53,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.AlluxioURI.compareTo(java.lang.Object):int","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `__new(alluxio.concurrent.ManagedBlockingUfsForwarder$37).get()` could be null and is dereferenced at line 476.","tnFile":"core/common/src/main/java/alluxio/concurrent/ManagedBlockingUfsForwarder.java","tnLine":476,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.ManagedBlockingUfsForwarder.renameRenamableFile(java.lang.String,java.lang.String):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `Optional HeapBlockStore.getBlock(long)` reads without synchronization from container `this.mBlocks` via call to `get`. Potentially races with write in method `HeapBlockStore.removeBlock(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/server/master/src/main/java/alluxio/master/metastore/heap/HeapBlockStore.java","tnLine":45,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.metastore.heap.HeapBlockStore.getBlock(long):java.util.Optional","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `Meter WriteRequestContext.getMeter()` reads without synchronization from `this.mMeter`. Potentially races with write in method `WriteRequestContext.setMeter(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/server/worker/src/main/java/alluxio/worker/grpc/WriteRequestContext.java","tnLine":98,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.worker.grpc.WriteRequestContext.getMeter():com.codahale.metrics.Meter","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.error(String)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/server/common/src/main/java/alluxio/cli/extensions/command/LsCommand.java","tnLine":65,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.extensions.command.LsCommand.run(org.apache.commons.cli.CommandLine):int","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"RESOURCE_LEAK","tnDesc":"resource of type `java.lang.Process` acquired by call to `exec(...)` at line 182 is not released after line 187.","tnFile":"examples/src/main/java/alluxio/cli/AlluxioFrameworkIntegrationTest.java","tnLine":187,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.AlluxioFrameworkIntegrationTest.processExists(java.lang.String):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"UNSAFE_GUARDED_BY_ACCESS","tnDesc":"The field `alluxio.master.block.DefaultBlockMaster.mJournaledNextContainerId` is annotated with `@GuardedBy(\"mBlockContainerIdGenerator\")`, but the lock `mBlockContainerIdGenerator` is not held during the access to the field at line 304. Since the current method is non-private, it can be called from outside the current class without synchronization. Consider wrapping the access in a `synchronized(mBlockContainerIdGenerator)` block or making the method private.","tnFile":"core/server/master/src/main/java/alluxio/master/block/DefaultBlockMaster.java","tnLine":304,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.block.DefaultBlockMaster.resetState():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"RESOURCE_LEAK","tnDesc":"resource of type `alluxio.cli.extensions.ExtensionsShell` acquired by call to `ExtensionsShell(...)` at line 41 is not released after line 42.\n**Note**: potential exception at line 42","tnFile":"core/server/common/src/main/java/alluxio/cli/extensions/ExtensionsShell.java","tnLine":42,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.extensions.ExtensionsShell.main(java.lang.String[]):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Enum AlluxioConfiguration.getEnum(PropertyKey,Class)` of un-annotated interface `alluxio.conf.AlluxioConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/util/network/NettyUtils.java","tnLine":113,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.util.network.NettyUtils.getClientChannelClass(boolean,alluxio.conf.AlluxioConfiguration):java.lang.Class","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `UfsJournal.<init>(URI,Master,long,Supplier)` indirectly mutates container `conf.PropertyKey.DEFAULT_ALIAS_MAP` via call to `put` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/server/common/src/main/java/alluxio/master/journal/ufs/UfsJournal.java","tnLine":137,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.journal.ufs.UfsJournal.<init>(java.net.URI,alluxio.master.Master,long,java.util.function.Supplier)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String URI.getPath()` of un-annotated interface `alluxio.uri.URI`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"underfs/local/src/main/java/alluxio/underfs/local/LocalUnderFileSystem.java","tnLine":209,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.local.LocalUnderFileSystem.getFileStatus(java.lang.String):alluxio.underfs.UfsFileStatus","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `Counter WriteRequestContext.getCounter()` reads without synchronization from `this.mCounter`. Potentially races with write in method `WriteRequestContext.setCounter(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/server/worker/src/main/java/alluxio/worker/grpc/WriteRequestContext.java","tnLine":90,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.worker.grpc.WriteRequestContext.getCounter():com.codahale.metrics.Counter","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"UNSAFE_GUARDED_BY_ACCESS","tnDesc":"The field `alluxio.master.file.meta.MountTable.mState` is annotated with `@GuardedBy(\"mReadLock,mWriteLock\")`, but the lock `mReadLock,mWriteLock` is not held during the access to the field at line 361. Since the current method is non-private, it can be called from outside the current class without synchronization. Consider wrapping the access in a `synchronized(mReadLock,mWriteLock)` block or making the method private.","tnFile":"core/server/master/src/main/java/alluxio/master/file/meta/MountTable.java","tnLine":361,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.file.meta.MountTable.resolve(alluxio.AlluxioURI):alluxio.master.file.meta.MountTable$Resolution","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `ufsResource.get()` could be null and is dereferenced at line 3712.","tnFile":"core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java","tnLine":3712,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.file.DefaultFileSystemMaster.startSyncAndJournal(alluxio.master.file.RpcContext,alluxio.AlluxioURI):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `UfsJournal.mUfs.listStatus(location.toString())` could be null and is dereferenced at line 309.","tnFile":"core/server/common/src/main/java/alluxio/master/journal/ufs/UfsJournal.java","tnLine":309,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.journal.ufs.UfsJournal.format():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `Object AbstractClient.retryRPC(AbstractClient$RpcCallable)` indirectly reads with synchronization from `this.mServiceVersion`. Potentially races with unsynchronized write in method `AbstractClient.checkVersion(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/common/src/main/java/alluxio/AbstractClient.java","tnLine":331,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.AbstractClient.retryRPC(alluxio.AbstractClient$RpcCallable):java.lang.Object","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `java.lang.String[] ObjectUnderFileSystem$ObjectListingChunk.getCommonPrefixes()` of un-annotated interface `alluxio.underfs.ObjectUnderFileSystem$ObjectListingChunk`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/underfs/ObjectUnderFileSystem.java","tnLine":577,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.ObjectUnderFileSystem.isDirectory(java.lang.String):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `getValueCase()` could be null and is dereferenced at line 250.","tnFile":"core/transport/src/main/java/alluxio/grpc/WriteRequest.java","tnLine":250,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.grpc.WriteRequest.equals(java.lang.Object):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String Command.getCommandName()` of un-annotated interface `alluxio.cli.Command`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/LocationCommand.java","tnLine":82,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.LocationCommand.validateArgs(org.apache.commons.cli.CommandLine):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `URI URI.createNewPath(String,boolean)` of un-annotated interface `alluxio.uri.URI`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/base/src/main/java/alluxio/AlluxioURI.java","tnLine":422,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.AlluxioURI.joinUnsafe(java.lang.String):alluxio.AlluxioURI","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `boolean InodeDirectoryIdGenerator.processJournalEntry(Journal$JournalEntry)` indirectly writes to field `this.mNextDirectoryId.mSequenceNumber` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/server/master/src/main/java/alluxio/master/file/meta/InodeDirectoryIdGenerator.java","tnLine":98,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.file.meta.InodeDirectoryIdGenerator.processJournalEntry(alluxio.proto.journal.Journal$JournalEntry):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object BaseFileSystem$RpcCallable.call(Object)` of un-annotated interface `alluxio.client.file.BaseFileSystem$RpcCallable`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/client/fs/src/main/java/alluxio/client/file/BaseFileSystem.java","tnLine":450,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.client.file.BaseFileSystem.setAcl(alluxio.AlluxioURI,alluxio.grpc.SetAclAction,java.util.List):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String Command.getCommandName()` of un-annotated interface `alluxio.cli.Command`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/MasterInfoCommand.java","tnLine":48,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.MasterInfoCommand.validateArgs(org.apache.commons.cli.CommandLine):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"RESOURCE_LEAK","tnDesc":"resource of type `alluxio.master.journal.checkpoint.CheckpointOutputStream` acquired by call to `new()` at line 164 is not released after line 173.\n**Note**: potential exception at line 173","tnFile":"core/server/master/src/main/java/alluxio/master/metastore/rocks/RocksStore.java","tnLine":173,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.metastore.rocks.RocksStore.writeToCheckpoint(java.io.OutputStream):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `int StandardURI.hashCode()` writes to field `this.mHashCode` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/base/src/main/java/alluxio/uri/StandardURI.java","tnLine":221,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.uri.StandardURI.hashCode():int","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String URI.getPath()` of un-annotated interface `alluxio.uri.URI`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/base/src/main/java/alluxio/AlluxioURI.java","tnLine":367,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.AlluxioURI.isPathAbsolute():boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.error(String,Object)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"integration/fuse/src/main/java/alluxio/fuse/AlluxioFuseFileSystem.java","tnLine":434,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.fuse.AlluxioFuseFileSystem.open(java.lang.String,ru.serce.jnrfuse.struct.FuseFileInfo):int","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String URI.getPath()` of un-annotated interface `alluxio.uri.URI`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/server/master/src/main/java/alluxio/master/file/meta/MountTable.java","tnLine":235,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.file.meta.MountTable.getMountPoint(alluxio.AlluxioURI):java.lang.String","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"RESOURCE_LEAK","tnDesc":"resource of type `org.rocksdb.ReadOptions` acquired by call to `new()` at line 334 is not released after line 334.","tnFile":"core/server/master/src/main/java/alluxio/master/metastore/rocks/RocksInodeStore.java","tnLine":334,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.metastore.rocks.RocksInodeStore.toStringEntries():java.lang.String","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `AlluxioProperties AlluxioConfiguration.copyProperties()` of un-annotated interface `alluxio.conf.AlluxioConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/conf/path/SpecificPathConfiguration.java","tnLine":163,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.conf.path.SpecificPathConfiguration.copyProperties():alluxio.conf.AlluxioProperties","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `long JobMasterClient.run(JobConfig)` of un-annotated interface `alluxio.client.job.JobMasterClient`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"job/client/src/main/java/alluxio/job/replicate/DefaultReplicationHandler.java","tnLine":66,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.job.replicate.DefaultReplicationHandler.migrate(alluxio.AlluxioURI,long,java.lang.String,java.lang.String):long","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Optional PathConfiguration.getConfiguration(AlluxioURI,PropertyKey)` of un-annotated interface `alluxio.conf.path.PathConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/conf/path/SpecificPathConfiguration.java","tnLine":118,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.conf.path.SpecificPathConfiguration.getFloat(alluxio.conf.PropertyKey):float","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String Command.getCommandName()` of un-annotated interface `alluxio.cli.Command`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/DistributedLoadCommand.java","tnLine":66,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.DistributedLoadCommand.validateArgs(org.apache.commons.cli.CommandLine):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"RESOURCE_LEAK","tnDesc":"resource of type `alluxio.fuse.OpenFileEntry` acquired by call to `new()` at line 252 is not released after line 252.","tnFile":"integration/fuse/src/main/java/alluxio/fuse/AlluxioFuseFileSystem.java","tnLine":252,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.fuse.AlluxioFuseFileSystem.create(java.lang.String,long,ru.serce.jnrfuse.struct.FuseFileInfo):int","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.debug(String,Object)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/client/fs/src/main/java/alluxio/client/block/util/BlockLocationUtils.java","tnLine":53,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.client.block.util.BlockLocationUtils.nearest(alluxio.wire.TieredIdentity,java.util.List,alluxio.conf.AlluxioConfiguration):java.util.Optional","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object Gauge.getValue()` of un-annotated interface `com.codahale.metrics.Gauge`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/metrics/MetricsSystem.java","tnLine":484,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.metrics.MetricsSystem.allMasterMetrics():java.util.List","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object `MountTable$State$1.mEntry` last assigned on line 572 could be null and is dereferenced at line 575.","tnFile":"core/server/master/src/main/java/alluxio/master/file/meta/MountTable.java","tnLine":575,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.file.meta.MountTable$State$1.next():alluxio.proto.journal.Journal$JournalEntry","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `UserState UserStateFactory.create(Subject,AlluxioConfiguration,boolean)` of un-annotated interface `alluxio.security.user.UserStateFactory`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"minicluster/src/main/java/alluxio/master/ClientPool.java","tnLine":45,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.ClientPool.getClient():alluxio.client.file.FileSystem","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `boolean RetryPolicy.attempt()` of un-annotated interface `alluxio.retry.RetryPolicy`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"job/server/src/main/java/alluxio/worker/AlluxioJobWorker.java","tnLine":66,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.worker.AlluxioJobWorker.main(java.lang.String[]):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `confWarns.get(scope)` could be null and is dereferenced at line 91.","tnFile":"core/server/master/src/main/java/alluxio/master/meta/checkconf/ServerConfigurationChecker.java","tnLine":91,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.meta.checkconf.ServerConfigurationChecker.regenerateReport():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `long InputSplit.getLength()` of un-annotated interface `org.apache.hadoop.mapred.InputSplit`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/client/hdfs/src/main/java/alluxio/hadoop/HadoopUtils.java","tnLine":127,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.hadoop.HadoopUtils.toStringHadoopInputSplit(org.apache.hadoop.mapred.InputSplit):java.lang.String","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object UnderFileSystemWithLogging$UfsCallable.call()` of un-annotated interface `alluxio.underfs.UnderFileSystemWithLogging$UfsCallable`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.underfs.UnderFileSystem` is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/underfs/UnderFileSystemWithLogging.java","tnLine":390,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.UnderFileSystemWithLogging.getFileLocations(java.lang.String,alluxio.underfs.options.FileLocationOptions):java.util.List","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.error(String)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"job/server/src/main/java/alluxio/master/job/JobMaster.java","tnLine":178,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.job.JobMaster.start(java.lang.Boolean):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void JobMasterClient.close()` of un-annotated interface `alluxio.client.job.JobMasterClient`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/DistributedCpCommand.java","tnLine":61,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.DistributedCpCommand.run(org.apache.commons.cli.CommandLine):int","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `String ServerConfiguration.get(PropertyKey,ConfigurationValueOptions)` reads without synchronization from `conf.ServerConfiguration.sConf`. Potentially races with write in method `ServerConfiguration.loadClusterDefaultsIfNotLoaded(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"core/server/common/src/main/java/alluxio/conf/ServerConfiguration.java","tnLine":145,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.conf.ServerConfiguration.get(alluxio.conf.PropertyKey,alluxio.conf.ConfigurationValueOptions):java.lang.String","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String URI.getPath()` of un-annotated interface `alluxio.uri.URI`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/server/master/src/main/java/alluxio/master/file/meta/MountTable.java","tnLine":268,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.file.meta.MountTable.containsMountPoint(alluxio.AlluxioURI):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object UnderFileSystemWithLogging$UfsCallable.call()` of un-annotated interface `alluxio.underfs.UnderFileSystemWithLogging$UfsCallable`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.underfs.UnderFileSystem` is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/underfs/UnderFileSystemWithLogging.java","tnLine":405,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.UnderFileSystemWithLogging.getFileStatus(java.lang.String):alluxio.underfs.UfsFileStatus","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `Enum ServerConfiguration.getEnum(PropertyKey,Class)` reads without synchronization from `conf.ServerConfiguration.sConf`. Potentially races with write in method `ServerConfiguration.loadClusterDefaultsIfNotLoaded(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"core/server/common/src/main/java/alluxio/conf/ServerConfiguration.java","tnLine":255,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.conf.ServerConfiguration.getEnum(alluxio.conf.PropertyKey,java.lang.Class):java.lang.Enum","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `boolean ForkJoinPool$ManagedBlocker.block()` of un-annotated interface `alluxio.concurrent.jsr.ForkJoinPool$ManagedBlocker`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.underfs.UnderFileSystem` is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/concurrent/ManagedBlockingUfsForwarder.java","tnLine":291,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.ManagedBlockingUfsForwarder.getSpace(java.lang.String,alluxio.underfs.UnderFileSystem$SpaceType):long","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object UnderFileSystemWithLogging$UfsCallable.call()` of un-annotated interface `alluxio.underfs.UnderFileSystemWithLogging$UfsCallable`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.underfs.UnderFileSystem` is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/underfs/UnderFileSystemWithLogging.java","tnLine":145,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.UnderFileSystemWithLogging.create(java.lang.String):java.io.OutputStream","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String URI.getPath()` of un-annotated interface `alluxio.uri.URI`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/server/master/src/main/java/alluxio/master/file/meta/MountTable.java","tnLine":108,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.file.meta.MountTable.add(java.util.function.Supplier,alluxio.AlluxioURI,alluxio.AlluxioURI,long,alluxio.grpc.MountPOptions):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `__new(alluxio.concurrent.ManagedBlockingUfsForwarder$13).get()` could be null and is dereferenced at line 205.","tnFile":"core/common/src/main/java/alluxio/concurrent/ManagedBlockingUfsForwarder.java","tnLine":205,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.ManagedBlockingUfsForwarder.getBlockSizeByte(java.lang.String):long","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `boolean RetryPolicy.attempt()` of un-annotated interface `alluxio.retry.RetryPolicy`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/server/worker/src/main/java/alluxio/worker/AlluxioWorker.java","tnLine":59,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.worker.AlluxioWorker.main(java.lang.String[]):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.error(String)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"underfs/web/src/main/java/alluxio/underfs/web/WebUnderFileSystemFactory.java","tnLine":27,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.web.WebUnderFileSystemFactory.create(java.lang.String,alluxio.conf.AlluxioConfiguration):java.lang.Object","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String Command.getCommandName()` of un-annotated interface `alluxio.cli.Command`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/LsCommand.java","tnLine":317,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.LsCommand.validateArgs(org.apache.commons.cli.CommandLine):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void LRFUEvictor.onRemoveBlockFromIterator(long)` mutates container `this.mBlockIdToCRFValue` via call to `remove` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"core/server/worker/src/main/java/alluxio/worker/block/evictor/LRFUEvictor.java","tnLine":170,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.worker.block.evictor.LRFUEvictor.onRemoveBlockFromIterator(long):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.error(String)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/server/common/src/main/java/alluxio/MasterStorageTierAssoc.java","tnLine":30,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.MasterStorageTierAssoc.<init>()","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `long InodeDirectoryIdGenerator.getNewDirectoryId(JournalContext)` indirectly reads with synchronization from `this.mNextDirectoryId.mSequenceNumber`. Potentially races with unsynchronized write in method `InodeDirectoryIdGenerator.processJournalEntry(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/server/master/src/main/java/alluxio/master/file/meta/InodeDirectoryIdGenerator.java","tnLine":60,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.file.meta.InodeDirectoryIdGenerator.getNewDirectoryId(alluxio.master.journal.JournalContext):long","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `pMode.getOtherBits()` could be null and is dereferenced at line 243.","tnFile":"core/base/src/main/java/alluxio/security/authorization/Mode.java","tnLine":243,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.security.authorization.Mode.fromProto(alluxio.grpc.PMode):alluxio.security.authorization.Mode","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void AlluxioLogServerProcess.start()` writes to field `this.mServerSocket` outside of synchronization.\n Reporting because this access may occur on a background thread.","tnFile":"logserver/src/main/java/alluxio/logserver/AlluxioLogServerProcess.java","tnLine":91,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.logserver.AlluxioLogServerProcess.start():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `UserState UserStateFactory.create(Subject,AlluxioConfiguration,boolean)` of un-annotated interface `alluxio.security.user.UserStateFactory`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/MkdirCommand.java","tnLine":40,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.MkdirCommand.<init>(alluxio.client.file.FileSystemContext)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.error(String)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/server/worker/src/main/java/alluxio/worker/block/meta/AbstractBlockMeta.java","tnLine":44,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.worker.block.meta.AbstractBlockMeta.tempPath(alluxio.worker.block.meta.StorageDir,long,long):java.lang.String","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"RESOURCE_LEAK","tnDesc":"resource of type `java.lang.Process` acquired by call to `exec(...)` at line 136 is not released after line 137.","tnFile":"core/server/common/src/main/java/alluxio/cli/validation/ClusterConfConsistencyValidationTask.java","tnLine":137,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.validation.ClusterConfConsistencyValidationTask.getNodeConf(java.lang.String):java.util.Properties","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `__new(alluxio.concurrent.ManagedBlockingUfsForwarder$35).get()` could be null and is dereferenced at line 456.","tnFile":"core/common/src/main/java/alluxio/concurrent/ManagedBlockingUfsForwarder.java","tnLine":456,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.ManagedBlockingUfsForwarder.renameRenamableDirectory(java.lang.String,java.lang.String):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.warn(String)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/util/IdUtils.java","tnLine":66,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.util.IdUtils.fileIdFromBlockId(long):long","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void JobMasterClient.close()` of un-annotated interface `alluxio.client.job.JobMasterClient`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"job/client/src/main/java/alluxio/client/job/JobContext.java","tnLine":80,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.client.job.JobContext.close():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `ExecutorService ExecutorServiceFactory.create()` of un-annotated interface `alluxio.util.executor.ExecutorServiceFactory`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.underfs.ObjectUnderFileSystem` is annotated `@ThreadSafe`.","tnFile":"underfs/kodo/src/main/java/alluxio/underfs/kodo/KodoUnderFileSystem.java","tnLine":62,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.kodo.KodoUnderFileSystem.<init>(alluxio.AlluxioURI,alluxio.underfs.kodo.KodoClient,alluxio.underfs.UnderFileSystemConfiguration)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `MountPointInfo MountInfo.toMountPointInfo()` indirectly writes to field `this.mUfsUri.mUriString` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/server/master/src/main/java/alluxio/master/file/meta/options/MountInfo.java","tnLine":87,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.file.meta.options.MountInfo.toMountPointInfo():alluxio.wire.MountPointInfo","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object BaseFileSystem$RpcCallable.call(Object)` of un-annotated interface `alluxio.client.file.BaseFileSystem$RpcCallable`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/client/fs/src/main/java/alluxio/client/file/BaseFileSystem.java","tnLine":437,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.client.file.BaseFileSystem.rename(alluxio.AlluxioURI,alluxio.AlluxioURI,alluxio.grpc.RenamePOptions):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `taskInfo.getStatus()` could be null and is dereferenced by call to `fromProto(...)` at line 67.","tnFile":"job/server/src/main/java/alluxio/master/job/ProtoUtils.java","tnLine":67,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.job.ProtoUtils.fromProto(alluxio.proto.journal.Job$TaskInfo):alluxio.job.wire.TaskInfo","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.error(String)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"job/server/src/main/java/alluxio/master/job/JobMaster.java","tnLine":106,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.job.JobMaster.<init>(alluxio.master.MasterContext,alluxio.client.file.FileSystem,alluxio.client.file.FileSystemContext,alluxio.underfs.UfsManager)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object `ufsUri` last assigned on line 144 could be null and is dereferenced at line 165.","tnFile":"core/server/master/src/main/java/alluxio/master/file/UfsSyncChecker.java","tnLine":165,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.file.UfsSyncChecker.getChildrenInUFS(alluxio.AlluxioURI):alluxio.underfs.UfsStatus[]","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void RaftPrimarySelector.init(CopycatServer)` writes to field `this.mServer` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/server/common/src/main/java/alluxio/master/journal/raft/RaftPrimarySelector.java","tnLine":41,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.journal.raft.RaftPrimarySelector.init(io.atomix.copycat.server.CopycatServer):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `int AlluxioConfiguration.getInt(PropertyKey)` of un-annotated interface `alluxio.conf.AlluxioConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"job/client/src/main/java/alluxio/client/job/JobMasterClientPool.java","tnLine":40,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.client.job.JobMasterClientPool.<init>(alluxio.worker.job.JobMasterClientContext)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object `ufs` last assigned on line 1892 could be null and is dereferenced at line 1896.","tnFile":"core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java","tnLine":1896,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.file.DefaultFileSystemMaster.createDirectoryInternal(alluxio.master.file.RpcContext,alluxio.master.file.meta.LockedInodePath,alluxio.master.file.contexts.CreateDirectoryContext):java.util.List","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `int ChownCommand.run(CommandLine)` writes to field `this.mGroup` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"shell/src/main/java/alluxio/cli/fs/command/ChownCommand.java","tnLine":126,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.ChownCommand.run(org.apache.commons.cli.CommandLine):int","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `MountPointInfo MountInfo.toDisplayMountPointInfo()` indirectly writes to field `this.mUfsUri.mUriString` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/server/master/src/main/java/alluxio/master/file/meta/options/MountInfo.java","tnLine":99,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.file.meta.options.MountInfo.toDisplayMountPointInfo():alluxio.wire.MountPointInfo","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object BaseFileSystem$RpcCallable.call(Object)` of un-annotated interface `alluxio.client.file.BaseFileSystem$RpcCallable`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/client/fs/src/main/java/alluxio/client/file/BaseFileSystem.java","tnLine":349,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.client.file.BaseFileSystem.mount(alluxio.AlluxioURI,alluxio.AlluxioURI,alluxio.grpc.MountPOptions):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `boolean ServerConfiguration.isSet(PropertyKey)` reads without synchronization from `conf.ServerConfiguration.sConf`. Potentially races with write in method `ServerConfiguration.loadClusterDefaultsIfNotLoaded(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"core/server/common/src/main/java/alluxio/conf/ServerConfiguration.java","tnLine":175,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.conf.ServerConfiguration.isSet(alluxio.conf.PropertyKey):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object UnderFileSystemWithLogging$UfsCallable.call()` of un-annotated interface `alluxio.underfs.UnderFileSystemWithLogging$UfsCallable`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.underfs.UnderFileSystem` is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/underfs/UnderFileSystemWithLogging.java","tnLine":460,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.UnderFileSystemWithLogging.getSpace(java.lang.String,alluxio.underfs.UnderFileSystem$SpaceType):long","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `Object ForkJoinTask.join()` indirectly writes to field `w.top` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"core/common/src/main/java/alluxio/concurrent/jsr/ForkJoinTask.java","tnLine":899,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.jsr.ForkJoinTask.join():java.lang.Object","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object UnderFileSystemWithLogging$UfsCallable.call()` of un-annotated interface `alluxio.underfs.UnderFileSystemWithLogging$UfsCallable`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.underfs.UnderFileSystem` is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/underfs/UnderFileSystemWithLogging.java","tnLine":160,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.UnderFileSystemWithLogging.create(java.lang.String,alluxio.underfs.options.CreateOptions):java.io.OutputStream","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void JournalCrashTest$ClientThread.run()` indirectly writes to field `bos.mClosed` outside of synchronization.\n Reporting because this access may occur on a background thread.","tnFile":"examples/src/main/java/alluxio/cli/JournalCrashTest.java","tnLine":128,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.JournalCrashTest$ClientThread.run():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `long AlluxioConfiguration.getMs(PropertyKey)` of un-annotated interface `alluxio.conf.AlluxioConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/client/fs/src/main/java/alluxio/client/block/stream/BlockWorkerClientPool.java","tnLine":92,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.client.block.stream.BlockWorkerClientPool.shouldGc(alluxio.resource.DynamicResourcePool$ResourceInternal):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String Command.getCommandName()` of un-annotated interface `alluxio.cli.Command`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/StatCommand.java","tnLine":123,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.StatCommand.validateArgs(org.apache.commons.cli.CommandLine):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `UserState UserStateFactory.create(Subject,AlluxioConfiguration,boolean)` of un-annotated interface `alluxio.security.user.UserStateFactory`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.master.MasterInquireClient` is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/master/PollingMasterInquireClient.java","tnLine":62,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.PollingMasterInquireClient.<init>(java.util.List,alluxio.conf.AlluxioConfiguration)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void AbstractClient.beforeConnect()` reads without synchronization from `this.mAddress`. Potentially races with write in method `AbstractClient.retryRPC(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/common/src/main/java/alluxio/AbstractClient.java","tnLine":166,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.AbstractClient.beforeConnect():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void FileSystem.rename(AlluxioURI,AlluxioURI)` of un-annotated interface `alluxio.client.file.FileSystem`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"integration/fuse/src/main/java/alluxio/fuse/AlluxioFuseFileSystem.java","tnLine":602,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.fuse.AlluxioFuseFileSystem.rename(java.lang.String,java.lang.String):int","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.error(String)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"underfs/oss/src/main/java/alluxio/underfs/oss/OSSUnderFileSystem.java","tnLine":143,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.oss.OSSUnderFileSystem.createObject(java.lang.String):java.io.OutputStream","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `HttpConnectionManagerParams HttpConnectionManager.getParams()` of un-annotated interface `org.apache.commons.httpclient.HttpConnectionManager`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"underfs/web/src/main/java/alluxio/underfs/web/WebUnderFileSystem.java","tnLine":315,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.web.WebUnderFileSystem.open(java.lang.String,alluxio.underfs.options.OpenOptions):java.io.InputStream","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object UnderFileSystemWithLogging$UfsCallable.call()` of un-annotated interface `alluxio.underfs.UnderFileSystemWithLogging$UfsCallable`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.underfs.UnderFileSystem` is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/underfs/UnderFileSystemWithLogging.java","tnLine":760,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.UnderFileSystemWithLogging.renameRenamableFile(java.lang.String,java.lang.String):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String Command.getCommandName()` of un-annotated interface `alluxio.cli.Command`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/SetReplicationCommand.java","tnLine":67,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.SetReplicationCommand.validateArgs(org.apache.commons.cli.CommandLine):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void ReadRequestContext.setMeter(Meter)` writes to field `this.mMeter` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/server/worker/src/main/java/alluxio/worker/grpc/ReadRequestContext.java","tnLine":238,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.worker.grpc.ReadRequestContext.setMeter(com.codahale.metrics.Meter):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.error(String)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/conf/PropertyKey.java","tnLine":4513,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.conf.PropertyKey.fromString(java.lang.String):alluxio.conf.PropertyKey","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.error(String)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"integration/fuse/src/main/java/alluxio/fuse/AlluxioFuseFileSystem.java","tnLine":480,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.fuse.AlluxioFuseFileSystem.read(java.lang.String,jnr.ffi.Pointer,long,long,ru.serce.jnrfuse.struct.FuseFileInfo):int","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `boolean PropertyKey.isDeprecated(String)` indirectly writes to field `conf.PropertyKey.DEPRECATED_CHECKER.mAnnotatedKeys` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/common/src/main/java/alluxio/conf/PropertyKey.java","tnLine":4778,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.conf.PropertyKey.isDeprecated(java.lang.String):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.error(String)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"underfs/web/src/main/java/alluxio/underfs/web/WebUnderFileSystem.java","tnLine":297,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.web.WebUnderFileSystem.listStatus(java.lang.String):alluxio.underfs.UfsStatus[]","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void UfsJournal.start()` indirectly reads with synchronization from container `conf.PropertyKey.DEFAULT_ALIAS_MAP` via call to `get`. Potentially races with unsynchronized write in method `UfsJournal(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/server/common/src/main/java/alluxio/master/journal/ufs/UfsJournal.java","tnLine":206,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.journal.ufs.UfsJournal.start():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"UNSAFE_GUARDED_BY_ACCESS","tnDesc":"The field `alluxio.worker.block.UfsInputStreamManager.mUnderFileInputStreamCache` is annotated with `@GuardedBy(\"mFileToInputStreamIds\")`, but the lock `mFileToInputStreamIds` is not held during the access to the field at line 168. Since the current method is non-private, it can be called from outside the current class without synchronization. Consider wrapping the access in a `synchronized(mFileToInputStreamIds)` block or making the method private.","tnFile":"core/server/worker/src/main/java/alluxio/worker/block/UfsInputStreamManager.java","tnLine":168,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.worker.block.UfsInputStreamManager.invalidate(alluxio.worker.block.CachedSeekableInputStream):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String URI.getPath()` of un-annotated interface `alluxio.uri.URI`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"underfs/local/src/main/java/alluxio/underfs/local/LocalUnderFileSystem.java","tnLine":268,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.local.LocalUnderFileSystem.isDirectory(java.lang.String):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Enum AlluxioConfiguration.getEnum(PropertyKey,Class)` of un-annotated interface `alluxio.conf.AlluxioConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/server/master/src/main/java/alluxio/master/file/FileSystemMasterOptions.java","tnLine":31,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.file.FileSystemMasterOptions.completeFileDefaults():alluxio.grpc.CompleteFilePOptions","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void AbstractClient.checkVersion(long)` writes to field `this.mServiceVersion` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/common/src/main/java/alluxio/AbstractClient.java","tnLine":141,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.AbstractClient.checkVersion(long):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void HeapBlockStore.removeBlock(long)` mutates container `this.mBlocks` via call to `remove` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/server/master/src/main/java/alluxio/master/metastore/heap/HeapBlockStore.java","tnLine":55,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.metastore.heap.HeapBlockStore.removeBlock(long):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object `modeGroup.mGroupBits` last assigned on line 141 could be null and is dereferenced by call to `toShort()` at line 143.","tnFile":"core/base/src/main/java/alluxio/security/authorization/DefaultAccessControlList.java","tnLine":143,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.security.authorization.DefaultAccessControlList.removeEntry(alluxio.security.authorization.AclEntry):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `boolean ForkJoinPool$ManagedBlocker.block()` of un-annotated interface `alluxio.concurrent.jsr.ForkJoinPool$ManagedBlocker`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.underfs.UnderFileSystem` is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/concurrent/ManagedBlockingUfsForwarder.java","tnLine":426,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.ManagedBlockingUfsForwarder.openExistingFile(java.lang.String):java.io.InputStream","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Optional PathConfiguration.getConfiguration(AlluxioURI,PropertyKey)` of un-annotated interface `alluxio.conf.path.PathConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/conf/path/SpecificPathConfiguration.java","tnLine":148,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.conf.path.SpecificPathConfiguration.getDuration(alluxio.conf.PropertyKey):java.time.Duration","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `pAclEntry.getType()` could be null and is dereferenced by call to `fromProto(...)` at line 124.","tnFile":"core/common/src/main/java/alluxio/grpc/GrpcUtils.java","tnLine":124,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.grpc.GrpcUtils.fromProto(alluxio.grpc.PAclEntry):alluxio.security.authorization.AclEntry","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `options.getUfsMode()` could be null and is dereferenced at line 432.","tnFile":"core/server/master/src/main/java/alluxio/master/file/FileSystemMasterClientServiceHandler.java","tnLine":432,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.file.FileSystemMasterClientServiceHandler.lambda$updateUfsMode$20(alluxio.grpc.UpdateUfsModePOptions,java.lang.String):alluxio.grpc.UpdateUfsModePResponse","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `GroupMappingService GroupMappingService$Factory.get(AlluxioConfiguration)` reads without synchronization from `group.GroupMappingService$Factory.sCachedGroupMapping`. Potentially races with write in method `GroupMappingService$Factory.get(...)`.\n Reporting because this access may occur on a background thread.","tnFile":"core/common/src/main/java/alluxio/security/group/GroupMappingService.java","tnLine":67,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.security.group.GroupMappingService$Factory.get(alluxio.conf.AlluxioConfiguration):alluxio.security.group.GroupMappingService","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object `statuses` could be null and is dereferenced at line 161.","tnFile":"examples/src/main/java/alluxio/cli/UnderFileSystemContractTest.java","tnLine":161,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.UnderFileSystemContractTest.cleanupUfs(java.lang.String):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object BaseFileSystem$RpcCallable.call(Object)` of un-annotated interface `alluxio.client.file.BaseFileSystem$RpcCallable`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/client/fs/src/main/java/alluxio/client/file/BaseFileSystem.java","tnLine":429,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.client.file.BaseFileSystem.rename(alluxio.AlluxioURI,alluxio.AlluxioURI):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `int AlluxioConfiguration.getInt(PropertyKey)` of un-annotated interface `alluxio.conf.AlluxioConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/client/fs/src/main/java/alluxio/client/block/BlockMasterClientPool.java","tnLine":42,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.client.block.BlockMasterClientPool.<init>(alluxio.master.MasterClientContext)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `UserState UserStateFactory.create(Subject,AlluxioConfiguration,boolean)` of un-annotated interface `alluxio.security.user.UserStateFactory`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/UpdateMountCommand.java","tnLine":66,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.UpdateMountCommand.<init>(alluxio.client.file.FileSystemContext)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `pEntry.getType()` could be null and is dereferenced by call to `fromProto(...)` at line 380.","tnFile":"core/common/src/main/java/alluxio/util/proto/ProtoUtils.java","tnLine":380,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.util.proto.ProtoUtils.fromProto(alluxio.proto.shared.Acl$AclEntry):alluxio.security.authorization.AclEntry","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String Command.getCommandName()` of un-annotated interface `alluxio.cli.Command`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/FileSystemShellUtils.java","tnLine":265,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.FileSystemShellUtils.loadCommands(alluxio.client.file.FileSystemContext):java.util.Map","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `__new(alluxio.concurrent.ManagedBlockingUfsForwarder$24).get()` could be null and is dereferenced at line 336.","tnFile":"core/common/src/main/java/alluxio/concurrent/ManagedBlockingUfsForwarder.java","tnLine":336,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.ManagedBlockingUfsForwarder.isExistingDirectory(java.lang.String):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"UNSAFE_GUARDED_BY_ACCESS","tnDesc":"The field `alluxio.metrics.MetricsSystem.sSinks` is annotated with `@GuardedBy(\"MetricsSystem\")`, but the lock `MetricsSystem` is not held during the access to the field at line 171. Since the current method is non-private, it can be called from outside the current class without synchronization. Consider wrapping the access in a `synchronized(MetricsSystem)` block or making the method private.","tnFile":"core/common/src/main/java/alluxio/metrics/MetricsSystem.java","tnLine":171,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.metrics.MetricsSystem.startSinksFromConfig(alluxio.metrics.MetricsConfig):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void FileSystem.startSync(AlluxioURI)` of un-annotated interface `alluxio.client.file.FileSystem`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/StartSyncCommand.java","tnLine":51,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.StartSyncCommand.runPlainPath(alluxio.AlluxioURI,org.apache.commons.cli.CommandLine):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String AlluxioConfiguration.get(PropertyKey)` of un-annotated interface `alluxio.conf.AlluxioConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"underfs/local/src/main/java/alluxio/underfs/local/LocalUnderFileSystem.java","tnLine":204,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.local.LocalUnderFileSystem.getFileLocations(java.lang.String,alluxio.underfs.options.FileLocationOptions):java.util.List","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `AlluxioProperties AlluxioConfiguration.copyProperties()` of un-annotated interface `alluxio.conf.AlluxioConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/server/common/src/main/java/alluxio/master/journalv0/ufs/UfsJournal.java","tnLine":128,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.journalv0.ufs.UfsJournal.getReader():alluxio.master.journalv0.JournalReader","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"RESOURCE_LEAK","tnDesc":"resource of type `alluxio.master.journal.checkpoint.CheckpointOutputStream` acquired by call to `new()` at line 131 is not released after line 138.","tnFile":"core/server/master/src/main/java/alluxio/master/metastore/heap/HeapInodeStore.java","tnLine":138,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.metastore.heap.HeapInodeStore.writeToCheckpoint(java.io.OutputStream):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object BaseFileSystem$RpcCallable.call(Object)` of un-annotated interface `alluxio.client.file.BaseFileSystem$RpcCallable`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/client/fs/src/main/java/alluxio/client/file/BaseFileSystem.java","tnLine":245,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.client.file.BaseFileSystem.free(alluxio.AlluxioURI):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Optional PathMatcher.match(AlluxioURI)` of un-annotated interface `alluxio.conf.path.PathMatcher`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/conf/path/PrefixPathConfiguration.java","tnLine":84,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.conf.path.PrefixPathConfiguration.getPropertyKeys(alluxio.AlluxioURI):java.util.Set","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object UnderFileSystemWithLogging$UfsCallable.call()` of un-annotated interface `alluxio.underfs.UnderFileSystemWithLogging$UfsCallable`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.underfs.UnderFileSystem` is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/underfs/UnderFileSystemWithLogging.java","tnLine":191,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.UnderFileSystemWithLogging.createNonexistingFile(java.lang.String,alluxio.underfs.options.CreateOptions):java.io.OutputStream","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"RESOURCE_LEAK","tnDesc":"resource of type `alluxio.master.journal.checkpoint.CheckpointInputStream` acquired by call to `CheckpointInputStream(...)` at line 84 is not released after line 84.\n**Note**: potential exception at line 84","tnFile":"core/server/common/src/main/java/alluxio/master/journal/checkpoint/CompoundCheckpointFormat.java","tnLine":84,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.journal.checkpoint.CompoundCheckpointFormat$CompoundCheckpointReader.nextCheckpoint():java.util.Optional","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object ObjectUnderFileSystem$ObjectStoreOperation.apply()` of un-annotated interface `alluxio.underfs.ObjectUnderFileSystem$ObjectStoreOperation`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/underfs/ObjectUnderFileSystem.java","tnLine":543,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.ObjectUnderFileSystem.getExistingFileStatus(java.lang.String):alluxio.underfs.UfsFileStatus","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String URI.getPath()` of un-annotated interface `alluxio.uri.URI`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/FileSystemShellUtils.java","tnLine":182,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.FileSystemShellUtils.getFiles(java.lang.String):java.util.List","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `UserState UserStateFactory.create(Subject,AlluxioConfiguration,boolean)` of un-annotated interface `alluxio.security.user.UserStateFactory`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.cli.fs.command.AbstractFileSystemCommand` is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/CheckConsistencyCommand.java","tnLine":51,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.CheckConsistencyCommand.<init>(alluxio.client.file.FileSystemContext)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void SaslClientHandler.close()` of un-annotated interface `alluxio.security.authentication.SaslClientHandler`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class io.grpc.Channel` is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/security/authentication/ChannelAuthenticator.java","tnLine":140,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.security.authentication.ChannelAuthenticator$DefaultAuthenticatedChannel.<init>(alluxio.security.authentication.ChannelAuthenticator,alluxio.grpc.GrpcServerAddress,io.grpc.ManagedChannel)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `UserState UserStateFactory.create(Subject,AlluxioConfiguration,boolean)` of un-annotated interface `alluxio.security.user.UserStateFactory`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/LeaderCommand.java","tnLine":41,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.LeaderCommand.<init>(alluxio.client.file.FileSystemContext)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"RESOURCE_LEAK","tnDesc":"resource of type `alluxio.worker.job.command.CommandHandlingExecutor` acquired by call to `new()` at line 107 is not released after line 107.","tnFile":"job/server/src/main/java/alluxio/worker/JobWorker.java","tnLine":107,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.worker.JobWorker.start(alluxio.wire.WorkerNetAddress):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void ForkJoinPool.execute(ForkJoinTask)` indirectly reads without synchronization from `ws.[_]`. Potentially races with write in method `ForkJoinPool.externalPush(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"core/common/src/main/java/alluxio/concurrent/jsr/ForkJoinPool.java","tnLine":1851,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.jsr.ForkJoinPool.execute(alluxio.concurrent.jsr.ForkJoinTask):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object BaseFileSystem$RpcCallable.call(Object)` of un-annotated interface `alluxio.client.file.BaseFileSystem$RpcCallable`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/client/fs/src/main/java/alluxio/client/file/BaseFileSystem.java","tnLine":173,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.client.file.BaseFileSystem.createFile(alluxio.AlluxioURI):alluxio.client.file.FileOutStream","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"UNSAFE_GUARDED_BY_ACCESS","tnDesc":"The field `alluxio.metrics.MetricsSystem.sSinks` is annotated with `@GuardedBy(\"MetricsSystem\")`, but the lock `MetricsSystem` is not held during the access to the field at line 188. Since the current method is non-private, it can be called from outside the current class without synchronization. Consider wrapping the access in a `synchronized(MetricsSystem)` block or making the method private.","tnFile":"core/common/src/main/java/alluxio/metrics/MetricsSystem.java","tnLine":188,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.metrics.MetricsSystem.stopSinks():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void AlluxioLogServerProcess.start()` reads without synchronization from `this.mServerSocket`. Potentially races with write in method `AlluxioLogServerProcess.start()`.\n Reporting because this access may occur on a background thread.","tnFile":"logserver/src/main/java/alluxio/logserver/AlluxioLogServerProcess.java","tnLine":98,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.logserver.AlluxioLogServerProcess.start():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object `results` last assigned on line 666 could be null and is dereferenced at line 667.","tnFile":"examples/src/main/java/alluxio/examples/UnderFileSystemCommonOperations.java","tnLine":667,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.examples.UnderFileSystemCommonOperations.listLargeDirectoryTest():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Enum AlluxioConfiguration.getEnum(PropertyKey,Class)` of un-annotated interface `alluxio.conf.AlluxioConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/util/network/NettyUtils.java","tnLine":208,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.util.network.NettyUtils.getUserChannel(alluxio.conf.AlluxioConfiguration):alluxio.network.ChannelType","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String Command.getCommandName()` of un-annotated interface `alluxio.cli.Command`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/server/common/src/main/java/alluxio/cli/extensions/command/LsCommand.java","tnLine":49,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.extensions.command.LsCommand.validateArgs(org.apache.commons.cli.CommandLine):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void CachingInodeStore.writeNewInode(MutableInode)` indirectly reads with synchronization from `this.mListingCache.mEvictionHead`. Potentially races with unsynchronized write in method `CachingInodeStore.restoreFromCheckpoint(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/server/master/src/main/java/alluxio/master/metastore/caching/CachingInodeStore.java","tnLine":163,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.metastore.caching.CachingInodeStore.writeNewInode(alluxio.master.file.meta.MutableInode):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `java.lang.String[] ObjectUnderFileSystem$ObjectListingChunk.getCommonPrefixes()` of un-annotated interface `alluxio.underfs.ObjectUnderFileSystem$ObjectListingChunk`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/underfs/ObjectUnderFileSystem.java","tnLine":489,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.ObjectUnderFileSystem.getDirectoryStatus(java.lang.String):alluxio.underfs.UfsDirectoryStatus","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `InstancedConfiguration HadoopConfigurationUtils.mergeHadoopConfiguration(Configuration,AlluxioProperties)` indirectly reads without synchronization from container `conf.PropertyKey.DEFAULT_ALIAS_MAP` via call to `containsKey`. Potentially races with write in method `HadoopConfigurationUtils.mergeHadoopConfiguration(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/client/hdfs/src/main/java/alluxio/hadoop/HadoopConfigurationUtils.java","tnLine":52,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.hadoop.HadoopConfigurationUtils.mergeHadoopConfiguration(org.apache.hadoop.conf.Configuration,alluxio.conf.AlluxioProperties):alluxio.conf.InstancedConfiguration","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `boolean AlluxioConfiguration.getBoolean(PropertyKey)` of un-annotated interface `alluxio.conf.AlluxioConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/util/SecurityUtils.java","tnLine":66,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.util.SecurityUtils.isAuthorizationEnabled(alluxio.conf.AlluxioConfiguration):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `Mode ModeUtils.applyFileUMask(Mode,String)` indirectly writes to field `mode.mGroupBits` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/common/src/main/java/alluxio/util/ModeUtils.java","tnLine":40,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.util.ModeUtils.applyFileUMask(alluxio.security.authorization.Mode,java.lang.String):alluxio.security.authorization.Mode","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String Command.getCommandName()` of un-annotated interface `alluxio.cli.Command`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/CatCommand.java","tnLine":78,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.CatCommand.validateArgs(org.apache.commons.cli.CommandLine):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String URI.getPath()` of un-annotated interface `alluxio.uri.URI`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"underfs/local/src/main/java/alluxio/underfs/local/LocalUnderFileSystem.java","tnLine":162,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.local.LocalUnderFileSystem.exists(java.lang.String):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void MiniBenchmark.main(java.lang.String[])` reads without synchronization from `cli.MiniBenchmark.sType`. Potentially races with write in method `MiniBenchmark.main(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"examples/src/main/java/alluxio/cli/MiniBenchmark.java","tnLine":142,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.MiniBenchmark.main(java.lang.String[]):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void JobMasterClient.close()` of un-annotated interface `alluxio.client.job.JobMasterClient`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/DistributedLoadCommand.java","tnLine":78,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.DistributedLoadCommand.run(org.apache.commons.cli.CommandLine):int","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `URI URI.createNewPath(String,boolean)` of un-annotated interface `alluxio.uri.URI`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/base/src/main/java/alluxio/AlluxioURI.java","tnLine":263,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.AlluxioURI.getParent():alluxio.AlluxioURI","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `ExecutorService ExecutorServiceFactory.create()` of un-annotated interface `alluxio.util.executor.ExecutorServiceFactory`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.underfs.ObjectUnderFileSystem` is annotated `@ThreadSafe`.","tnFile":"underfs/kodo/src/main/java/alluxio/underfs/kodo/KodoUnderFileSystem.java","tnLine":87,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.kodo.KodoUnderFileSystem.creatInstance(alluxio.AlluxioURI,alluxio.underfs.UnderFileSystemConfiguration):alluxio.underfs.kodo.KodoUnderFileSystem","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.debug(String,Object,Object)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/server/master/src/main/java/alluxio/master/metrics/MetricsStore.java","tnLine":114,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.metrics.MetricsStore.putClientMetrics(java.lang.String,java.lang.String,java.util.List):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `UserState UserStateFactory.create(Subject,AlluxioConfiguration,boolean)` of un-annotated interface `alluxio.security.user.UserStateFactory`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"job/server/src/main/java/alluxio/underfs/JobUfsManager.java","tnLine":49,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.JobUfsManager.<init>()","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object UnderFileSystemWithLogging$UfsCallable.call()` of un-annotated interface `alluxio.underfs.UnderFileSystemWithLogging$UfsCallable`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.underfs.UnderFileSystem` is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/underfs/UnderFileSystemWithLogging.java","tnLine":113,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.UnderFileSystemWithLogging.connectFromMaster(java.lang.String):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"RESOURCE_LEAK","tnDesc":"resource of type `org.rocksdb.ReadOptions` acquired by call to `new()` at line 185 is not released after line 185.","tnFile":"core/server/master/src/main/java/alluxio/master/metastore/rocks/RocksBlockStore.java","tnLine":185,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.metastore.rocks.RocksBlockStore.iterator():java.util.Iterator","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"RESOURCE_LEAK","tnDesc":"resource of type `alluxio.master.journal.checkpoint.CheckpointOutputStream` acquired by call to `new()` at line 39 is not released after line 41.","tnFile":"core/server/master/src/main/java/alluxio/master/file/meta/InodeCounter.java","tnLine":41,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.file.meta.InodeCounter.writeToCheckpoint(java.io.OutputStream):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `boolean ReadRequestContext.isDataReaderActive()` reads without synchronization from `this.mDataReaderActive`. Potentially races with write in method `ReadRequestContext.setDataReaderActive(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/server/worker/src/main/java/alluxio/worker/grpc/ReadRequestContext.java","tnLine":105,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.worker.grpc.ReadRequestContext.isDataReaderActive():boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `UnderFileSystemConfiguration UfsJournal.getJournalUfsConf()` indirectly reads without synchronization from container `conf.PropertyKey.DEFAULT_KEYS_MAP` via call to `values`. Potentially races with write in method `UfsJournal(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/server/common/src/main/java/alluxio/master/journal/ufs/UfsJournal.java","tnLine":121,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.journal.ufs.UfsJournal.getJournalUfsConf():alluxio.underfs.UnderFileSystemConfiguration","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"UNSAFE_GUARDED_BY_ACCESS","tnDesc":"The field `alluxio.metrics.MetricsSystem.sSinks` is annotated with `@GuardedBy(\"MetricsSystem\")`, but the lock `MetricsSystem` is not held during the access to the field at line 197. Since the current method is non-private, it can be called from outside the current class without synchronization. Consider wrapping the access in a `synchronized(MetricsSystem)` block or making the method private.","tnFile":"core/common/src/main/java/alluxio/metrics/MetricsSystem.java","tnLine":197,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.metrics.MetricsSystem.getNumSinks():int","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object ObjectUnderFileSystem$ObjectStoreOperation.apply()` of un-annotated interface `alluxio.underfs.ObjectUnderFileSystem$ObjectStoreOperation`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/underfs/ObjectUnderFileSystem.java","tnLine":702,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.ObjectUnderFileSystem.renameRenamableDirectory(java.lang.String,java.lang.String):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `boolean ForkJoinPool$ManagedBlocker.block()` of un-annotated interface `alluxio.concurrent.jsr.ForkJoinPool$ManagedBlocker`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.underfs.UnderFileSystem` is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/concurrent/ManagedBlockingUfsForwarder.java","tnLine":134,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.ManagedBlockingUfsForwarder.deleteDirectory(java.lang.String,alluxio.underfs.options.DeleteOptions):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"UNSAFE_GUARDED_BY_ACCESS","tnDesc":"The field `alluxio.metrics.MetricsSystem.sSinks` is annotated with `@GuardedBy(\"MetricsSystem\")`, but the lock `MetricsSystem` is not held during the access to the field at line 135. Since the current method is non-private, it can be called from outside the current class without synchronization. Consider wrapping the access in a `synchronized(MetricsSystem)` block or making the method private.","tnFile":"core/common/src/main/java/alluxio/metrics/MetricsSystem.java","tnLine":135,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.metrics.MetricsSystem.startSinks(java.lang.String):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.error(String)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/server/master/src/main/java/alluxio/master/block/BlockMasterFactory.java","tnLine":51,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.block.BlockMasterFactory.create(alluxio.master.MasterRegistry,alluxio.master.CoreMasterContext):alluxio.master.block.BlockMaster","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object BaseFileSystem$RpcCallable.call(Object)` of un-annotated interface `alluxio.client.file.BaseFileSystem$RpcCallable`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/client/fs/src/main/java/alluxio/client/file/BaseFileSystem.java","tnLine":252,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.client.file.BaseFileSystem.free(alluxio.AlluxioURI,alluxio.grpc.FreePOptions):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void SpecificPathConfiguration.validate()` indirectly writes to field `conf.PropertyKey.DEPRECATED_CHECKER.mAnnotatedKeys` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/common/src/main/java/alluxio/conf/path/SpecificPathConfiguration.java","tnLine":187,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.conf.path.SpecificPathConfiguration.validate():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `java.lang.String[] ObjectUnderFileSystem$ObjectListingChunk.getCommonPrefixes()` of un-annotated interface `alluxio.underfs.ObjectUnderFileSystem$ObjectListingChunk`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/underfs/ObjectUnderFileSystem.java","tnLine":967,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.ObjectUnderFileSystem.listInternal(java.lang.String,alluxio.underfs.options.ListOptions):alluxio.underfs.UfsStatus[]","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String URI.getScheme()` of un-annotated interface `alluxio.uri.URI`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/base/src/main/java/alluxio/AlluxioURI.java","tnLine":291,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.AlluxioURI.getScheme():java.lang.String","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `UserState UserStateFactory.create(Subject,AlluxioConfiguration,boolean)` of un-annotated interface `alluxio.security.user.UserStateFactory`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/job/command/StatCommand.java","tnLine":55,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.job.command.StatCommand.<init>(alluxio.client.file.FileSystemContext)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `FileSystem ClientPool.getClient(FileSystemContext)` mutates container `this.mClients` via call to `add` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"minicluster/src/main/java/alluxio/master/ClientPool.java","tnLine":59,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.ClientPool.getClient(alluxio.client.file.FileSystemContext):alluxio.client.file.FileSystem","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `String ServerConfiguration.getOrDefault(PropertyKey,String)` reads without synchronization from `conf.ServerConfiguration.sConf`. Potentially races with write in method `ServerConfiguration.loadClusterDefaultsIfNotLoaded(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"core/server/common/src/main/java/alluxio/conf/ServerConfiguration.java","tnLine":154,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.conf.ServerConfiguration.getOrDefault(alluxio.conf.PropertyKey,java.lang.String):java.lang.String","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `long ServerConfiguration.getLong(PropertyKey)` reads without synchronization from `conf.ServerConfiguration.sConf`. Potentially races with write in method `ServerConfiguration.loadClusterDefaultsIfNotLoaded(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"core/server/common/src/main/java/alluxio/conf/ServerConfiguration.java","tnLine":202,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.conf.ServerConfiguration.getLong(alluxio.conf.PropertyKey):long","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"UNSAFE_GUARDED_BY_ACCESS","tnDesc":"The field `alluxio.master.file.meta.MountTable.mState` is annotated with `@GuardedBy(\"mReadLock,mWriteLock\")`, but the lock `mReadLock,mWriteLock` is not held during the access to the field at line 287. Since the current method is non-private, it can be called from outside the current class without synchronization. Consider wrapping the access in a `synchronized(mReadLock,mWriteLock)` block or making the method private.","tnFile":"core/server/master/src/main/java/alluxio/master/file/meta/MountTable.java","tnLine":287,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.file.meta.MountTable.isMountPoint(alluxio.AlluxioURI):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `AlluxioURI AlluxioURI.join(AlluxioURI)` indirectly writes to field `suffix.mUriString` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/base/src/main/java/alluxio/AlluxioURI.java","tnLine":407,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.AlluxioURI.join(alluxio.AlluxioURI):alluxio.AlluxioURI","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `FileSystemMaster FileSystemMasterFactory.create(MasterRegistry,CoreMasterContext)` indirectly reads without synchronization from container `registry.mRegistry` via call to `get`. Potentially races with write in method `FileSystemMasterFactory.create(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/server/master/src/main/java/alluxio/master/file/FileSystemMasterFactory.java","tnLine":50,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.file.FileSystemMasterFactory.create(alluxio.master.MasterRegistry,alluxio.master.CoreMasterContext):alluxio.master.file.FileSystemMaster","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `int ForkJoinPool.getRunningThreadCount()` reads without synchronization from `this.workQueues`. Potentially races with write in method `ForkJoinPool.registerWorker(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"core/common/src/main/java/alluxio/concurrent/jsr/ForkJoinPool.java","tnLine":1996,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.jsr.ForkJoinPool.getRunningThreadCount():int","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Enum AlluxioConfiguration.getEnum(PropertyKey,Class)` of un-annotated interface `alluxio.conf.AlluxioConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/security/authentication/AuthenticatedClientUser.java","tnLine":120,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.security.authentication.AuthenticatedClientUser.getClientUser(alluxio.conf.AlluxioConfiguration):java.lang.String","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `Object ForkJoinTask.get()` indirectly reads without synchronization from `w.top`. Potentially races with write in method `ForkJoinTask.get(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"core/common/src/main/java/alluxio/concurrent/jsr/ForkJoinTask.java","tnLine":1043,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.jsr.ForkJoinTask.get():java.lang.Object","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String AlluxioConfiguration.get(PropertyKey)` of un-annotated interface `alluxio.conf.AlluxioConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"job/server/src/main/java/alluxio/underfs/JobUfsManager.java","tnLine":55,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.JobUfsManager.connectUfs(alluxio.underfs.UnderFileSystem):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void Registry.stop()` indirectly reads without synchronization from container `this.mRegistry` via call to `values`. Potentially races with write in method `Registry.add(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/server/common/src/main/java/alluxio/Registry.java","tnLine":147,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.Registry.stop():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `int AlluxioFuseFileSystem.write(String,Pointer,long,long,FuseFileInfo)` indirectly reads without synchronization from `oe.mOffset`. Potentially races with write in method `AlluxioFuseFileSystem.write(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"integration/fuse/src/main/java/alluxio/fuse/AlluxioFuseFileSystem.java","tnLine":701,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.fuse.AlluxioFuseFileSystem.write(java.lang.String,jnr.ffi.Pointer,long,long,ru.serce.jnrfuse.struct.FuseFileInfo):int","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `ExecutorService ExecutorServiceFactory.create()` of un-annotated interface `alluxio.util.executor.ExecutorServiceFactory`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"underfs/s3a/src/main/java/alluxio/underfs/s3a/S3AUnderFileSystemFactory.java","tnLine":43,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.s3a.S3AUnderFileSystemFactory.create(java.lang.String,alluxio.underfs.UnderFileSystemConfiguration):alluxio.underfs.UnderFileSystem","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `UserState UserStateFactory.create(Subject,AlluxioConfiguration,boolean)` of un-annotated interface `alluxio.security.user.UserStateFactory`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/DistributedMvCommand.java","tnLine":39,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.DistributedMvCommand.<init>(alluxio.client.file.FileSystemContext)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `long AlluxioConfiguration.getMs(PropertyKey)` of un-annotated interface `alluxio.conf.AlluxioConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/LocationCommand.java","tnLine":54,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.LocationCommand.runPlainPath(alluxio.AlluxioURI,org.apache.commons.cli.CommandLine):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Optional PathConfiguration.getConfiguration(AlluxioURI,PropertyKey)` of un-annotated interface `alluxio.conf.path.PathConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/conf/path/SpecificPathConfiguration.java","tnLine":88,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.conf.path.SpecificPathConfiguration.isSetByUser(alluxio.conf.PropertyKey):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object `ufs` last assigned on line 4455 could be null and is dereferenced at line 4456.","tnFile":"core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java","tnLine":4456,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.file.DefaultFileSystemMaster$Metrics$1.getValue():java.lang.Long","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String Command.getCommandName()` of un-annotated interface `alluxio.cli.Command`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/UnmountCommand.java","tnLine":46,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.UnmountCommand.validateArgs(org.apache.commons.cli.CommandLine):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `ufs.get()` could be null and is dereferenced at line 474.","tnFile":"core/server/master/src/main/java/alluxio/master/file/activesync/ActiveSyncManager.java","tnLine":474,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.file.activesync.ActiveSyncManager.stopSyncPostJournal(alluxio.AlluxioURI):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `String SecurityUtils.getGroupFromGrpcClient(AlluxioConfiguration)` indirectly reads without synchronization from `group.GroupMappingService$Factory.sCachedGroupMapping`. Potentially races with write in method `SecurityUtils.getGroup(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/common/src/main/java/alluxio/util/SecurityUtils.java","tnLine":97,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.util.SecurityUtils.getGroupFromGrpcClient(alluxio.conf.AlluxioConfiguration):java.lang.String","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `boolean ForkJoinPool$ManagedBlocker.block()` of un-annotated interface `alluxio.concurrent.jsr.ForkJoinPool$ManagedBlocker`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.underfs.UnderFileSystem` is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/concurrent/ManagedBlockingUfsForwarder.java","tnLine":174,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.ManagedBlockingUfsForwarder.deleteExistingFile(java.lang.String):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object UnderFileSystemWithLogging$UfsCallable.call()` of un-annotated interface `alluxio.underfs.UnderFileSystemWithLogging$UfsCallable`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.underfs.UnderFileSystem` is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/underfs/UnderFileSystemWithLogging.java","tnLine":525,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.UnderFileSystemWithLogging.isExistingDirectory(java.lang.String):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object ObjectUnderFileSystem$ObjectStoreOperation.apply()` of un-annotated interface `alluxio.underfs.ObjectUnderFileSystem$ObjectStoreOperation`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/underfs/ObjectUnderFileSystem.java","tnLine":387,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.ObjectUnderFileSystem.createNonexistingFile(java.lang.String,alluxio.underfs.options.CreateOptions):java.io.OutputStream","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `taskInfo.getStatus()` could be null and is dereferenced at line 53.","tnFile":"job/common/src/main/java/alluxio/job/wire/TaskInfo.java","tnLine":53,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.job.wire.TaskInfo.<init>(alluxio.grpc.TaskInfo)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `List FileSystem.getSyncPathList()` of un-annotated interface `alluxio.client.file.FileSystem`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.cli.fs.command.AbstractFileSystemCommand` is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/GetSyncPathListCommand.java","tnLine":45,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.GetSyncPathListCommand.run(org.apache.commons.cli.CommandLine):int","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object `ufs` last assigned on line 4314 could be null and is dereferenced at line 4316.","tnFile":"core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java","tnLine":4316,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.file.DefaultFileSystemMaster.checkUfsMode(alluxio.AlluxioURI,alluxio.master.file.DefaultFileSystemMaster$OperationType):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `UserState UserStateFactory.create(Subject,AlluxioConfiguration,boolean)` of un-annotated interface `alluxio.security.user.UserStateFactory`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/server/worker/src/main/java/alluxio/worker/block/BlockMasterClientPool.java","tnLine":45,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.worker.block.BlockMasterClientPool.<init>()","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"RESOURCE_LEAK","tnDesc":"resource of type `java.io.BufferedInputStream` acquired by call to `new()` at line 70 is not released after line 70.","tnFile":"logserver/src/main/java/alluxio/logserver/AlluxioLog4jSocketNode.java","tnLine":70,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.logserver.AlluxioLog4jSocketNode.run():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `String MetricsSystem.stripInstanceAndHost(String)` reads without synchronization from `pieces.[_]`. Potentially races with write in method `MetricsSystem.stripInstanceAndHost(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/common/src/main/java/alluxio/metrics/MetricsSystem.java","tnLine":352,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.metrics.MetricsSystem.stripInstanceAndHost(java.lang.String):java.lang.String","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String AlluxioConfiguration.get(PropertyKey)` of un-annotated interface `alluxio.conf.AlluxioConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/util/network/NettyUtils.java","tnLine":163,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.util.network.NettyUtils.isDomainSocketAccessible(alluxio.wire.WorkerNetAddress,alluxio.conf.AlluxioConfiguration):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `boolean BlockWorkerClient.isHealthy()` of un-annotated interface `alluxio.client.block.stream.BlockWorkerClient`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/client/fs/src/main/java/alluxio/client/block/stream/BlockWorkerClientPool.java","tnLine":86,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.client.block.stream.BlockWorkerClientPool.isHealthy(alluxio.client.block.stream.BlockWorkerClient):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void RetryHandlingJobMasterClient.afterConnect()` reads without synchronization from `this.mChannel`. Potentially races with write in method `RetryHandlingJobMasterClient.heartbeat(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"job/client/src/main/java/alluxio/worker/job/RetryHandlingJobMasterClient.java","tnLine":71,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.worker.job.RetryHandlingJobMasterClient.afterConnect():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"UNSAFE_GUARDED_BY_ACCESS","tnDesc":"The field `alluxio.metrics.MetricsSystem.sSinks` is annotated with `@GuardedBy(\"MetricsSystem\")`, but the lock `MetricsSystem` is not held during the access to the field at line 184. Since the current method is non-private, it can be called from outside the current class without synchronization. Consider wrapping the access in a `synchronized(MetricsSystem)` block or making the method private.","tnFile":"core/common/src/main/java/alluxio/metrics/MetricsSystem.java","tnLine":184,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.metrics.MetricsSystem.stopSinks():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object UnderFileSystemWithLogging$UfsCallable.call()` of un-annotated interface `alluxio.underfs.UnderFileSystemWithLogging$UfsCallable`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.underfs.UnderFileSystem` is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/underfs/UnderFileSystemWithLogging.java","tnLine":730,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.UnderFileSystemWithLogging.renameRenamableDirectory(java.lang.String,java.lang.String):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `ExecutorService ExecutorServiceFactory.create()` of un-annotated interface `alluxio.util.executor.ExecutorServiceFactory`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"underfs/s3a/src/main/java/alluxio/underfs/s3a/S3AUnderFileSystem.java","tnLine":236,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.s3a.S3AUnderFileSystem.<init>(alluxio.AlluxioURI,com.amazonaws.services.s3.AmazonS3Client,java.lang.String,java.util.concurrent.ExecutorService,com.amazonaws.services.s3.transfer.TransferManager,alluxio.underfs.UnderFileSystemConfiguration,boolean)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.debug(String,Object)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"underfs/swift/src/main/java/alluxio/underfs/swift/http/SwiftDirectClient.java","tnLine":51,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.swift.http.SwiftDirectClient.put(org.javaswift.joss.model.Access,java.lang.String):alluxio.underfs.swift.SwiftOutputStream","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void FileSystem.setAttribute(AlluxioURI,SetAttributePOptions)` of un-annotated interface `alluxio.client.file.FileSystem`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/UnsetTtlCommand.java","tnLine":55,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.UnsetTtlCommand.runPlainPath(alluxio.AlluxioURI,org.apache.commons.cli.CommandLine):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `AlluxioProperties AlluxioConfiguration.copyProperties()` of un-annotated interface `alluxio.conf.AlluxioConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/server/common/src/main/java/alluxio/master/journalv0/ufs/UfsJournalWriter.java","tnLine":85,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.journalv0.ufs.UfsJournalWriter.<init>(alluxio.master.journalv0.ufs.UfsJournal)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object BaseFileSystem$RpcCallable.call(Object)` of un-annotated interface `alluxio.client.file.BaseFileSystem$RpcCallable`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/client/fs/src/main/java/alluxio/client/file/BaseFileSystem.java","tnLine":324,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.client.file.BaseFileSystem.listStatus(alluxio.AlluxioURI):java.util.List","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object `ufs` last assigned on line 3241 could be null and is dereferenced at line 3247.","tnFile":"core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java","tnLine":3247,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.file.DefaultFileSystemMaster.populateStatusCache(alluxio.AlluxioURI,alluxio.file.options.DescendantType):java.util.Map","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String AlluxioConfiguration.get(PropertyKey)` of un-annotated interface `alluxio.conf.AlluxioConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/util/network/NetworkAddressUtils.java","tnLine":287,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.util.network.NetworkAddressUtils.getConnectHost(alluxio.util.network.NetworkAddressUtils$ServiceType,alluxio.conf.AlluxioConfiguration):java.lang.String","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object UnderFileSystemWithLogging$UfsCallable.call()` of un-annotated interface `alluxio.underfs.UnderFileSystemWithLogging$UfsCallable`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.underfs.UnderFileSystem` is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/underfs/UnderFileSystemWithLogging.java","tnLine":222,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.UnderFileSystemWithLogging.deleteDirectory(java.lang.String,alluxio.underfs.options.DeleteOptions):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Acl$AccessControlList InodeMeta$InodeOrBuilder.getAccessAcl()` of un-annotated interface `alluxio.proto.meta.InodeMeta$InodeOrBuilder`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/server/master/src/main/java/alluxio/master/metastore/rocks/RocksInodeStore.java","tnLine":339,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.metastore.rocks.RocksInodeStore.toStringEntries():java.lang.String","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `ExecutorService ExecutorServiceFactory.create()` of un-annotated interface `alluxio.util.executor.ExecutorServiceFactory`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"underfs/oss/src/main/java/alluxio/underfs/oss/OSSUnderFileSystemFactory.java","tnLine":31,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.oss.OSSUnderFileSystemFactory.create(java.lang.String,alluxio.conf.AlluxioConfiguration):java.lang.Object","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void ChgrpCommand.runPlainPath(AlluxioURI,CommandLine)` reads without synchronization from `this.mGroup`. Potentially races with write in method `ChgrpCommand.run(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"shell/src/main/java/alluxio/cli/fs/command/ChgrpCommand.java","tnLine":85,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.ChgrpCommand.runPlainPath(alluxio.AlluxioURI,org.apache.commons.cli.CommandLine):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.warn(String)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/util/IdUtils.java","tnLine":54,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.util.IdUtils.createFileId(long):long","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `__new(alluxio.concurrent.ManagedBlockingUfsForwarder$6).get()` could be null and is dereferenced at line 134.","tnFile":"core/common/src/main/java/alluxio/concurrent/ManagedBlockingUfsForwarder.java","tnLine":134,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.ManagedBlockingUfsForwarder.deleteDirectory(java.lang.String,alluxio.underfs.options.DeleteOptions):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `Counter ReadRequestContext.getCounter()` reads without synchronization from `this.mCounter`. Potentially races with write in method `ReadRequestContext.setCounter(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/server/worker/src/main/java/alluxio/worker/grpc/ReadRequestContext.java","tnLine":161,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.worker.grpc.ReadRequestContext.getCounter():com.codahale.metrics.Counter","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Acl$AccessControlList InodeMeta$InodeOrBuilder.getAccessAcl()` of un-annotated interface `alluxio.proto.meta.InodeMeta$InodeOrBuilder`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/server/master/src/main/java/alluxio/master/metastore/rocks/RocksInodeStore.java","tnLine":235,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.metastore.rocks.RocksInodeStore.allInodes():java.util.Set","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"RESOURCE_LEAK","tnDesc":"resource of type `java.lang.Process` acquired by call to `exec(...)` at line 175 is not released after line 178.","tnFile":"examples/src/main/java/alluxio/cli/AlluxioFrameworkIntegrationTest.java","tnLine":178,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.AlluxioFrameworkIntegrationTest.processExists(java.lang.String):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"RESOURCE_LEAK","tnDesc":"resource of type `alluxio.master.journal.checkpoint.CheckpointOutputStream` acquired to `stream` by call to `new()` at line 39 is not released after line 42.\n**Note**: potential exception at line 40","tnFile":"core/server/master/src/main/java/alluxio/master/file/meta/InodeCounter.java","tnLine":42,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.file.meta.InodeCounter.writeToCheckpoint(java.io.OutputStream):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.info(String,Object)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/server/master/src/main/java/alluxio/master/metastore/rocks/RocksInodeStore.java","tnLine":96,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.metastore.rocks.RocksInodeStore.<init>(java.lang.String)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `int URI.compareTo(Object)` of un-annotated interface `alluxio.uri.URI`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/base/src/main/java/alluxio/AlluxioURI.java","tnLine":129,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.AlluxioURI.compareTo(alluxio.AlluxioURI):int","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `uri.getScheme()` could be null and is dereferenced at line 50.","tnFile":"core/server/common/src/main/java/alluxio/underfs/AbstractUfsManager.java","tnLine":50,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.AbstractUfsManager$Key.<init>(alluxio.AlluxioURI,java.util.HashMap)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String Command.getCommandName()` of un-annotated interface `alluxio.cli.Command`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/cli/CommandUtils.java","tnLine":54,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.CommandUtils.loadCommands(java.lang.String,java.lang.Class[],java.lang.Object[]):java.util.Map","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `boolean InodeDirectoryIdGenerator.processJournalEntry(Journal$JournalEntry)` indirectly writes to field `this.mNextDirectoryId.mContainerId` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/server/master/src/main/java/alluxio/master/file/meta/InodeDirectoryIdGenerator.java","tnLine":97,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.file.meta.InodeDirectoryIdGenerator.processJournalEntry(alluxio.proto.journal.Journal$JournalEntry):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `UserState UserStateFactory.create(Subject,AlluxioConfiguration,boolean)` of un-annotated interface `alluxio.security.user.UserStateFactory`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/DistributedCpCommand.java","tnLine":40,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.DistributedCpCommand.<init>(alluxio.client.file.FileSystemContext)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object BaseFileSystem$RpcCallable.call(Object)` of un-annotated interface `alluxio.client.file.BaseFileSystem$RpcCallable`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/client/fs/src/main/java/alluxio/client/file/BaseFileSystem.java","tnLine":385,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.client.file.BaseFileSystem.persist(alluxio.AlluxioURI):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Enum AlluxioConfiguration.getEnum(PropertyKey,Class)` of un-annotated interface `alluxio.conf.AlluxioConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/security/authentication/DefaultAuthenticationServer.java","tnLine":77,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.security.authentication.DefaultAuthenticationServer.<init>(java.lang.String,alluxio.conf.AlluxioConfiguration)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `ExecutorService ExecutorServiceFactory.create()` of un-annotated interface `alluxio.util.executor.ExecutorServiceFactory`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/server/worker/src/main/java/alluxio/worker/block/UfsInputStreamManager.java","tnLine":82,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.worker.block.UfsInputStreamManager.<init>()","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"UNSAFE_GUARDED_BY_ACCESS","tnDesc":"The field `alluxio.network.TieredIdentityFactory.sInstance` is annotated with `@GuardedBy(\"LOCK\")`, but the lock `LOCK` is not held during the access to the field at line 59. Since the current method is non-private, it can be called from outside the current class without synchronization. Consider wrapping the access in a `synchronized(LOCK)` block or making the method private.","tnFile":"core/common/src/main/java/alluxio/network/TieredIdentityFactory.java","tnLine":59,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.network.TieredIdentityFactory.localIdentity(alluxio.conf.AlluxioConfiguration):alluxio.wire.TieredIdentity","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void RetryHandlingMetaMasterMasterClient.afterConnect()` reads without synchronization from `this.mChannel`. Potentially races with write in method `RetryHandlingMetaMasterMasterClient.register(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/server/master/src/main/java/alluxio/master/meta/RetryHandlingMetaMasterMasterClient.java","tnLine":66,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.meta.RetryHandlingMetaMasterMasterClient.afterConnect():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String Command.getCommandName()` of un-annotated interface `alluxio.cli.Command`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/ChmodCommand.java","tnLine":67,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.ChmodCommand.validateArgs(org.apache.commons.cli.CommandLine):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `boolean ForkJoinPool$ManagedBlocker.block()` of un-annotated interface `alluxio.concurrent.jsr.ForkJoinPool$ManagedBlocker`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.underfs.UnderFileSystem` is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/concurrent/ManagedBlockingUfsForwarder.java","tnLine":154,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.ManagedBlockingUfsForwarder.deleteExistingDirectory(java.lang.String,alluxio.underfs.options.DeleteOptions):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"RESOURCE_LEAK","tnDesc":"resource of type `java.lang.Process` acquired by call to `exec(...)` at line 173 is not released after line 173.","tnFile":"core/common/src/main/java/alluxio/util/io/FileUtils.java","tnLine":173,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.util.io.FileUtils.setLocalDirStickyBit(java.lang.String):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String Command.getCommandName()` of un-annotated interface `alluxio.cli.Command`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/SetTtlCommand.java","tnLine":65,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.SetTtlCommand.validateArgs(org.apache.commons.cli.CommandLine):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"RESOURCE_LEAK","tnDesc":"resource of type `java.lang.Process` acquired to `process` by call to `exec(...)` at line 139 is not released after line 141.\n**Note**: potential exception at line 144","tnFile":"core/server/common/src/main/java/alluxio/cli/validation/Utils.java","tnLine":141,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.validation.Utils.getResultFromProcess(java.lang.String[]):alluxio.cli.validation.Utils$ProcessExecutionResult","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `MultiProcessCluster.<init>(Map,Map,Map,int,int,String,boolean,List,MultiProcessCluster$1)` indirectly reads without synchronization from `conf.ServerConfiguration.sConf`. Potentially races with write in method `MultiProcessCluster.destroy()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"minicluster/src/main/java/alluxio/multi/process/MultiProcessCluster.java","tnLine":89,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.multi.process.MultiProcessCluster.<init>(java.util.Map,java.util.Map,java.util.Map,int,int,java.lang.String,boolean,java.util.List,alluxio.multi.process.MultiProcessCluster$1)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `List ServerConfiguration.getList(PropertyKey,String)` reads without synchronization from `conf.ServerConfiguration.sConf`. Potentially races with write in method `ServerConfiguration.loadClusterDefaultsIfNotLoaded(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"core/server/common/src/main/java/alluxio/conf/ServerConfiguration.java","tnLine":243,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.conf.ServerConfiguration.getList(alluxio.conf.PropertyKey,java.lang.String):java.util.List","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String Command.getCommandName()` of un-annotated interface `alluxio.cli.Command`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/GetFaclCommand.java","tnLine":81,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.GetFaclCommand.validateArgs(org.apache.commons.cli.CommandLine):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Container Account.getContainer(String)` of un-annotated interface `org.javaswift.joss.model.Account`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"underfs/swift/src/main/java/alluxio/underfs/swift/SwiftUnderFileSystem.java","tnLine":233,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.swift.SwiftUnderFileSystem.createEmptyObject(java.lang.String):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `AlluxioConfiguration ConfigurationUtils.getClusterConf(GetConfigurationPResponse,AlluxioConfiguration)` indirectly mutates container `conf.PropertyKey.DEFAULT_ALIAS_MAP` via call to `put` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"core/common/src/main/java/alluxio/util/ConfigurationUtils.java","tnLine":556,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.util.ConfigurationUtils.getClusterConf(alluxio.grpc.GetConfigurationPResponse,alluxio.conf.AlluxioConfiguration):alluxio.conf.AlluxioConfiguration","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void JobMasterClient.close()` of un-annotated interface `alluxio.client.job.JobMasterClient`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/DistributedMvCommand.java","tnLine":63,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.DistributedMvCommand.run(org.apache.commons.cli.CommandLine):int","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.error(String)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"underfs/web/src/main/java/alluxio/underfs/web/WebUnderFileSystem.java","tnLine":137,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.web.WebUnderFileSystem.getFileStatus(java.lang.String):alluxio.underfs.UfsFileStatus","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.debug(String,Object,Object)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"underfs/s3a/src/main/java/alluxio/underfs/s3a/S3AUnderFileSystem.java","tnLine":269,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.s3a.S3AUnderFileSystem.copyObject(java.lang.String,java.lang.String):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Access Account.authenticate()` of un-annotated interface `org.javaswift.joss.model.Account`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"underfs/swift/src/main/java/alluxio/underfs/swift/SwiftUnderFileSystem.java","tnLine":164,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.swift.SwiftUnderFileSystem.<init>(alluxio.AlluxioURI,alluxio.underfs.UnderFileSystemConfiguration)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `__new(alluxio.concurrent.ManagedBlockingUfsForwarder$36).get()` could be null and is dereferenced at line 466.","tnFile":"core/common/src/main/java/alluxio/concurrent/ManagedBlockingUfsForwarder.java","tnLine":466,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.ManagedBlockingUfsForwarder.renameFile(java.lang.String,java.lang.String):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `int CpCommand.run(CommandLine)` indirectly reads with synchronization from `this.mCopyFromLocalBufferSize`. Potentially races with unsynchronized write in method `CpCommand.validateArgs(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"shell/src/main/java/alluxio/cli/fs/command/CpCommand.java","tnLine":375,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.CpCommand.run(org.apache.commons.cli.CommandLine):int","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `String GrpcChannel.authority()` reads without synchronization from `this.mChannel`. Potentially races with write in method `GrpcChannel.intercept(...)`.\n Reporting because a superclass `class io.grpc.Channel` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/common/src/main/java/alluxio/grpc/GrpcChannel.java","tnLine":84,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.grpc.GrpcChannel.authority():java.lang.String","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `Meter ReadRequestContext.getMeter()` reads without synchronization from `this.mMeter`. Potentially races with write in method `ReadRequestContext.setMeter(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/server/worker/src/main/java/alluxio/worker/grpc/ReadRequestContext.java","tnLine":169,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.worker.grpc.ReadRequestContext.getMeter():com.codahale.metrics.Meter","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `boolean AlluxioConfiguration.clusterDefaultsLoaded()` of un-annotated interface `alluxio.conf.AlluxioConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/conf/path/SpecificPathConfiguration.java","tnLine":192,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.conf.path.SpecificPathConfiguration.clusterDefaultsLoaded():boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void ForkJoinTask.quietlyJoin()` indirectly writes to field `w.top` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"core/common/src/main/java/alluxio/concurrent/jsr/ForkJoinTask.java","tnLine":1113,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.jsr.ForkJoinTask.quietlyJoin():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void HeadCommand.runPlainPath(AlluxioURI,CommandLine)` reads without synchronization from `this.mNumOfBytes`. Potentially races with write in method `HeadCommand.run(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"shell/src/main/java/alluxio/cli/fs/command/HeadCommand.java","tnLine":74,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.HeadCommand.runPlainPath(alluxio.AlluxioURI,org.apache.commons.cli.CommandLine):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `AlluxioProperties AlluxioConfiguration.copyProperties()` of un-annotated interface `alluxio.conf.AlluxioConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/CopyFromLocalCommand.java","tnLine":50,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.CopyFromLocalCommand.<init>(alluxio.client.file.FileSystemContext)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `int ChmodCommand.run(CommandLine)` writes to field `this.mModeString` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"shell/src/main/java/alluxio/cli/fs/command/ChmodCommand.java","tnLine":95,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.ChmodCommand.run(org.apache.commons.cli.CommandLine):int","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `URI URI.createNewPath(String,boolean)` of un-annotated interface `alluxio.uri.URI`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/base/src/main/java/alluxio/AlluxioURI.java","tnLine":397,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.AlluxioURI.join(java.lang.String):alluxio.AlluxioURI","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `URI URI.createNewPath(String,boolean)` of un-annotated interface `alluxio.uri.URI`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/CpCommand.java","tnLine":395,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.CpCommand.run(org.apache.commons.cli.CommandLine):int","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void StoredObject.copyObject(Container,StoredObject)` of un-annotated interface `org.javaswift.joss.model.StoredObject`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"underfs/swift/src/main/java/alluxio/underfs/swift/SwiftUnderFileSystem.java","tnLine":214,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.swift.SwiftUnderFileSystem.copyObject(java.lang.String,java.lang.String):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String URI.getPath()` of un-annotated interface `alluxio.uri.URI`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"underfs/local/src/main/java/alluxio/underfs/local/LocalUnderFileSystem.java","tnLine":282,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.local.LocalUnderFileSystem.listStatus(java.lang.String):alluxio.underfs.UfsStatus[]","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.error(String)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/server/common/src/main/java/alluxio/master/audit/AsyncUserAccessAuditLogWriter.java","tnLine":52,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.audit.AsyncUserAccessAuditLogWriter.<init>()","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void MiniBenchmark.main(java.lang.String[])` reads without synchronization from `cli.MiniBenchmark.sConcurrency`. Potentially races with write in method `MiniBenchmark.main(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"examples/src/main/java/alluxio/cli/MiniBenchmark.java","tnLine":138,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.MiniBenchmark.main(java.lang.String[]):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `ForkJoinTask ForkJoinPool.submit(Runnable,Object)` indirectly reads without synchronization from `ws.[_]`. Potentially races with write in method `ForkJoinPool.externalPush(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"core/common/src/main/java/alluxio/concurrent/jsr/ForkJoinPool.java","tnLine":1894,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.jsr.ForkJoinPool.submit(java.lang.Runnable,java.lang.Object):alluxio.concurrent.jsr.ForkJoinTask","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object UnderFileSystemWithLogging$UfsCallable.call()` of un-annotated interface `alluxio.underfs.UnderFileSystemWithLogging$UfsCallable`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.underfs.UnderFileSystem` is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/underfs/UnderFileSystemWithLogging.java","tnLine":420,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.UnderFileSystemWithLogging.getExistingFileStatus(java.lang.String):alluxio.underfs.UfsFileStatus","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"UNSAFE_GUARDED_BY_ACCESS","tnDesc":"The field `alluxio.master.file.meta.MountTable.mState` is annotated with `@GuardedBy(\"mReadLock,mWriteLock\")`, but the lock `mReadLock,mWriteLock` is not held during the access to the field at line 185. Since the current method is non-private, it can be called from outside the current class without synchronization. Consider wrapping the access in a `synchronized(mReadLock,mWriteLock)` block or making the method private.","tnFile":"core/server/master/src/main/java/alluxio/master/file/meta/MountTable.java","tnLine":185,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.file.meta.MountTable.delete(java.util.function.Supplier,alluxio.AlluxioURI,boolean):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object `parent` last assigned on line 594 could be null and is dereferenced at line 596.","tnFile":"core/server/proxy/src/main/java/alluxio/proxy/s3/S3RestServiceHandler.java","tnLine":596,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.proxy.s3.S3RestServiceHandler.checkNestedBucketIsUnderMountPoint(java.lang.String):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `boolean ForkJoinPool$ManagedBlocker.block()` of un-annotated interface `alluxio.concurrent.jsr.ForkJoinPool$ManagedBlocker`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.underfs.UnderFileSystem` is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/concurrent/ManagedBlockingUfsForwarder.java","tnLine":466,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.ManagedBlockingUfsForwarder.renameFile(java.lang.String,java.lang.String):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object `res` last assigned on line 634 could be null and is dereferenced at line 635.","tnFile":"examples/src/main/java/alluxio/examples/UnderFileSystemCommonOperations.java","tnLine":635,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.examples.UnderFileSystemCommonOperations.listStatusEmptyTest():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void MiniBenchmark.main(java.lang.String[])` reads without synchronization from `cli.MiniBenchmark.sFileSize`. Potentially races with write in method `MiniBenchmark.main(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"examples/src/main/java/alluxio/cli/MiniBenchmark.java","tnLine":172,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.MiniBenchmark.main(java.lang.String[]):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object UnderFileSystemWithLogging$UfsCallable.call()` of un-annotated interface `alluxio.underfs.UnderFileSystemWithLogging$UfsCallable`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.underfs.UnderFileSystem` is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/underfs/UnderFileSystemWithLogging.java","tnLine":565,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.UnderFileSystemWithLogging.listStatus(java.lang.String):alluxio.underfs.UfsStatus[]","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `Future ForkJoinPool.submit(Callable)` indirectly reads without synchronization from `ws.[_]`. Potentially races with write in method `ForkJoinPool.externalPush(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"core/common/src/main/java/alluxio/concurrent/jsr/ForkJoinPool.java","tnLine":142,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.jsr.ForkJoinPool.submit(java.util.concurrent.Callable):java.util.concurrent.Future","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void Format.format(Format$Mode,AlluxioConfiguration)` indirectly reads without synchronization from container `conf.PropertyKey.DEFAULT_ALIAS_MAP` via call to `get`. Potentially races with write in method `Format.main(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/server/common/src/main/java/alluxio/cli/Format.java","tnLine":136,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.Format.format(alluxio.cli.Format$Mode,alluxio.conf.AlluxioConfiguration):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `ufsResource.get()` could be null and is dereferenced at line 220.","tnFile":"core/server/master/src/main/java/alluxio/master/file/activesync/ActiveSyncManager.java","tnLine":220,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.file.activesync.ActiveSyncManager.launchPollingThread(long,long):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `boolean ForkJoinTask.tryUnfork()` indirectly writes to field `w.top` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"core/common/src/main/java/alluxio/concurrent/jsr/ForkJoinTask.java","tnLine":1159,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.jsr.ForkJoinTask.tryUnfork():boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `Mode ModeUtils.applyDirectoryUMask(Mode,String)` indirectly writes to field `mode.mGroupBits` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/common/src/main/java/alluxio/util/ModeUtils.java","tnLine":53,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.util.ModeUtils.applyDirectoryUMask(alluxio.security.authorization.Mode,java.lang.String):alluxio.security.authorization.Mode","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `int DataWriter.chunkSize()` of un-annotated interface `alluxio.client.block.stream.DataWriter`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"integration/fuse/src/main/java/alluxio/fuse/AlluxioFuseFileSystem.java","tnLine":293,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.fuse.AlluxioFuseFileSystem.flush(java.lang.String,ru.serce.jnrfuse.struct.FuseFileInfo):int","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.debug(String,Object)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/server/common/src/main/java/alluxio/cli/extensions/command/InstallCommand.java","tnLine":80,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.extensions.command.InstallCommand.run(org.apache.commons.cli.CommandLine):int","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `int ForkJoinPool.drainTasksTo(Collection)` reads without synchronization from `this.workQueues`. Potentially races with write in method `ForkJoinPool.registerWorker(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"core/common/src/main/java/alluxio/concurrent/jsr/ForkJoinPool.java","tnLine":2161,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.jsr.ForkJoinPool.drainTasksTo(java.util.Collection):int","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `boolean BlockWorkerClient.isHealthy()` of un-annotated interface `alluxio.client.block.stream.BlockWorkerClient`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/client/fs/src/main/java/alluxio/client/block/stream/BlockWorkerClientPool.java","tnLine":36,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.client.block.stream.BlockWorkerClientPool.isHealthy(java.lang.Object):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void MetricsMasterClient.afterConnect()` reads without synchronization from `this.mChannel`. Potentially races with write in method `MetricsMasterClient.heartbeat(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/client/fs/src/main/java/alluxio/client/metrics/MetricsMasterClient.java","tnLine":62,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.client.metrics.MetricsMasterClient.afterConnect():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `ExecutorService ExecutorServiceFactory.create()` of un-annotated interface `alluxio.util.executor.ExecutorServiceFactory`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"underfs/oss/src/main/java/alluxio/underfs/oss/OSSUnderFileSystem.java","tnLine":84,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.oss.OSSUnderFileSystem.createInstance(alluxio.AlluxioURI,alluxio.underfs.UnderFileSystemConfiguration):alluxio.underfs.oss.OSSUnderFileSystem","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `FileSystemMaster FileSystemMasterFactory.create(MasterRegistry,CoreMasterContext)` indirectly reads without synchronization from container `conf.PropertyKey.DEFAULT_ALIAS_MAP` via call to `get`. Potentially races with write in method `FileSystemMasterFactory.create(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/server/master/src/main/java/alluxio/master/file/FileSystemMasterFactory.java","tnLine":51,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.file.FileSystemMasterFactory.create(alluxio.master.MasterRegistry,alluxio.master.CoreMasterContext):alluxio.master.file.FileSystemMaster","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.info(String,Object)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/client/hdfs/src/main/java/alluxio/hadoop/HadoopConfigurationUtils.java","tnLine":56,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.hadoop.HadoopConfigurationUtils.mergeHadoopConfiguration(org.apache.hadoop.conf.Configuration,alluxio.conf.AlluxioProperties):alluxio.conf.InstancedConfiguration","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"UNSAFE_GUARDED_BY_ACCESS","tnDesc":"The field `alluxio.master.file.meta.MountTable.mState` is annotated with `@GuardedBy(\"mReadLock,mWriteLock\")`, but the lock `mReadLock,mWriteLock` is not held during the access to the field at line 112. Since the current method is non-private, it can be called from outside the current class without synchronization. Consider wrapping the access in a `synchronized(mReadLock,mWriteLock)` block or making the method private.","tnFile":"core/server/master/src/main/java/alluxio/master/file/meta/MountTable.java","tnLine":112,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.file.meta.MountTable.add(java.util.function.Supplier,alluxio.AlluxioURI,alluxio.AlluxioURI,long,alluxio.grpc.MountPOptions):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `ExecutorService ExecutorServiceFactory.create()` of un-annotated interface `alluxio.util.executor.ExecutorServiceFactory`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"underfs/cos/src/main/java/alluxio/underfs/cos/COSUnderFileSystemFactory.java","tnLine":31,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.cos.COSUnderFileSystemFactory.create(java.lang.String,alluxio.conf.AlluxioConfiguration):java.lang.Object","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void SaslServerHandler.close()` of un-annotated interface `alluxio.security.authentication.SaslServerHandler`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/security/authentication/DefaultAuthenticationServer.java","tnLine":154,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.security.authentication.DefaultAuthenticationServer.close():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String AlluxioConfiguration.get(PropertyKey)` of un-annotated interface `alluxio.conf.AlluxioConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/util/webui/UIFileBlockInfo.java","tnLine":76,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.util.webui.UIFileBlockInfo.<init>(long,long,long,java.lang.String,alluxio.conf.AlluxioConfiguration)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `FileSystemWorker FileSystemWorkerFactory.create(WorkerRegistry,UfsManager)` indirectly reads without synchronization from container `registry.mRegistry` via call to `get`. Potentially races with write in method `FileSystemWorkerFactory.create(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/server/worker/src/main/java/alluxio/worker/file/FileSystemWorkerFactory.java","tnLine":44,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.worker.file.FileSystemWorkerFactory.create(alluxio.worker.WorkerRegistry,alluxio.underfs.UfsManager):alluxio.worker.file.FileSystemWorker","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void ForkJoinPool.signalWork()` reads without synchronization from `this.workQueues`. Potentially races with write in method `ForkJoinPool.registerWorker(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"core/common/src/main/java/alluxio/concurrent/jsr/ForkJoinPool.java","tnLine":1230,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.jsr.ForkJoinPool.signalWork():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `Object ForkJoinTask.get()` indirectly writes to field `w.top` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"core/common/src/main/java/alluxio/concurrent/jsr/ForkJoinTask.java","tnLine":1044,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.jsr.ForkJoinTask.get():java.lang.Object","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void CpCommand.validateArgs(CommandLine)` writes to field `this.mCopyToLocalBufferSize` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"shell/src/main/java/alluxio/cli/fs/command/CpCommand.java","tnLine":314,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.CpCommand.validateArgs(org.apache.commons.cli.CommandLine):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"RESOURCE_LEAK","tnDesc":"resource of type `java.io.FileOutputStream` acquired by call to `FileOutputStream(...)` at line 108 is not released after line 108.","tnFile":"core/server/common/src/main/java/alluxio/master/journal/tool/RaftJournalDumper.java","tnLine":108,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.journal.tool.RaftJournalDumper.readCopycatLogFromDir():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void MetricsMasterClient.heartbeat(List)` reads with synchronization from `this.mClient`. Potentially races with unsynchronized write in method `MetricsMasterClient.afterConnect()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/client/fs/src/main/java/alluxio/client/metrics/MetricsMasterClient.java","tnLine":76,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.client.metrics.MetricsMasterClient.heartbeat(java.util.List):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.error(String,Object)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"integration/fuse/src/main/java/alluxio/fuse/AlluxioFuseFileSystem.java","tnLine":191,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.fuse.AlluxioFuseFileSystem.chown(java.lang.String,long,long):int","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `AlluxioProperties AlluxioConfiguration.copyProperties()` of un-annotated interface `alluxio.conf.AlluxioConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/server/master/src/main/java/alluxio/master/file/meta/options/MountInfo.java","tnLine":101,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.file.meta.options.MountInfo.toDisplayMountPointInfo():alluxio.wire.MountPointInfo","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String AlluxioConfiguration.get(PropertyKey)` of un-annotated interface `alluxio.conf.AlluxioConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/FileSystemShellUtils.java","tnLine":90,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.FileSystemShellUtils.validatePath(java.lang.String,alluxio.conf.AlluxioConfiguration):java.lang.String","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Server.start(Object)` of un-annotated interface `alluxio.Server`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/server/common/src/main/java/alluxio/Registry.java","tnLine":131,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.Registry.start(java.lang.Object):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String AlluxioConfiguration.get(PropertyKey)` of un-annotated interface `alluxio.conf.AlluxioConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/util/IdUtils.java","tnLine":111,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.util.IdUtils.createOrGetAppIdFromConfig(alluxio.conf.AlluxioConfiguration):java.lang.String","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object BaseFileSystem$RpcCallable.call(Object)` of un-annotated interface `alluxio.client.file.BaseFileSystem$RpcCallable`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/client/fs/src/main/java/alluxio/client/file/BaseFileSystem.java","tnLine":230,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.client.file.BaseFileSystem.exists(alluxio.AlluxioURI,alluxio.grpc.ExistsPOptions):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void CpCommand.validateArgs(CommandLine)` writes to field `this.mThread` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"shell/src/main/java/alluxio/cli/fs/command/CpCommand.java","tnLine":322,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.CpCommand.validateArgs(org.apache.commons.cli.CommandLine):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `ExecutorService ExecutorServiceFactory.create()` of un-annotated interface `alluxio.util.executor.ExecutorServiceFactory`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"underfs/oss/src/main/java/alluxio/underfs/oss/OSSUnderFileSystem.java","tnLine":97,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.oss.OSSUnderFileSystem.<init>(alluxio.AlluxioURI,com.aliyun.oss.OSSClient,java.lang.String,alluxio.underfs.UnderFileSystemConfiguration)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `ExecutorService ExecutorServiceFactory.create()` of un-annotated interface `alluxio.util.executor.ExecutorServiceFactory`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"underfs/s3a/src/main/java/alluxio/underfs/s3a/S3AUnderFileSystem.java","tnLine":211,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.s3a.S3AUnderFileSystem.createInstance(alluxio.AlluxioURI,alluxio.underfs.UnderFileSystemConfiguration):alluxio.underfs.s3a.S3AUnderFileSystem","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `List JobMaster.list()` reads without synchronization from container `this.mIdToJobCoordinator` via call to `keySet`. Potentially races with write in method `JobMaster.run(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"job/server/src/main/java/alluxio/master/job/JobMaster.java","tnLine":277,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.job.JobMaster.list():java.util.List","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void HeapInodeStore.remove(Long)` mutates container `this.mInodes` via call to `remove` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/server/master/src/main/java/alluxio/master/metastore/heap/HeapInodeStore.java","tnLine":54,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.metastore.heap.HeapInodeStore.remove(java.lang.Long):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `ClientCall ChannelAuthenticator$DefaultAuthenticatedChannel.newCall(MethodDescriptor,CallOptions)` reads without synchronization from `this.mChannel`. Potentially races with write in method `ChannelAuthenticator$DefaultAuthenticatedChannel.authenticate()`.\n Reporting because a superclass `class io.grpc.Channel` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/common/src/main/java/alluxio/security/authentication/ChannelAuthenticator.java","tnLine":236,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.security.authentication.ChannelAuthenticator$DefaultAuthenticatedChannel.newCall(io.grpc.MethodDescriptor,io.grpc.CallOptions):io.grpc.ClientCall","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `URIStatus FileSystem.getStatus(AlluxioURI)` of un-annotated interface `alluxio.client.file.FileSystem`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/GetFaclCommand.java","tnLine":47,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.GetFaclCommand.runPlainPath(alluxio.AlluxioURI,org.apache.commons.cli.CommandLine):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"UNSAFE_GUARDED_BY_ACCESS","tnDesc":"The field `alluxio.worker.block.UfsInputStreamManager.mUnderFileInputStreamCache` is annotated with `@GuardedBy(\"mFileToInputStreamIds\")`, but the lock `mFileToInputStreamIds` is not held during the access to the field at line 242. Since the current method is non-private, it can be called from outside the current class without synchronization. Consider wrapping the access in a `synchronized(mFileToInputStreamIds)` block or making the method private.","tnFile":"core/server/worker/src/main/java/alluxio/worker/block/UfsInputStreamManager.java","tnLine":242,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.worker.block.UfsInputStreamManager.acquire(alluxio.underfs.UnderFileSystem,java.lang.String,long,alluxio.underfs.options.OpenOptions,boolean):java.io.InputStream","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.error(String)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/server/master/src/main/java/alluxio/master/metrics/MetricsMasterFactory.java","tnLine":49,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.metrics.MetricsMasterFactory.create(alluxio.master.MasterRegistry,alluxio.master.CoreMasterContext):alluxio.master.metrics.MetricsMaster","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.error(String)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"underfs/web/src/main/java/alluxio/underfs/web/WebUnderFileSystem.java","tnLine":111,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.web.WebUnderFileSystem.getBlockSizeByte(java.lang.String):long","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `boolean ForkJoinPool$ManagedBlocker.block()` of un-annotated interface `alluxio.concurrent.jsr.ForkJoinPool$ManagedBlocker`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.underfs.UnderFileSystem` is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/concurrent/ManagedBlockingUfsForwarder.java","tnLine":336,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.ManagedBlockingUfsForwarder.isExistingDirectory(java.lang.String):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `PrefixPathMatcher.<init>(Set)` indirectly writes to field `current.mIsTerminal` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/common/src/main/java/alluxio/conf/path/PrefixPathMatcher.java","tnLine":57,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.conf.path.PrefixPathMatcher.<init>(java.util.Set)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `boolean ForkJoinPool$ManagedBlocker.block()` of un-annotated interface `alluxio.concurrent.jsr.ForkJoinPool$ManagedBlocker`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.underfs.UnderFileSystem` is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/concurrent/ManagedBlockingUfsForwarder.java","tnLine":503,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.ManagedBlockingUfsForwarder.setMode(java.lang.String,short):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `UserState UserStateFactory.create(Subject,AlluxioConfiguration,boolean)` of un-annotated interface `alluxio.security.user.UserStateFactory`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/GetUsedBytesCommand.java","tnLine":37,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.GetUsedBytesCommand.<init>(alluxio.client.file.FileSystemContext)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object Gauge.getValue()` of un-annotated interface `com.codahale.metrics.Gauge`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/metrics/MetricsSystem.java","tnLine":470,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.metrics.MetricsSystem.reportWorkerMetrics():java.util.List","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String AlluxioConfiguration.get(PropertyKey)` of un-annotated interface `alluxio.conf.AlluxioConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/util/network/NetworkAddressUtils.java","tnLine":632,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.util.network.NetworkAddressUtils.getDataPortSocketAddress(alluxio.wire.WorkerNetAddress,alluxio.conf.AlluxioConfiguration):java.net.SocketAddress","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `ClientCall GrpcChannel.newCall(MethodDescriptor,CallOptions)` reads without synchronization from `this.mChannel`. Potentially races with write in method `GrpcChannel.intercept(...)`.\n Reporting because a superclass `class io.grpc.Channel` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/common/src/main/java/alluxio/grpc/GrpcChannel.java","tnLine":79,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.grpc.GrpcChannel.newCall(io.grpc.MethodDescriptor,io.grpc.CallOptions):io.grpc.ClientCall","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `boolean ServerConfiguration.getBoolean(PropertyKey)` reads without synchronization from `conf.ServerConfiguration.sConf`. Potentially races with write in method `ServerConfiguration.loadClusterDefaultsIfNotLoaded(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"core/server/common/src/main/java/alluxio/conf/ServerConfiguration.java","tnLine":232,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.conf.ServerConfiguration.getBoolean(alluxio.conf.PropertyKey):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.warn(String,Object)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/server/worker/src/main/java/alluxio/worker/block/evictor/GreedyEvictor.java","tnLine":54,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.worker.block.evictor.GreedyEvictor.freeSpaceWithView(long,alluxio.worker.block.BlockStoreLocation,alluxio.worker.block.BlockMetadataEvictorView):alluxio.worker.block.evictor.EvictionPlan","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void FileSystemMasterClient.afterConnect()` reads without synchronization from `this.mChannel`. Potentially races with write in method `FileSystemMasterClient.getUfsInfo(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/server/worker/src/main/java/alluxio/worker/file/FileSystemMasterClient.java","tnLine":70,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.worker.file.FileSystemMasterClient.afterConnect():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object `ufs` last assigned on line 1173 could be null and is dereferenced at line 1177.","tnFile":"core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java","tnLine":1177,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.file.DefaultFileSystemMaster.completeFileInternal(alluxio.master.file.RpcContext,alluxio.master.file.meta.LockedInodePath,alluxio.master.file.contexts.CompleteFileContext):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.debug(String,java.lang.Object[])` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/client/fs/src/main/java/alluxio/client/block/stream/DataWriter.java","tnLine":73,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.client.block.stream.DataWriter$Factory.create(alluxio.client.file.FileSystemContext,long,long,alluxio.wire.WorkerNetAddress,alluxio.client.file.options.OutStreamOptions):alluxio.client.block.stream.DataWriter","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void FileSystem.setAttribute(AlluxioURI,SetAttributePOptions)` of un-annotated interface `alluxio.client.file.FileSystem`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"integration/fuse/src/main/java/alluxio/fuse/AlluxioFuseFileSystem.java","tnLine":155,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.fuse.AlluxioFuseFileSystem.chmod(java.lang.String,long):int","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object UnderFileSystemWithLogging$UfsCallable.call()` of un-annotated interface `alluxio.underfs.UnderFileSystemWithLogging$UfsCallable`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.underfs.UnderFileSystem` is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/underfs/UnderFileSystemWithLogging.java","tnLine":854,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.UnderFileSystemWithLogging.stopActiveSyncPolling():boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `boolean ForkJoinPool$ManagedBlocker.block()` of un-annotated interface `alluxio.concurrent.jsr.ForkJoinPool$ManagedBlocker`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.underfs.UnderFileSystem` is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/concurrent/ManagedBlockingUfsForwarder.java","tnLine":436,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.ManagedBlockingUfsForwarder.openExistingFile(java.lang.String,alluxio.underfs.options.OpenOptions):java.io.InputStream","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Iterator FieldIndex.iterator()` of un-annotated interface `alluxio.collections.FieldIndex`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/base/src/main/java/alluxio/collections/IndexedSet.java","tnLine":150,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.collections.IndexedSet.clear():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.error(String)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"underfs/web/src/main/java/alluxio/underfs/web/WebUnderFileSystem.java","tnLine":188,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.web.WebUnderFileSystem.getStatus(java.lang.String):alluxio.underfs.UfsStatus","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Iterator FieldIndex.iterator()` of un-annotated interface `alluxio.collections.FieldIndex`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/base/src/main/java/alluxio/collections/IndexedSet.java","tnLine":195,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.collections.IndexedSet.iterator():java.util.Iterator","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Acl$AccessControlList InodeMeta$InodeOrBuilder.getAccessAcl()` of un-annotated interface `alluxio.proto.meta.InodeMeta$InodeOrBuilder`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/server/master/src/main/java/alluxio/master/metastore/heap/HeapInodeStore.java","tnLine":146,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.metastore.heap.HeapInodeStore.restoreFromCheckpoint(alluxio.master.journal.checkpoint.CheckpointInputStream):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `options.getWorkerRange()` could be null and is dereferenced by call to `fromProto(...)` at line 64.","tnFile":"core/client/fs/src/main/java/alluxio/client/block/options/GetWorkerReportOptions.java","tnLine":64,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.client.block.options.GetWorkerReportOptions.<init>(alluxio.grpc.GetWorkerReportPOptions)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `List BaseFileSystem.getBlockLocations(AlluxioURI)` mutates container `locations` via call to `addAll` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/client/fs/src/main/java/alluxio/client/file/BaseFileSystem.java","tnLine":283,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.client.file.BaseFileSystem.getBlockLocations(alluxio.AlluxioURI):java.util.List","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `UserState UserStateFactory.create(Subject,AlluxioConfiguration,boolean)` of un-annotated interface `alluxio.security.user.UserStateFactory`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.master.MasterInquireClient` is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/master/PollingMasterInquireClient.java","tnLine":77,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.PollingMasterInquireClient.<init>(java.util.List,java.util.function.Supplier,alluxio.conf.AlluxioConfiguration)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `Object ForkJoinTask.get(long,TimeUnit)` indirectly writes to field `w.top` outside of synchronization.\n Reporting because this access may occur on a background thread.","tnFile":"core/common/src/main/java/alluxio/concurrent/jsr/ForkJoinTask.java","tnLine":1079,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.jsr.ForkJoinTask.get(long,java.util.concurrent.TimeUnit):java.lang.Object","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void CpCommand.validateArgs(CommandLine)` reads without synchronization from `this.mThread`. Potentially races with write in method `CpCommand.validateArgs(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"shell/src/main/java/alluxio/cli/fs/command/CpCommand.java","tnLine":323,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.CpCommand.validateArgs(org.apache.commons.cli.CommandLine):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"RESOURCE_LEAK","tnDesc":"resource of type `alluxio.master.journal.checkpoint.CheckpointInputStream` acquired by call to `CheckpointInputStream(...)` at line 228 is not released after line 228.\n**Note**: potential exception at line 228","tnFile":"core/server/common/src/main/java/alluxio/master/journal/raft/JournalStateMachine.java","tnLine":228,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.journal.raft.JournalStateMachine.install(io.atomix.copycat.server.storage.snapshot.SnapshotReader):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void RaftPrimarySelector.init(CopycatServer)` reads without synchronization from `this.mStateListener`. Potentially races with write in method `RaftPrimarySelector.init(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/server/common/src/main/java/alluxio/master/journal/raft/RaftPrimarySelector.java","tnLine":42,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.journal.raft.RaftPrimarySelector.init(io.atomix.copycat.server.CopycatServer):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"RESOURCE_LEAK","tnDesc":"resource of type `java.lang.Process` acquired by call to `exec(...)` at line 404 is not released after line 404.","tnFile":"examples/src/main/java/alluxio/cli/JournalCrashTest.java","tnLine":404,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.JournalCrashTest.stopCluster():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void HeapBlockStore.clear()` mutates container `this.mBlocks` via call to `clear` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/server/master/src/main/java/alluxio/master/metastore/heap/HeapBlockStore.java","tnLine":77,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.metastore.heap.HeapBlockStore.clear():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `Master MetaMasterFactory.create(MasterRegistry,MasterContext)` indirectly reads with synchronization from container `conf.PropertyKey.DEFAULT_ALIAS_MAP` via call to `get`. Potentially races with unsynchronized write in method `MetaMasterFactory.create(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/server/master/src/main/java/alluxio/master/meta/MetaMasterFactory.java","tnLine":29,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.meta.MetaMasterFactory.create(alluxio.master.MasterRegistry,alluxio.master.MasterContext):alluxio.master.Master","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `boolean ForkJoinPool.hasQueuedSubmissions()` reads without synchronization from `this.workQueues`. Potentially races with write in method `ForkJoinPool.registerWorker(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"core/common/src/main/java/alluxio/concurrent/jsr/ForkJoinPool.java","tnLine":2124,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.jsr.ForkJoinPool.hasQueuedSubmissions():boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String Command.getCommandName()` of un-annotated interface `alluxio.cli.Command`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.cli.fs.command.AbstractFileSystemCommand` is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/StopSyncCommand.java","tnLine":70,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.StopSyncCommand.validateArgs(org.apache.commons.cli.CommandLine):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `AlluxioConfiguration ConfigurationUtils.getClusterConf(GetConfigurationPResponse,AlluxioConfiguration)` indirectly writes to field `conf.PropertyKey.DEPRECATED_CHECKER.mAnnotatedKeys` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"core/common/src/main/java/alluxio/util/ConfigurationUtils.java","tnLine":559,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.util.ConfigurationUtils.getClusterConf(alluxio.grpc.GetConfigurationPResponse,alluxio.conf.AlluxioConfiguration):alluxio.conf.AlluxioConfiguration","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String Command.getCommandName()` of un-annotated interface `alluxio.cli.Command`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/TouchCommand.java","tnLine":46,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.TouchCommand.validateArgs(org.apache.commons.cli.CommandLine):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `boolean ForkJoinPool$ManagedBlocker.block()` of un-annotated interface `alluxio.concurrent.jsr.ForkJoinPool$ManagedBlocker`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.underfs.UnderFileSystem` is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/concurrent/ManagedBlockingUfsForwarder.java","tnLine":114,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.ManagedBlockingUfsForwarder.createNonexistingFile(java.lang.String,alluxio.underfs.options.CreateOptions):java.io.OutputStream","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.error(String)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"underfs/s3a/src/main/java/alluxio/underfs/s3a/S3AUnderFileSystem.java","tnLine":361,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.s3a.S3AUnderFileSystem.getFolderSuffix():java.lang.String","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `boolean AlluxioConfiguration.getBoolean(PropertyKey)` of un-annotated interface `alluxio.conf.AlluxioConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/client/fs/src/main/java/alluxio/client/file/RetryHandlingFileSystemMasterClient.java","tnLine":251,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.client.file.RetryHandlingFileSystemMasterClient.rename(alluxio.AlluxioURI,alluxio.AlluxioURI):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object `inode` last assigned on line 2923 could be null and is dereferenced at line 2935.","tnFile":"core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java","tnLine":2935,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.file.DefaultFileSystemMaster.setUfsAcl(alluxio.master.file.meta.LockedInodePath):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `int ServerConfiguration.getInt(PropertyKey)` reads without synchronization from `conf.ServerConfiguration.sConf`. Potentially races with write in method `ServerConfiguration.loadClusterDefaultsIfNotLoaded(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"core/server/common/src/main/java/alluxio/conf/ServerConfiguration.java","tnLine":192,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.conf.ServerConfiguration.getInt(alluxio.conf.PropertyKey):int","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void Registry.close()` indirectly reads without synchronization from container `this.mRegistry` via call to `values`. Potentially races with write in method `Registry.add(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/server/common/src/main/java/alluxio/Registry.java","tnLine":157,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.Registry.close():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `boolean ForkJoinPool$ManagedBlocker.block()` of un-annotated interface `alluxio.concurrent.jsr.ForkJoinPool$ManagedBlocker`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.underfs.UnderFileSystem` is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/concurrent/ManagedBlockingUfsForwarder.java","tnLine":301,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.ManagedBlockingUfsForwarder.getStatus(java.lang.String):alluxio.underfs.UfsStatus","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `UserState UserStateFactory.create(Subject,AlluxioConfiguration,boolean)` of un-annotated interface `alluxio.security.user.UserStateFactory`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/PersistCommand.java","tnLine":85,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.PersistCommand.<init>(alluxio.client.file.FileSystemContext)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `boolean ForkJoinPool$ManagedBlocker.block()` of un-annotated interface `alluxio.concurrent.jsr.ForkJoinPool$ManagedBlocker`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.underfs.UnderFileSystem` is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/concurrent/ManagedBlockingUfsForwarder.java","tnLine":195,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.ManagedBlockingUfsForwarder.getAclPair(java.lang.String):alluxio.collections.Pair","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void ForkJoinPool.externalPush(ForkJoinTask)` writes to field `q.top` outside of synchronization.\n Reporting because this access may occur on a background thread.","tnFile":"core/common/src/main/java/alluxio/concurrent/jsr/ForkJoinPool.java","tnLine":1652,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.jsr.ForkJoinPool.externalPush(alluxio.concurrent.jsr.ForkJoinTask):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.debug(String,Object)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/util/ShellUtils.java","tnLine":85,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.util.ShellUtils.getUnixMountInfo():java.util.List","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void ByteIOUtils.writeLong(byte[],int,long)` writes to field `buf.[_]` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/common/src/main/java/alluxio/util/io/ByteIOUtils.java","tnLine":212,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.util.io.ByteIOUtils.writeLong(byte[],int,long):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void FileSystem.delete(AlluxioURI,DeletePOptions)` of un-annotated interface `alluxio.client.file.FileSystem`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/RmCommand.java","tnLine":97,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.RmCommand.runPlainPath(alluxio.AlluxioURI,org.apache.commons.cli.CommandLine):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.error(String)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/underfs/ObjectUnderFileSystem.java","tnLine":647,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.ObjectUnderFileSystem.openExistingFile(java.lang.String):java.io.InputStream","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.error(String)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"integration/fuse/src/main/java/alluxio/fuse/AlluxioFuseFileSystem.java","tnLine":683,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.fuse.AlluxioFuseFileSystem.write(java.lang.String,jnr.ffi.Pointer,long,long,ru.serce.jnrfuse.struct.FuseFileInfo):int","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `Collection ForkJoinTask.invokeAll(Collection)` indirectly writes to field `w.top` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"core/common/src/main/java/alluxio/concurrent/jsr/ForkJoinTask.java","tnLine":371,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.jsr.ForkJoinTask.invokeAll(java.util.Collection):java.util.Collection","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.error(String)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"underfs/s3a/src/main/java/alluxio/underfs/s3a/S3AUnderFileSystem.java","tnLine":124,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.s3a.S3AUnderFileSystem.createAwsCredentialsProvider(alluxio.underfs.UnderFileSystemConfiguration):com.amazonaws.auth.AWSCredentialsProvider","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object BaseFileSystem$RpcCallable.call(Object)` of un-annotated interface `alluxio.client.file.BaseFileSystem$RpcCallable`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/client/fs/src/main/java/alluxio/client/file/BaseFileSystem.java","tnLine":266,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.client.file.BaseFileSystem.getBlockLocations(alluxio.AlluxioURI):java.util.List","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object UnderFileSystemWithLogging$UfsCallable.call()` of un-annotated interface `alluxio.underfs.UnderFileSystemWithLogging$UfsCallable`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.underfs.UnderFileSystem` is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/underfs/UnderFileSystemWithLogging.java","tnLine":780,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.UnderFileSystemWithLogging.setAclEntries(java.lang.String,java.util.List):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String Command.getCommandName()` of un-annotated interface `alluxio.cli.Command`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/cli/CommandUtils.java","tnLine":72,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.CommandUtils.checkNumOfArgsEquals(alluxio.cli.Command,org.apache.commons.cli.CommandLine,int):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `int AlluxioConfiguration.getInt(PropertyKey)` of un-annotated interface `alluxio.conf.AlluxioConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/client/fs/src/main/java/alluxio/client/file/FileSystemMasterClientPool.java","tnLine":40,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.client.file.FileSystemMasterClientPool.<init>(alluxio.master.MasterClientContext)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `UfsMode BaseUnderFileSystem.getOperationMode(Map)` indirectly writes to field `this.mUri.mUriString` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/common/src/main/java/alluxio/underfs/BaseUnderFileSystem.java","tnLine":116,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.BaseUnderFileSystem.getOperationMode(java.util.Map):alluxio.underfs.UfsMode","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"RESOURCE_LEAK","tnDesc":"resource of type `org.rocksdb.ReadOptions` acquired by call to `new()` at line 146 is not released after line 147.","tnFile":"core/server/master/src/main/java/alluxio/master/metastore/rocks/RocksBlockStore.java","tnLine":147,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.metastore.rocks.RocksBlockStore.getLocations(long):java.util.List","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `ExecutorService ExecutorServiceFactory.create()` of un-annotated interface `alluxio.util.executor.ExecutorServiceFactory`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"underfs/gcs/src/main/java/alluxio/underfs/gcs/GCSUnderFileSystem.java","tnLine":118,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.gcs.GCSUnderFileSystem.<init>(alluxio.AlluxioURI,org.jets3t.service.impl.rest.httpclient.GoogleStorageService,java.lang.String,alluxio.underfs.UnderFileSystemConfiguration)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String URI.getPath()` of un-annotated interface `alluxio.uri.URI`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"underfs/local/src/main/java/alluxio/underfs/local/LocalUnderFileSystem.java","tnLine":127,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.local.LocalUnderFileSystem.deleteDirectory(java.lang.String,alluxio.underfs.options.DeleteOptions):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void ChannelAuthenticator$DefaultAuthenticatedChannel.authenticate()` reads without synchronization from `this.mClientDriver`. Potentially races with write in method `ChannelAuthenticator$DefaultAuthenticatedChannel.authenticate()`.\n Reporting because a superclass `class io.grpc.Channel` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/common/src/main/java/alluxio/security/authentication/ChannelAuthenticator.java","tnLine":159,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.security.authentication.ChannelAuthenticator$DefaultAuthenticatedChannel.authenticate():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `UserState UserStateFactory.create(Subject,AlluxioConfiguration,boolean)` of un-annotated interface `alluxio.security.user.UserStateFactory`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"job/server/src/main/java/alluxio/worker/JobWorkerProcess.java","tnLine":34,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.worker.JobWorkerProcess$Factory.create():alluxio.worker.JobWorkerProcess","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String Command.getCommandName()` of un-annotated interface `alluxio.cli.Command`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/job/command/ListCommand.java","tnLine":55,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.job.command.ListCommand.validateArgs(org.apache.commons.cli.CommandLine):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void ValidateConf.main(java.lang.String[])` indirectly writes to field `conf.PropertyKey.DEPRECATED_CHECKER.mAnnotatedKeys` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"shell/src/main/java/alluxio/cli/ValidateConf.java","tnLine":37,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.ValidateConf.main(java.lang.String[]):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"RESOURCE_LEAK","tnDesc":"resource of type `alluxio.master.file.LostFileDetector` acquired by call to `new()` at line 617 is not released after line 617.","tnFile":"core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java","tnLine":617,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.file.DefaultFileSystemMaster.start(java.lang.Boolean):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `ForkJoinTask ForkJoinPool.submit(ForkJoinTask)` indirectly reads without synchronization from `ws.[_]`. Potentially races with write in method `ForkJoinPool.externalPush(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"core/common/src/main/java/alluxio/concurrent/jsr/ForkJoinPool.java","tnLine":1878,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.jsr.ForkJoinPool.submit(alluxio.concurrent.jsr.ForkJoinTask):alluxio.concurrent.jsr.ForkJoinTask","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Optional PathConfiguration.getConfiguration(AlluxioURI,PropertyKey)` of un-annotated interface `alluxio.conf.path.PathConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/conf/path/SpecificPathConfiguration.java","tnLine":113,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.conf.path.SpecificPathConfiguration.getDouble(alluxio.conf.PropertyKey):double","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `List Registry.getServers()` reads without synchronization from container `this.mRegistry` via call to `values`. Potentially races with write in method `Registry.add(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/server/common/src/main/java/alluxio/Registry.java","tnLine":115,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.Registry.getServers():java.util.List","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.debug(String,Object)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/client/fs/src/main/java/alluxio/client/block/policy/LocalFirstAvoidEvictionPolicy.java","tnLine":77,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.client.block.policy.LocalFirstAvoidEvictionPolicy.getWorker(alluxio.client.block.policy.options.GetWorkerOptions):alluxio.wire.WorkerNetAddress","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `List FileSystemMasterClient.checkConsistency(AlluxioURI,CheckConsistencyPOptions)` of un-annotated interface `alluxio.client.file.FileSystemMasterClient`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.cli.fs.command.AbstractFileSystemCommand` is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/CheckConsistencyCommand.java","tnLine":95,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.CheckConsistencyCommand.checkConsistency(alluxio.AlluxioURI,alluxio.grpc.CheckConsistencyPOptions):java.util.List","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"UNSAFE_GUARDED_BY_ACCESS","tnDesc":"The field `alluxio.master.file.meta.MountTable.mState` is annotated with `@GuardedBy(\"mReadLock,mWriteLock\")`, but the lock `mReadLock,mWriteLock` is not held during the access to the field at line 422. Since the current method is non-private, it can be called from outside the current class without synchronization. Consider wrapping the access in a `synchronized(mReadLock,mWriteLock)` block or making the method private.","tnFile":"core/server/master/src/main/java/alluxio/master/file/meta/MountTable.java","tnLine":422,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.file.meta.MountTable.getDelegate():alluxio.master.journal.Journaled","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"RESOURCE_LEAK","tnDesc":"resource of type `org.apache.commons.compress.archivers.tar.TarArchiveInputStream` acquired to `archiveStream` by call to `new()` at line 72 is not released after line 85.\n**Note**: potential exception at line 80","tnFile":"core/server/common/src/main/java/alluxio/util/TarUtils.java","tnLine":85,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.util.TarUtils.readTarGz(java.nio.file.Path,alluxio.master.journal.checkpoint.CheckpointInputStream):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"UNSAFE_GUARDED_BY_ACCESS","tnDesc":"The field `alluxio.master.file.meta.MountTable.mState` is annotated with `@GuardedBy(\"mReadLock,mWriteLock\")`, but the lock `mReadLock,mWriteLock` is not held during the access to the field at line 136. Since the current method is non-private, it can be called from outside the current class without synchronization. Consider wrapping the access in a `synchronized(mReadLock,mWriteLock)` block or making the method private.","tnFile":"core/server/master/src/main/java/alluxio/master/file/meta/MountTable.java","tnLine":136,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.file.meta.MountTable.add(java.util.function.Supplier,alluxio.AlluxioURI,alluxio.AlluxioURI,long,alluxio.grpc.MountPOptions):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object UnderFileSystemWithLogging$UfsCallable.call()` of un-annotated interface `alluxio.underfs.UnderFileSystemWithLogging$UfsCallable`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.underfs.UnderFileSystem` is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/underfs/UnderFileSystemWithLogging.java","tnLine":490,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.UnderFileSystemWithLogging.getExistingStatus(java.lang.String):alluxio.underfs.UfsStatus","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object `list` last assigned on line 190 could be null and is dereferenced at line 191.","tnFile":"core/common/src/main/java/alluxio/grpc/GrpcSerializationUtils.java","tnLine":191,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.grpc.GrpcSerializationUtils.addBuffersToStream(io.netty.buffer.ByteBuf[],java.io.OutputStream):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `Master MetaMasterFactory.create(MasterRegistry,CoreMasterContext)` indirectly reads without synchronization from container `registry.mRegistry` via call to `get`. Potentially races with write in method `MetaMasterFactory.create(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/server/master/src/main/java/alluxio/master/meta/MetaMasterFactory.java","tnLine":51,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.meta.MetaMasterFactory.create(alluxio.master.MasterRegistry,alluxio.master.CoreMasterContext):alluxio.master.Master","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `String ServerConfiguration.get(PropertyKey)` reads without synchronization from `conf.ServerConfiguration.sConf`. Potentially races with write in method `ServerConfiguration.loadClusterDefaultsIfNotLoaded(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"core/server/common/src/main/java/alluxio/conf/ServerConfiguration.java","tnLine":133,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.conf.ServerConfiguration.get(alluxio.conf.PropertyKey):java.lang.String","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String AlluxioConfiguration.get(PropertyKey)` of un-annotated interface `alluxio.conf.AlluxioConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.underfs.BaseUnderFileSystem` is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/underfs/ConsistentUnderFileSystem.java","tnLine":41,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.ConsistentUnderFileSystem.createNonexistingFile(java.lang.String):java.io.OutputStream","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `ufsResource.get()` could be null and is dereferenced at line 696.","tnFile":"core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java","tnLine":696,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.file.DefaultFileSystemMaster.cleanupUfs():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void UnderFileSystemFactoryRegistry.register(UnderFileSystemFactory)` indirectly mutates container `underfs.UnderFileSystemFactoryRegistry.sRegistryInstance.mFactories` via call to `add` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"core/common/src/main/java/alluxio/underfs/UnderFileSystemFactoryRegistry.java","tnLine":152,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.UnderFileSystemFactoryRegistry.register(alluxio.underfs.UnderFileSystemFactory):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object BaseFileSystem$RpcCallable.call(Object)` of un-annotated interface `alluxio.client.file.BaseFileSystem$RpcCallable`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/client/fs/src/main/java/alluxio/client/file/BaseFileSystem.java","tnLine":515,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.client.file.BaseFileSystem.unmount(alluxio.AlluxioURI):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `StorageTierAssoc BlockStoreMeta.getStorageTierAssoc()` of un-annotated interface `alluxio.worker.block.BlockStoreMeta`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/server/worker/src/main/java/alluxio/worker/block/DefaultBlockWorker.java","tnLine":612,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.worker.block.DefaultBlockWorker$Metrics.registerGauges(alluxio.worker.block.BlockWorker):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `long ServerConfiguration.getMs(PropertyKey)` reads without synchronization from `conf.ServerConfiguration.sConf`. Potentially races with write in method `ServerConfiguration.loadClusterDefaultsIfNotLoaded(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"core/server/common/src/main/java/alluxio/conf/ServerConfiguration.java","tnLine":275,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.conf.ServerConfiguration.getMs(alluxio.conf.PropertyKey):long","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `UserState UserStateFactory.create(Subject,AlluxioConfiguration,boolean)` of un-annotated interface `alluxio.security.user.UserStateFactory`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/TestCommand.java","tnLine":70,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.TestCommand.<init>(alluxio.client.file.FileSystemContext)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object BaseFileSystem$RpcCallable.call(Object)` of un-annotated interface `alluxio.client.file.BaseFileSystem$RpcCallable`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/client/fs/src/main/java/alluxio/client/file/BaseFileSystem.java","tnLine":405,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.client.file.BaseFileSystem.openFile(alluxio.AlluxioURI):alluxio.client.file.FileInStream","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `__new(alluxio.concurrent.ManagedBlockingUfsForwarder$29).get()` could be null and is dereferenced at line 396.","tnFile":"core/common/src/main/java/alluxio/concurrent/ManagedBlockingUfsForwarder.java","tnLine":396,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.ManagedBlockingUfsForwarder.mkdirs(java.lang.String,alluxio.underfs.options.MkdirsOptions):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String AlluxioConfiguration.get(PropertyKey)` of un-annotated interface `alluxio.conf.AlluxioConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/util/webui/UIFileInfo.java","tnLine":190,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.util.webui.UIFileInfo.addBlock(java.lang.String,long,long,long):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `java.lang.String[] ObjectUnderFileSystem$ObjectListingChunk.getCommonPrefixes()` of un-annotated interface `alluxio.underfs.ObjectUnderFileSystem$ObjectListingChunk`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"underfs/gcs/src/main/java/alluxio/underfs/gcs/GCSUnderFileSystem.java","tnLine":138,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.gcs.GCSUnderFileSystem.getExistingDirectoryStatus(java.lang.String):alluxio.underfs.UfsDirectoryStatus","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object `ufs` last assigned on line 146 could be null and is dereferenced at line 165.","tnFile":"core/server/master/src/main/java/alluxio/master/file/UfsSyncChecker.java","tnLine":165,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.file.UfsSyncChecker.getChildrenInUFS(alluxio.AlluxioURI):alluxio.underfs.UfsStatus[]","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object UnderFileSystemWithLogging$UfsCallable.call()` of un-annotated interface `alluxio.underfs.UnderFileSystemWithLogging$UfsCallable`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.underfs.UnderFileSystem` is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/underfs/UnderFileSystemWithLogging.java","tnLine":81,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.UnderFileSystemWithLogging.cleanup():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `UserState UserStateFactory.create(Subject,AlluxioConfiguration,boolean)` of un-annotated interface `alluxio.security.user.UserStateFactory`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/server/worker/src/main/java/alluxio/worker/WorkerProcess.java","tnLine":46,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.worker.WorkerProcess$Factory.create(alluxio.wire.TieredIdentity):alluxio.worker.WorkerProcess","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `UserState UserStateFactory.create(Subject,AlluxioConfiguration,boolean)` of un-annotated interface `alluxio.security.user.UserStateFactory`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/AbstractFileSystemCommand.java","tnLine":48,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.AbstractFileSystemCommand.<init>(alluxio.client.file.FileSystemContext)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `UserState UserStateFactory.create(Subject,AlluxioConfiguration,boolean)` of un-annotated interface `alluxio.security.user.UserStateFactory`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/HelpCommand.java","tnLine":68,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.HelpCommand.<init>(alluxio.client.file.FileSystemContext)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void ReadRequestContext.setPosReceived(long)` writes to field `this.mPosReceived` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/server/worker/src/main/java/alluxio/worker/grpc/ReadRequestContext.java","tnLine":193,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.worker.grpc.ReadRequestContext.setPosReceived(long):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `UserState UserStateFactory.create(Subject,AlluxioConfiguration,boolean)` of un-annotated interface `alluxio.security.user.UserStateFactory`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/client/fs/src/main/java/alluxio/client/file/FileSystemContext.java","tnLine":178,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.client.file.FileSystemContext.create(alluxio.ClientContext):alluxio.client.file.FileSystemContext","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.error(String)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/server/common/src/main/java/alluxio/master/journalv0/AsyncJournalWriter.java","tnLine":65,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.journalv0.AsyncJournalWriter.<init>(alluxio.master.journalv0.JournalWriter)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `UserState UserStateFactory.create(Subject,AlluxioConfiguration,boolean)` of un-annotated interface `alluxio.security.user.UserStateFactory`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/RmCommand.java","tnLine":64,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.RmCommand.<init>(alluxio.client.file.FileSystemContext)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `UserState UserStateFactory.create(Subject,AlluxioConfiguration,boolean)` of un-annotated interface `alluxio.security.user.UserStateFactory`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/FreeCommand.java","tnLine":54,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.FreeCommand.<init>(alluxio.client.file.FileSystemContext)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void ChannelAuthenticator$DefaultAuthenticatedChannel.close()` reads without synchronization from `this.mClientDriver`. Potentially races with write in method `ChannelAuthenticator$DefaultAuthenticatedChannel.authenticate()`.\n Reporting because a superclass `class io.grpc.Channel` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/common/src/main/java/alluxio/security/authentication/ChannelAuthenticator.java","tnLine":257,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.security.authentication.ChannelAuthenticator$DefaultAuthenticatedChannel.close():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `boolean ForkJoinPool$ManagedBlocker.block()` of un-annotated interface `alluxio.concurrent.jsr.ForkJoinPool$ManagedBlocker`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.underfs.UnderFileSystem` is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/concurrent/ManagedBlockingUfsForwarder.java","tnLine":104,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.ManagedBlockingUfsForwarder.createNonexistingFile(java.lang.String):java.io.OutputStream","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `dstPath.getParent()` could be null and is dereferenced at line 47.","tnFile":"core/server/worker/src/main/java/alluxio/worker/file/UnderFileSystemUtils.java","tnLine":47,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.worker.file.UnderFileSystemUtils.prepareFilePath(alluxio.AlluxioURI,java.lang.String,alluxio.client.file.FileSystem,alluxio.underfs.UnderFileSystem):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `boolean ForkJoinPool$ManagedBlocker.block()` of un-annotated interface `alluxio.concurrent.jsr.ForkJoinPool$ManagedBlocker`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.underfs.UnderFileSystem` is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/concurrent/ManagedBlockingUfsForwarder.java","tnLine":164,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.ManagedBlockingUfsForwarder.deleteFile(java.lang.String):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String Command.getCommandName()` of un-annotated interface `alluxio.cli.Command`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/CpCommand.java","tnLine":305,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.CpCommand.validateArgs(org.apache.commons.cli.CommandLine):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `long AlluxioConfiguration.getMs(PropertyKey)` of un-annotated interface `alluxio.conf.AlluxioConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/GetCapacityBytesCommand.java","tnLine":51,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.GetCapacityBytesCommand.run(org.apache.commons.cli.CommandLine):int","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object BaseFileSystem$RpcCallable.call(Object)` of un-annotated interface `alluxio.client.file.BaseFileSystem$RpcCallable`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/client/fs/src/main/java/alluxio/client/file/BaseFileSystem.java","tnLine":506,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.client.file.BaseFileSystem.stopSync(alluxio.AlluxioURI):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object UnderFileSystemWithLogging$UfsCallable.call()` of un-annotated interface `alluxio.underfs.UnderFileSystemWithLogging$UfsCallable`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.underfs.UnderFileSystem` is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/underfs/UnderFileSystemWithLogging.java","tnLine":669,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.UnderFileSystemWithLogging.open(java.lang.String,alluxio.underfs.options.OpenOptions):java.io.InputStream","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"RESOURCE_LEAK","tnDesc":"resource of type `org.rocksdb.WriteOptions` acquired by call to `new()` at line 78 is not released after line 78.","tnFile":"core/server/master/src/main/java/alluxio/master/metastore/rocks/RocksInodeStore.java","tnLine":78,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.metastore.rocks.RocksInodeStore.<init>(java.lang.String)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `int AlluxioConfiguration.getInt(PropertyKey)` of un-annotated interface `alluxio.conf.AlluxioConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.underfs.ObjectUnderFileSystem` is annotated `@ThreadSafe`.","tnFile":"underfs/kodo/src/main/java/alluxio/underfs/kodo/KodoUnderFileSystem.java","tnLine":161,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.kodo.KodoUnderFileSystem.getObjectListingChunk(java.lang.String,boolean):alluxio.underfs.ObjectUnderFileSystem$ObjectListingChunk","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void MiniBenchmark.main(java.lang.String[])` reads without synchronization from `cli.MiniBenchmark.sHelp`. Potentially races with write in method `MiniBenchmark.main(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"examples/src/main/java/alluxio/cli/MiniBenchmark.java","tnLine":128,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.MiniBenchmark.main(java.lang.String[]):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.info(String,Object)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/server/master/src/main/java/alluxio/master/metastore/rocks/RocksBlockStore.java","tnLine":94,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.metastore.rocks.RocksBlockStore.<init>(java.lang.String)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object UnderFileSystemWithLogging$UfsCallable.call()` of un-annotated interface `alluxio.underfs.UnderFileSystemWithLogging$UfsCallable`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.underfs.UnderFileSystem` is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/underfs/UnderFileSystemWithLogging.java","tnLine":839,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.UnderFileSystemWithLogging.startActiveSyncPolling(long):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object ObjectUnderFileSystem$ObjectStoreOperation.apply()` of un-annotated interface `alluxio.underfs.ObjectUnderFileSystem$ObjectStoreOperation`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/underfs/ObjectUnderFileSystem.java","tnLine":752,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.ObjectUnderFileSystem.renameRenamableFile(java.lang.String,java.lang.String):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `Iterator HeapBlockStore.iterator()` reads without synchronization from container `this.mBlocks` via call to `entrySet`. Potentially races with write in method `HeapBlockStore.removeBlock(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/server/master/src/main/java/alluxio/master/metastore/heap/HeapBlockStore.java","tnLine":60,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.metastore.heap.HeapBlockStore.iterator():java.util.Iterator","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void FileSystem.stopSync(AlluxioURI)` of un-annotated interface `alluxio.client.file.FileSystem`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.cli.fs.command.AbstractFileSystemCommand` is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/StopSyncCommand.java","tnLine":46,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.StopSyncCommand.runPlainPath(alluxio.AlluxioURI,org.apache.commons.cli.CommandLine):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void ReadRequestContext.setCancel(boolean)` writes to field `this.mCancel` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/server/worker/src/main/java/alluxio/worker/grpc/ReadRequestContext.java","tnLine":209,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.worker.grpc.ReadRequestContext.setCancel(boolean):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void RetryHandlingMetaMasterClient.afterConnect()` reads without synchronization from `this.mChannel`. Potentially races with write in method `RetryHandlingMetaMasterClient.getMasterInfo(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/client/fs/src/main/java/alluxio/client/meta/RetryHandlingMetaMasterClient.java","tnLine":71,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.client.meta.RetryHandlingMetaMasterClient.afterConnect():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `boolean ForkJoinPool$ManagedBlocker.block()` of un-annotated interface `alluxio.concurrent.jsr.ForkJoinPool$ManagedBlocker`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.underfs.UnderFileSystem` is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/concurrent/ManagedBlockingUfsForwarder.java","tnLine":94,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.ManagedBlockingUfsForwarder.create(java.lang.String,alluxio.underfs.options.CreateOptions):java.io.OutputStream","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.error(String)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/server/worker/src/main/java/alluxio/worker/block/BlockLockManager.java","tnLine":58,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.worker.block.BlockLockManager.<init>()","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String Command.getCommandName()` of un-annotated interface `alluxio.cli.Command`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/ChownCommand.java","tnLine":72,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.ChownCommand.validateArgs(org.apache.commons.cli.CommandLine):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String URI.getPath()` of un-annotated interface `alluxio.uri.URI`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"underfs/local/src/main/java/alluxio/underfs/local/LocalUnderFileSystem.java","tnLine":417,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.local.LocalUnderFileSystem.setMode(java.lang.String,short):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `confErrors.get(scope)` could be null and is dereferenced at line 88.","tnFile":"core/server/master/src/main/java/alluxio/master/meta/checkconf/ServerConfigurationChecker.java","tnLine":88,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.meta.checkconf.ServerConfigurationChecker.regenerateReport():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `java.lang.String[] ObjectUnderFileSystem$ObjectListingChunk.getCommonPrefixes()` of un-annotated interface `alluxio.underfs.ObjectUnderFileSystem$ObjectListingChunk`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/underfs/ObjectUnderFileSystem.java","tnLine":599,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.ObjectUnderFileSystem.listStatus(java.lang.String):alluxio.underfs.UfsStatus[]","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `float ServerConfiguration.getFloat(PropertyKey)` reads without synchronization from `conf.ServerConfiguration.sConf`. Potentially races with write in method `ServerConfiguration.loadClusterDefaultsIfNotLoaded(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"core/server/common/src/main/java/alluxio/conf/ServerConfiguration.java","tnLine":222,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.conf.ServerConfiguration.getFloat(alluxio.conf.PropertyKey):float","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `Future ForkJoinPool.submit(Runnable)` indirectly reads without synchronization from `ws.[_]`. Potentially races with write in method `ForkJoinPool.externalPush(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"core/common/src/main/java/alluxio/concurrent/jsr/ForkJoinPool.java","tnLine":142,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.jsr.ForkJoinPool.submit(java.lang.Runnable):java.util.concurrent.Future","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object UnderFileSystemWithLogging$UfsCallable.call()` of un-annotated interface `alluxio.underfs.UnderFileSystemWithLogging$UfsCallable`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.underfs.UnderFileSystem` is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/underfs/UnderFileSystemWithLogging.java","tnLine":359,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.UnderFileSystemWithLogging.getExistingDirectoryStatus(java.lang.String):alluxio.underfs.UfsDirectoryStatus","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object BaseFileSystem$RpcCallable.call(Object)` of un-annotated interface `alluxio.client.file.BaseFileSystem$RpcCallable`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/client/fs/src/main/java/alluxio/client/file/BaseFileSystem.java","tnLine":470,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.client.file.BaseFileSystem.setAttribute(alluxio.AlluxioURI):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"RESOURCE_LEAK","tnDesc":"resource of type `alluxio.master.meta.DefaultMetaMaster$LostMasterDetectionHeartbeatExecutor` acquired by call to `new()` at line 225 is not released after line 225.","tnFile":"core/server/master/src/main/java/alluxio/master/meta/DefaultMetaMaster.java","tnLine":225,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.meta.DefaultMetaMaster.start(java.lang.Boolean):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"RESOURCE_LEAK","tnDesc":"resource of type `java.lang.Process` acquired by call to `exec(...)` at line 388 is not released after line 388.","tnFile":"examples/src/main/java/alluxio/cli/JournalCrashTest.java","tnLine":388,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.JournalCrashTest.startMaster():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `boolean ForkJoinPool$ManagedBlocker.block()` of un-annotated interface `alluxio.concurrent.jsr.ForkJoinPool$ManagedBlocker`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.underfs.UnderFileSystem` is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/concurrent/ManagedBlockingUfsForwarder.java","tnLine":406,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.ManagedBlockingUfsForwarder.open(java.lang.String):java.io.InputStream","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String Command.getCommandName()` of un-annotated interface `alluxio.cli.Command`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/TailCommand.java","tnLine":106,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.TailCommand.validateArgs(org.apache.commons.cli.CommandLine):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.error(String,Object)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/underfs/ObjectUnderFileSystem.java","tnLine":625,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.ObjectUnderFileSystem.mkdirs(java.lang.String,alluxio.underfs.options.MkdirsOptions):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `Server Registry.get(Class)` indirectly reads without synchronization from container `this.mRegistry` via call to `get`. Potentially races with write in method `Registry.add(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/server/common/src/main/java/alluxio/Registry.java","tnLine":67,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.Registry.get(java.lang.Class):alluxio.Server","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `UserState UserStateFactory.create(Subject,AlluxioConfiguration,boolean)` of un-annotated interface `alluxio.security.user.UserStateFactory`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/DuCommand.java","tnLine":73,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.DuCommand.<init>(alluxio.client.file.FileSystemContext)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `ufs.get()` could be null and is dereferenced at line 589.","tnFile":"core/server/master/src/main/java/alluxio/master/file/activesync/ActiveSyncManager.java","tnLine":589,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.file.activesync.ActiveSyncManager.stop():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `Set HeapInodeStore.allInodes()` reads without synchronization from container `this.mInodes` via call to `values`. Potentially races with write in method `HeapInodeStore.restoreFromCheckpoint(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/server/master/src/main/java/alluxio/master/metastore/heap/HeapInodeStore.java","tnLine":116,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.metastore.heap.HeapInodeStore.allInodes():java.util.Set","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `URIStatus FileSystem.getStatus(AlluxioURI)` of un-annotated interface `alluxio.client.file.FileSystem`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/TestCommand.java","tnLine":141,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.TestCommand.run(org.apache.commons.cli.CommandLine):int","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `int CopyFromLocalCommand.run(CommandLine)` indirectly reads with synchronization from `this.mCpCommand.mCopyFromLocalBufferSize`. Potentially races with unsynchronized write in method `CopyFromLocalCommand.validateArgs(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"shell/src/main/java/alluxio/cli/fs/command/CopyFromLocalCommand.java","tnLine":83,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.CopyFromLocalCommand.run(org.apache.commons.cli.CommandLine):int","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `BlockStoreMeta BlockStoreMeta$Factory.createFull(BlockMetadataManager)` indirectly mutates container `lostStorages` via call to `addAll` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/server/worker/src/main/java/alluxio/worker/block/BlockStoreMeta.java","tnLine":52,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.worker.block.BlockStoreMeta$Factory.createFull(alluxio.worker.block.BlockMetadataManager):alluxio.worker.block.BlockStoreMeta","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void FileSystem.rename(AlluxioURI,AlluxioURI)` of un-annotated interface `alluxio.client.file.FileSystem`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/MvCommand.java","tnLine":55,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.MvCommand.run(org.apache.commons.cli.CommandLine):int","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `long ForkJoinPool.getStealCount()` reads without synchronization from `this.workQueues`. Potentially races with write in method `ForkJoinPool.registerWorker(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"core/common/src/main/java/alluxio/concurrent/jsr/ForkJoinPool.java","tnLine":2066,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.jsr.ForkJoinPool.getStealCount():long","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void ByteIOUtils.writeShort(byte[],int,short)` writes to field `buf.[_]` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/common/src/main/java/alluxio/util/io/ByteIOUtils.java","tnLine":146,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.util.io.ByteIOUtils.writeShort(byte[],int,short):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `UserState UserStateFactory.create(Subject,AlluxioConfiguration,boolean)` of un-annotated interface `alluxio.security.user.UserStateFactory`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/CountCommand.java","tnLine":37,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.CountCommand.<init>(alluxio.client.file.FileSystemContext)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void ReadRequestContext.setPosToQueue(long)` writes to field `this.mPosToQueue` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/server/worker/src/main/java/alluxio/worker/grpc/ReadRequestContext.java","tnLine":185,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.worker.grpc.ReadRequestContext.setPosToQueue(long):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"RESOURCE_LEAK","tnDesc":"resource of type `org.apache.spark.api.java.JavaSparkContext` acquired by call to `new()` at line 204 is not released after line 207.","tnFile":"integration/checker/src/main/java/alluxio/checker/SparkIntegrationChecker.java","tnLine":207,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.checker.SparkIntegrationChecker.main(java.lang.String[]):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Authority URI.getAuthority()` of un-annotated interface `alluxio.uri.URI`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/base/src/main/java/alluxio/AlluxioURI.java","tnLine":482,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.AlluxioURI.toString():java.lang.String","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `long InodeView.getId()` of un-annotated interface `alluxio.master.file.meta.InodeView`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/server/master/src/main/java/alluxio/master/file/meta/TtlBucket.java","tnLine":95,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.file.meta.TtlBucket.addInode(alluxio.master.file.meta.Inode):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `ExecutorService ExecutorServiceFactory.create()` of un-annotated interface `alluxio.util.executor.ExecutorServiceFactory`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"underfs/cos/src/main/java/alluxio/underfs/cos/COSUnderFileSystemFactory.java","tnLine":45,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.cos.COSUnderFileSystemFactory.create(java.lang.String,alluxio.underfs.UnderFileSystemConfiguration):alluxio.underfs.UnderFileSystem","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String Command.getCommandName()` of un-annotated interface `alluxio.cli.Command`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.cli.fs.command.AbstractFileSystemCommand` is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/GetSyncPathListCommand.java","tnLine":78,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.GetSyncPathListCommand.validateArgs(org.apache.commons.cli.CommandLine):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `ForkJoinTask ForkJoinPool.nextTaskFor(ForkJoinPool$WorkQueue)` indirectly reads without synchronization from `this.workQueues`. Potentially races with write in method `ForkJoinPool.registerWorker(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"core/common/src/main/java/alluxio/concurrent/jsr/ForkJoinPool.java","tnLine":1607,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.jsr.ForkJoinPool.nextTaskFor(alluxio.concurrent.jsr.ForkJoinPool$WorkQueue):alluxio.concurrent.jsr.ForkJoinTask","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object ObjectUnderFileSystem$ObjectStoreOperation.apply()` of un-annotated interface `alluxio.underfs.ObjectUnderFileSystem$ObjectStoreOperation`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/underfs/ObjectUnderFileSystem.java","tnLine":450,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.ObjectUnderFileSystem.deleteExistingDirectory(java.lang.String,alluxio.underfs.options.DeleteOptions):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object UnderFileSystemWithLogging$UfsCallable.call()` of un-annotated interface `alluxio.underfs.UnderFileSystemWithLogging$UfsCallable`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.underfs.UnderFileSystem` is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/underfs/UnderFileSystemWithLogging.java","tnLine":684,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.UnderFileSystemWithLogging.openExistingFile(java.lang.String):java.io.InputStream","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `jobInfo.getStatus()` could be null and is dereferenced at line 74.","tnFile":"job/common/src/main/java/alluxio/job/wire/JobInfo.java","tnLine":74,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.job.wire.JobInfo.<init>(alluxio.grpc.JobInfo)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `boolean StoredObject.exists()` of un-annotated interface `org.javaswift.joss.model.StoredObject`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"underfs/swift/src/main/java/alluxio/underfs/swift/SwiftUnderFileSystem.java","tnLine":348,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.swift.SwiftUnderFileSystem.getObjectStatus(java.lang.String):alluxio.underfs.ObjectUnderFileSystem$ObjectStatus","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object UnderFileSystemWithLogging$UfsCallable.call()` of un-annotated interface `alluxio.underfs.UnderFileSystemWithLogging$UfsCallable`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.underfs.UnderFileSystem` is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/underfs/UnderFileSystemWithLogging.java","tnLine":314,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.UnderFileSystemWithLogging.getAclPair(java.lang.String):alluxio.collections.Pair","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `List CommonUtils.getGroups(String,AlluxioConfiguration)` indirectly reads without synchronization from `group.GroupMappingService$Factory.sCachedGroupMapping`. Potentially races with write in method `CommonUtils.getGroups(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/common/src/main/java/alluxio/util/CommonUtils.java","tnLine":374,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.util.CommonUtils.getGroups(java.lang.String,alluxio.conf.AlluxioConfiguration):java.util.List","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `List BaseFileSystem.getBlockLocations(AlluxioURI)` reads without synchronization from container `locations` via call to `isEmpty`. Potentially races with write in method `BaseFileSystem.getBlockLocations(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/client/fs/src/main/java/alluxio/client/file/BaseFileSystem.java","tnLine":271,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.client.file.BaseFileSystem.getBlockLocations(alluxio.AlluxioURI):java.util.List","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.info(String)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/ValidateConf.java","tnLine":35,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.ValidateConf.main(java.lang.String[]):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.info(String,Object)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/server/master/src/main/java/alluxio/master/file/FileSystemMasterFactory.java","tnLine":49,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.file.FileSystemMasterFactory.create(alluxio.master.MasterRegistry,alluxio.master.CoreMasterContext):alluxio.master.file.FileSystemMaster","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Enum AlluxioConfiguration.getEnum(PropertyKey,Class)` of un-annotated interface `alluxio.conf.AlluxioConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/util/SecurityUtils.java","tnLine":55,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.util.SecurityUtils.isAuthenticationEnabled(alluxio.conf.AlluxioConfiguration):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String AlluxioConfiguration.get(PropertyKey)` of un-annotated interface `alluxio.conf.AlluxioConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"integration/fuse/src/main/java/alluxio/fuse/AlluxioFuseFileSystem.java","tnLine":124,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.fuse.AlluxioFuseFileSystem.<init>(alluxio.client.file.FileSystem,alluxio.fuse.AlluxioFuseOptions,alluxio.conf.AlluxioConfiguration)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.error(String)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"underfs/local/src/main/java/alluxio/underfs/local/LocalUnderFileSystem.java","tnLine":174,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.local.LocalUnderFileSystem.getBlockSizeByte(java.lang.String):long","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"RESOURCE_LEAK","tnDesc":"resource of type `alluxio.client.meta.RetryHandlingMetaMasterClient` acquired by call to `getMetaMasterClient()` at line 124 is not released after line 132.\n**Note**: potential exception at line 126","tnFile":"tests/src/main/java/alluxio/master/backcompat/BackwardsCompatibilityJournalGenerator.java","tnLine":132,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.backcompat.BackwardsCompatibilityJournalGenerator.main(java.lang.String[]):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `long AlluxioConfiguration.getMs(PropertyKey)` of un-annotated interface `alluxio.conf.AlluxioConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/client/fs/src/main/java/alluxio/client/file/BaseFileSystem.java","tnLine":113,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.client.file.BaseFileSystem.create(alluxio.client.file.FileSystemContext,boolean):alluxio.client.file.BaseFileSystem","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String URI.getPath()` of un-annotated interface `alluxio.uri.URI`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/base/src/main/java/alluxio/AlluxioURI.java","tnLine":237,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.AlluxioURI.getName():java.lang.String","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `long AlluxioConfiguration.getBytes(PropertyKey)` of un-annotated interface `alluxio.conf.AlluxioConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/util/network/NetworkAddressUtils.java","tnLine":659,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.util.network.NetworkAddressUtils.pingService(java.net.InetSocketAddress,alluxio.grpc.ServiceType,alluxio.conf.AlluxioConfiguration,alluxio.security.user.UserState):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `int ChownCommand.run(CommandLine)` writes to field `this.mOwner` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"shell/src/main/java/alluxio/cli/fs/command/ChownCommand.java","tnLine":125,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.ChownCommand.run(org.apache.commons.cli.CommandLine):int","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String URI.getPath()` of un-annotated interface `alluxio.uri.URI`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"underfs/local/src/main/java/alluxio/underfs/local/LocalUnderFileSystem.java","tnLine":374,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.local.LocalUnderFileSystem.renameDirectory(java.lang.String,java.lang.String):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object `fileWriter` last assigned on line 186 could be null and is dereferenced at line 188.","tnFile":"shell/src/main/java/alluxio/cli/ConfigurationDocGenerator.java","tnLine":188,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.ConfigurationDocGenerator.writeYMLFile(java.util.Collection,java.lang.String):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `long InodeDirectoryIdGenerator.getNewDirectoryId(JournalContext)` indirectly reads with synchronization from `this.mNextDirectoryId.mContainerId`. Potentially races with unsynchronized write in method `InodeDirectoryIdGenerator.processJournalEntry(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/server/master/src/main/java/alluxio/master/file/meta/InodeDirectoryIdGenerator.java","tnLine":59,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.file.meta.InodeDirectoryIdGenerator.getNewDirectoryId(alluxio.master.journal.JournalContext):long","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String Command.getCommandName()` of un-annotated interface `alluxio.cli.Command`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/DistributedCpCommand.java","tnLine":50,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.DistributedCpCommand.validateArgs(org.apache.commons.cli.CommandLine):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String Command.getCommandName()` of un-annotated interface `alluxio.cli.Command`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/DuCommand.java","tnLine":192,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.DuCommand.validateArgs(org.apache.commons.cli.CommandLine):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String Command.getCommandName()` of un-annotated interface `alluxio.cli.Command`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.cli.fs.command.AbstractFileSystemCommand` is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/CheckConsistencyCommand.java","tnLine":62,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.CheckConsistencyCommand.validateArgs(org.apache.commons.cli.CommandLine):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void ChannelAuthenticator$DefaultAuthenticatedChannel.authenticate()` writes to field `this.mChannel` outside of synchronization.\n Reporting because a superclass `class io.grpc.Channel` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/common/src/main/java/alluxio/security/authentication/ChannelAuthenticator.java","tnLine":168,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.security.authentication.ChannelAuthenticator$DefaultAuthenticatedChannel.authenticate():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `InstancedConfiguration HadoopConfigurationUtils.mergeHadoopConfiguration(Configuration,AlluxioProperties)` indirectly writes to field `conf.PropertyKey.DEPRECATED_CHECKER.mAnnotatedKeys` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/client/hdfs/src/main/java/alluxio/hadoop/HadoopConfigurationUtils.java","tnLine":62,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.hadoop.HadoopConfigurationUtils.mergeHadoopConfiguration(org.apache.hadoop.conf.Configuration,alluxio.conf.AlluxioProperties):alluxio.conf.InstancedConfiguration","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void JobMasterClient.close()` of un-annotated interface `alluxio.client.job.JobMasterClient`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"job/client/src/main/java/alluxio/client/job/JobMasterClientPool.java","tnLine":49,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.client.job.JobMasterClientPool.close():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String URI.getPath()` of un-annotated interface `alluxio.uri.URI`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fsadmin/command/UfsCommand.java","tnLine":72,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fsadmin.command.UfsCommand.run(org.apache.commons.cli.CommandLine):int","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `UserState UserStateFactory.create(Subject,AlluxioConfiguration,boolean)` of un-annotated interface `alluxio.security.user.UserStateFactory`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/HeadCommand.java","tnLine":51,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.HeadCommand.<init>(alluxio.client.file.FileSystemContext)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `int FieldIndex.size()` of un-annotated interface `alluxio.collections.FieldIndex`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"job/server/src/main/java/alluxio/master/job/JobMaster.java","tnLine":330,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.job.JobMaster.getWorkerInfoList():java.util.List","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void LRFUEvictor.onRemoveBlockFromIterator(long)` mutates container `this.mBlockIdToLastUpdateTime` via call to `remove` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"core/server/worker/src/main/java/alluxio/worker/block/evictor/LRFUEvictor.java","tnLine":169,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.worker.block.evictor.LRFUEvictor.onRemoveBlockFromIterator(long):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `missingDirContext.getOptions()` could be null and is dereferenced at line 686.","tnFile":"core/server/master/src/main/java/alluxio/master/file/meta/InodeTree.java","tnLine":686,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.file.meta.InodeTree.createPath(alluxio.master.file.RpcContext,alluxio.master.file.meta.LockedInodePath,alluxio.master.file.contexts.CreateFileContext):java.util.List","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `ExecutorService ExecutorServiceFactory.create()` of un-annotated interface `alluxio.util.executor.ExecutorServiceFactory`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"underfs/oss/src/main/java/alluxio/underfs/oss/OSSUnderFileSystemFactory.java","tnLine":45,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.oss.OSSUnderFileSystemFactory.create(java.lang.String,alluxio.underfs.UnderFileSystemConfiguration):alluxio.underfs.UnderFileSystem","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object `journal.mAsyncWriter` last assigned on line 98 could be null and is dereferenced by call to `losePrimacy()` at line 98.","tnFile":"core/server/common/src/main/java/alluxio/master/journal/ufs/UfsJournalSystem.java","tnLine":98,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.journal.ufs.UfsJournalSystem.losePrimacy():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.debug(String,Object,Object)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/server/worker/src/main/java/alluxio/worker/block/AsyncBlockRemover.java","tnLine":72,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.worker.block.AsyncBlockRemover.addBlocksToDelete(java.util.List):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Access Account.authenticate()` of un-annotated interface `org.javaswift.joss.model.Account`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"underfs/swift/src/main/java/alluxio/underfs/swift/SwiftUnderFileSystemFactory.java","tnLine":33,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.swift.SwiftUnderFileSystemFactory.create(java.lang.String,alluxio.conf.AlluxioConfiguration):java.lang.Object","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String URI.getScheme()` of un-annotated interface `alluxio.uri.URI`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/base/src/main/java/alluxio/AlluxioURI.java","tnLine":325,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.AlluxioURI.hasScheme():boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.error(String)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/underfs/ObjectUnderFileSystem.java","tnLine":652,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.ObjectUnderFileSystem.openExistingFile(java.lang.String,alluxio.underfs.options.OpenOptions):java.io.InputStream","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String URI.getPath()` of un-annotated interface `alluxio.uri.URI`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/base/src/main/java/alluxio/AlluxioURI.java","tnLine":272,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.AlluxioURI.getPath():java.lang.String","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object `ufs` last assigned on line 2616 could be null and is dereferenced at line 2618.","tnFile":"core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java","tnLine":2618,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.file.DefaultFileSystemMaster.prepareForMount(alluxio.AlluxioURI,long,alluxio.master.file.contexts.MountContext):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `ufsResource.get()` could be null and is dereferenced at line 2770.","tnFile":"core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java","tnLine":2770,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.file.DefaultFileSystemMaster.mountInternal(java.util.function.Supplier,alluxio.master.file.meta.LockedInodePath,alluxio.AlluxioURI,long,alluxio.master.file.contexts.MountContext):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String Command.getCommandName()` of un-annotated interface `alluxio.cli.Command`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/PersistCommand.java","tnLine":101,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.PersistCommand.validateArgs(org.apache.commons.cli.CommandLine):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.error(String)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.underfs.ObjectUnderFileSystem` is annotated `@ThreadSafe`.","tnFile":"underfs/kodo/src/main/java/alluxio/underfs/kodo/KodoUnderFileSystem.java","tnLine":210,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.kodo.KodoUnderFileSystem.openObject(java.lang.String,alluxio.underfs.options.OpenOptions,alluxio.retry.RetryPolicy):java.io.InputStream","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Authority URI.getAuthority()` of un-annotated interface `alluxio.uri.URI`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/base/src/main/java/alluxio/uri/StandardURI.java","tnLine":78,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.uri.StandardURI.<init>(alluxio.uri.URI,java.lang.String)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"RESOURCE_LEAK","tnDesc":"resource of type `alluxio.master.journal.PatchedInputChunked` acquired by call to `CompoundCheckpointFormat$CompoundCheckpointReader(...)` at line 96 is not released after line 105.","tnFile":"core/server/common/src/main/java/alluxio/master/journal/tool/AbstractJournalDumper.java","tnLine":105,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.journal.tool.AbstractJournalDumper.readCompoundCheckpoint(alluxio.master.journal.checkpoint.CheckpointInputStream,java.nio.file.Path):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object `results` last assigned on line 810 could be null and is dereferenced at line 811.","tnFile":"examples/src/main/java/alluxio/examples/UnderFileSystemCommonOperations.java","tnLine":811,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.examples.UnderFileSystemCommonOperations.objectCommonPrefixesListStatusNonRecursiveTest():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.error(String)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/server/common/src/main/java/alluxio/cli/extensions/ExtensionsShellUtils.java","tnLine":61,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.extensions.ExtensionsShellUtils.getServerHostnames():java.util.Set","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.error(String)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/server/common/src/main/java/alluxio/cli/extensions/ExtensionsShellUtils.java","tnLine":52,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.extensions.ExtensionsShellUtils.getMasterHostnames():java.util.List","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `int ChgrpCommand.run(CommandLine)` writes to field `this.mGroup` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"shell/src/main/java/alluxio/cli/fs/command/ChgrpCommand.java","tnLine":91,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.ChgrpCommand.run(org.apache.commons.cli.CommandLine):int","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void MiniBenchmark.main(java.lang.String[])` indirectly writes to field `cli.MiniBenchmark.sConcurrency` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"examples/src/main/java/alluxio/cli/MiniBenchmark.java","tnLine":124,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.MiniBenchmark.main(java.lang.String[]):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void FileSystem.unmount(AlluxioURI)` of un-annotated interface `alluxio.client.file.FileSystem`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/UnmountCommand.java","tnLine":52,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.UnmountCommand.runPlainPath(alluxio.AlluxioURI,org.apache.commons.cli.CommandLine):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object UnderFileSystemWithLogging$UfsCallable.call()` of un-annotated interface `alluxio.underfs.UnderFileSystemWithLogging$UfsCallable`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.underfs.UnderFileSystem` is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/underfs/UnderFileSystemWithLogging.java","tnLine":654,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.UnderFileSystemWithLogging.open(java.lang.String):java.io.InputStream","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Authority URI.getAuthority()` of un-annotated interface `alluxio.uri.URI`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/base/src/main/java/alluxio/AlluxioURI.java","tnLine":148,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.AlluxioURI.getAuthority():alluxio.uri.Authority","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Enum AlluxioConfiguration.getEnum(PropertyKey,Class)` of un-annotated interface `alluxio.conf.AlluxioConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/util/network/NettyUtils.java","tnLine":88,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.util.network.NettyUtils.getServerChannelClass(boolean,alluxio.conf.AlluxioConfiguration):java.lang.Class","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Authority URI.getAuthority()` of un-annotated interface `alluxio.uri.URI`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/base/src/main/java/alluxio/AlluxioURI.java","tnLine":382,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.AlluxioURI.isRoot():boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.debug(String)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/underfs/ObjectUnderFileSystem.java","tnLine":517,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.ObjectUnderFileSystem.getFileLocations(java.lang.String,alluxio.underfs.options.FileLocationOptions):java.util.List","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.info(String,Object)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/resource/DynamicResourcePool.java","tnLine":313,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.resource.DynamicResourcePool.acquire(long,java.util.concurrent.TimeUnit):java.lang.Object","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `long InodeView.getCreationTimeMs()` of un-annotated interface `alluxio.master.file.meta.InodeView`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/server/master/src/main/java/alluxio/master/file/meta/TtlBucketList.java","tnLine":142,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.file.meta.TtlBucketList.remove(alluxio.master.file.meta.InodeView):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `ForkJoinTask ForkJoinPool.submit(Runnable)` indirectly reads without synchronization from `ws.[_]`. Potentially races with write in method `ForkJoinPool.externalPush(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"core/common/src/main/java/alluxio/concurrent/jsr/ForkJoinPool.java","tnLine":1904,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.jsr.ForkJoinPool.submit(java.lang.Runnable):alluxio.concurrent.jsr.ForkJoinTask","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.error(String)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"underfs/s3a/src/main/java/alluxio/underfs/s3a/S3AUnderFileSystem.java","tnLine":372,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.s3a.S3AUnderFileSystem.getObjectListingChunk(java.lang.String,boolean):alluxio.underfs.ObjectUnderFileSystem$ObjectListingChunk","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `long JobMasterClient.run(JobConfig)` of un-annotated interface `alluxio.client.job.JobMasterClient`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"job/client/src/main/java/alluxio/job/replicate/DefaultReplicationHandler.java","tnLine":44,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.job.replicate.DefaultReplicationHandler.evict(alluxio.AlluxioURI,long,int):long","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object UnderFileSystemWithLogging$UfsCallable.call()` of un-annotated interface `alluxio.underfs.UnderFileSystemWithLogging$UfsCallable`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.underfs.UnderFileSystem` is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/underfs/UnderFileSystemWithLogging.java","tnLine":206,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.UnderFileSystemWithLogging.deleteDirectory(java.lang.String):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String AlluxioConfiguration.get(PropertyKey)` of un-annotated interface `alluxio.conf.AlluxioConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/server/master/src/main/java/alluxio/underfs/MasterUfsManager.java","tnLine":67,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.MasterUfsManager.connectUfs(alluxio.underfs.UnderFileSystem):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"RESOURCE_LEAK","tnDesc":"resource of type `alluxio.master.journal.PatchedInputChunked` acquired by call to `CompoundCheckpointFormat$CompoundCheckpointReader(...)` at line 149 is not released after line 162.","tnFile":"core/server/common/src/main/java/alluxio/master/journal/JournalUtils.java","tnLine":162,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.journal.JournalUtils.restoreFromCheckpoint(alluxio.master.journal.checkpoint.CheckpointInputStream,java.util.List):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object BaseFileSystem$RpcCallable.call(Object)` of un-annotated interface `alluxio.client.file.BaseFileSystem$RpcCallable`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/client/fs/src/main/java/alluxio/client/file/BaseFileSystem.java","tnLine":342,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.client.file.BaseFileSystem.mount(alluxio.AlluxioURI,alluxio.AlluxioURI):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `ForkJoinTask ForkJoinPool.pollSubmission()` indirectly reads without synchronization from `this.workQueues`. Potentially races with write in method `ForkJoinPool.registerWorker(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"core/common/src/main/java/alluxio/concurrent/jsr/ForkJoinPool.java","tnLine":2140,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.jsr.ForkJoinPool.pollSubmission():alluxio.concurrent.jsr.ForkJoinTask","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void LogUtils.warnWithException(Logger,String,java.lang.Object[])` reads without synchronization from `args.[_]`. Potentially races with write in method `LogUtils.warnWithException(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/common/src/main/java/alluxio/util/LogUtils.java","tnLine":129,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.util.LogUtils.warnWithException(org.slf4j.Logger,java.lang.String,java.lang.Object[]):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void AuthenticationServer.close()` of un-annotated interface `alluxio.security.authentication.AuthenticationServer`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"job/server/src/main/java/alluxio/master/AlluxioJobMaster.java","tnLine":45,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.AlluxioJobMaster.main(java.lang.String[]):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `boolean ForkJoinPool.awaitQuiescence(long,TimeUnit)` indirectly reads without synchronization from `this.workQueues`. Potentially races with write in method `ForkJoinPool.registerWorker(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"core/common/src/main/java/alluxio/concurrent/jsr/ForkJoinPool.java","tnLine":2349,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.jsr.ForkJoinPool.awaitQuiescence(long,java.util.concurrent.TimeUnit):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.warn(String,Object)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/server/worker/src/main/java/alluxio/worker/block/evictor/GreedyEvictor.java","tnLine":81,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.worker.block.evictor.GreedyEvictor.freeSpaceWithView(long,alluxio.worker.block.BlockStoreLocation,alluxio.worker.block.BlockMetadataEvictorView,alluxio.worker.block.evictor.Evictor$Mode):alluxio.worker.block.evictor.EvictionPlan","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"RESOURCE_LEAK","tnDesc":"resource of type `alluxio.client.block.stream.GrpcDataWriter` acquired by call to `create(...)` at line 41 is not released after line 41.","tnFile":"core/client/fs/src/main/java/alluxio/client/block/stream/UnderFileSystemFileOutStream.java","tnLine":41,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.client.block.stream.UnderFileSystemFileOutStream.create(alluxio.client.file.FileSystemContext,alluxio.wire.WorkerNetAddress,alluxio.client.file.options.OutStreamOptions):alluxio.client.block.stream.UnderFileSystemFileOutStream","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `UserState UserStateFactory.create(Subject,AlluxioConfiguration,boolean)` of un-annotated interface `alluxio.security.user.UserStateFactory`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/SetFaclCommand.java","tnLine":84,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.SetFaclCommand.<init>(alluxio.client.file.FileSystemContext)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Optional PathConfiguration.getConfiguration(AlluxioURI,PropertyKey)` of un-annotated interface `alluxio.conf.path.PathConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/conf/path/SpecificPathConfiguration.java","tnLine":173,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.conf.path.SpecificPathConfiguration.getSource(alluxio.conf.PropertyKey):alluxio.conf.Source","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"UNSAFE_GUARDED_BY_ACCESS","tnDesc":"The field `alluxio.master.file.meta.MountTable.mState` is annotated with `@GuardedBy(\"mReadLock,mWriteLock\")`, but the lock `mReadLock,mWriteLock` is not held during the access to the field at line 411. Since the current method is non-private, it can be called from outside the current class without synchronization. Consider wrapping the access in a `synchronized(mReadLock,mWriteLock)` block or making the method private.","tnFile":"core/server/master/src/main/java/alluxio/master/file/meta/MountTable.java","tnLine":411,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.file.meta.MountTable.getMountInfo(long):alluxio.master.file.meta.options.MountInfo","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `int AlluxioConfiguration.getInt(PropertyKey)` of un-annotated interface `alluxio.conf.AlluxioConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"underfs/cos/src/main/java/alluxio/underfs/cos/COSUnderFileSystem.java","tnLine":182,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.cos.COSUnderFileSystem.getObjectListingChunk(java.lang.String,boolean):alluxio.underfs.ObjectUnderFileSystem$ObjectListingChunk","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `long ForkJoinPool.getQueuedTaskCount()` reads without synchronization from `this.workQueues`. Potentially races with write in method `ForkJoinPool.registerWorker(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"core/common/src/main/java/alluxio/concurrent/jsr/ForkJoinPool.java","tnLine":2087,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.jsr.ForkJoinPool.getQueuedTaskCount():long","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `Object ForkJoinTask.invoke()` indirectly writes to field `w.top` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"core/common/src/main/java/alluxio/concurrent/jsr/ForkJoinTask.java","tnLine":913,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.jsr.ForkJoinTask.invoke():java.lang.Object","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.error(String)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"underfs/web/src/main/java/alluxio/underfs/web/WebUnderFileSystem.java","tnLine":67,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.web.WebUnderFileSystem.<init>(alluxio.AlluxioURI,alluxio.underfs.UnderFileSystemConfiguration)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void Master.start()` reads with synchronization from container `this.mProperties` via call to `get`. Potentially races with unsynchronized write in method `Master.updateConf(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"minicluster/src/main/java/alluxio/multi/process/Master.java","tnLine":70,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.multi.process.Master.start():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void FileSystem.createDirectory(AlluxioURI,CreateDirectoryPOptions)` of un-annotated interface `alluxio.client.file.FileSystem`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/MkdirCommand.java","tnLine":56,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.MkdirCommand.run(org.apache.commons.cli.CommandLine):int","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `long WriteRequestContext.getPos()` reads without synchronization from `this.mPos`. Potentially races with write in method `WriteRequestContext.setPos(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/server/worker/src/main/java/alluxio/worker/grpc/WriteRequestContext.java","tnLine":82,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.worker.grpc.WriteRequestContext.getPos():long","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `DefaultBlockStoreMeta.<init>(BlockMetadataManager,boolean)` mutates container `lostStorages` via call to `addAll` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/server/worker/src/main/java/alluxio/worker/block/DefaultBlockStoreMeta.java","tnLine":192,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.worker.block.DefaultBlockStoreMeta.<init>(alluxio.worker.block.BlockMetadataManager,boolean)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object UnderFileSystemWithLogging$UfsCallable.call()` of un-annotated interface `alluxio.underfs.UnderFileSystemWithLogging$UfsCallable`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.underfs.UnderFileSystem` is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/underfs/UnderFileSystemWithLogging.java","tnLine":475,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.UnderFileSystemWithLogging.getStatus(java.lang.String):alluxio.underfs.UfsStatus","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String Command.getCommandName()` of un-annotated interface `alluxio.cli.Command`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/server/common/src/main/java/alluxio/cli/extensions/command/InstallCommand.java","tnLine":102,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.extensions.command.InstallCommand.validateArgs(org.apache.commons.cli.CommandLine):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"RESOURCE_LEAK","tnDesc":"resource of type `java.lang.Process` acquired by call to `exec(...)` at line 64 is not released after line 65.","tnFile":"core/server/common/src/main/java/alluxio/cli/validation/Utils.java","tnLine":65,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.validation.Utils.isAlluxioRunning(java.lang.String):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String Command.getCommandName()` of un-annotated interface `alluxio.cli.Command`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/HelpCommand.java","tnLine":48,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.HelpCommand.printCommandInfo(alluxio.cli.Command,java.io.PrintWriter):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `boolean FieldIndex.containsField(Object)` of un-annotated interface `alluxio.collections.FieldIndex`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/base/src/main/java/alluxio/collections/IndexedSet.java","tnLine":248,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.collections.IndexedSet.contains(alluxio.collections.IndexDefinition,java.lang.Object):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object `ex` last assigned on line 362 could be null and is dereferenced at line 386.","tnFile":"core/common/src/main/java/alluxio/AbstractClient.java","tnLine":386,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.AbstractClient.retryRPCInternal(alluxio.AbstractClient$RpcCallable,java.util.function.Supplier):java.lang.Object","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void ServerConfiguration.merge(Map,Source)` reads without synchronization from `conf.ServerConfiguration.sConf`. Potentially races with write in method `ServerConfiguration.loadClusterDefaultsIfNotLoaded(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"core/server/common/src/main/java/alluxio/conf/ServerConfiguration.java","tnLine":91,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.conf.ServerConfiguration.merge(java.util.Map,alluxio.conf.Source):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void ForkJoinPool.externalPush(ForkJoinTask)` writes to field `a.[_]` outside of synchronization.\n Reporting because this access may occur on a background thread.","tnFile":"core/common/src/main/java/alluxio/concurrent/jsr/ForkJoinPool.java","tnLine":1651,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.jsr.ForkJoinPool.externalPush(alluxio.concurrent.jsr.ForkJoinTask):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void ServerConfiguration.set(PropertyKey,Object)` indirectly reads without synchronization from `conf.ServerConfiguration.sConf`. Potentially races with write in method `ServerConfiguration.loadClusterDefaultsIfNotLoaded(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"core/server/common/src/main/java/alluxio/conf/ServerConfiguration.java","tnLine":102,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.conf.ServerConfiguration.set(alluxio.conf.PropertyKey,java.lang.Object):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `UserState UserStateFactory.create(Subject,AlluxioConfiguration,boolean)` of un-annotated interface `alluxio.security.user.UserStateFactory`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/DistributedLoadCommand.java","tnLine":46,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.DistributedLoadCommand.<init>(alluxio.client.file.FileSystemContext)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `boolean ForkJoinPool$ManagedBlocker.block()` of un-annotated interface `alluxio.concurrent.jsr.ForkJoinPool$ManagedBlocker`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.underfs.UnderFileSystem` is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/concurrent/ManagedBlockingUfsForwarder.java","tnLine":416,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.ManagedBlockingUfsForwarder.open(java.lang.String,alluxio.underfs.options.OpenOptions):java.io.InputStream","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `boolean ForkJoinPool$ManagedBlocker.block()` of un-annotated interface `alluxio.concurrent.jsr.ForkJoinPool$ManagedBlocker`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.underfs.UnderFileSystem` is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/concurrent/ManagedBlockingUfsForwarder.java","tnLine":311,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.ManagedBlockingUfsForwarder.getExistingStatus(java.lang.String):alluxio.underfs.UfsStatus","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.debug(String,Object)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/client/fs/src/main/java/alluxio/client/file/FileSystemUtils.java","tnLine":58,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.client.file.FileSystemUtils.waitCompleted(alluxio.client.file.FileSystem,alluxio.AlluxioURI):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.warn(String,Object)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/underfs/ObjectUnderFileSystem.java","tnLine":536,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.ObjectUnderFileSystem.getFileStatus(java.lang.String):alluxio.underfs.UfsFileStatus","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `Collection ForkJoinTask.invokeAll(Collection)` indirectly reads without synchronization from `w.top`. Potentially races with write in method `ForkJoinTask.get(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"core/common/src/main/java/alluxio/concurrent/jsr/ForkJoinTask.java","tnLine":384,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.jsr.ForkJoinTask.invokeAll(java.util.Collection):java.util.Collection","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `Error WriteRequestContext.getError()` reads without synchronization from `this.mError`. Potentially races with write in method `WriteRequestContext.setError(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/server/worker/src/main/java/alluxio/worker/grpc/WriteRequestContext.java","tnLine":74,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.worker.grpc.WriteRequestContext.getError():alluxio.worker.grpc.Error","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void UfsJournal.format()` indirectly reads without synchronization from container `conf.PropertyKey.DEFAULT_ALIAS_MAP` via call to `get`. Potentially races with write in method `UfsJournal(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/server/common/src/main/java/alluxio/master/journal/ufs/UfsJournal.java","tnLine":323,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.journal.ufs.UfsJournal.format():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `updateMode.getOwnerBits()` could be null and is dereferenced at line 87.","tnFile":"core/base/src/main/java/alluxio/security/authorization/DefaultAccessControlList.java","tnLine":87,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.security.authorization.DefaultAccessControlList.generateChildFileACL(java.lang.Short):alluxio.security.authorization.AccessControlList","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `UserState UserStateFactory.create(Subject,AlluxioConfiguration,boolean)` of un-annotated interface `alluxio.security.user.UserStateFactory`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/MasterInfoCommand.java","tnLine":54,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.MasterInfoCommand.run(org.apache.commons.cli.CommandLine):int","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `String PropertyKey.getDeprecationMessage(PropertyKey)` indirectly writes to field `conf.PropertyKey.DEPRECATED_CHECKER.mAnnotatedKeys` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/common/src/main/java/alluxio/conf/PropertyKey.java","tnLine":4802,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.conf.PropertyKey.getDeprecationMessage(alluxio.conf.PropertyKey):java.lang.String","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String AlluxioConfiguration.get(PropertyKey)` of un-annotated interface `alluxio.conf.AlluxioConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/util/webui/UIFileBlockInfo.java","tnLine":57,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.util.webui.UIFileBlockInfo.<init>(alluxio.wire.FileBlockInfo,alluxio.conf.AlluxioConfiguration)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `List BaseUnderFileSystem.getPhysicalStores()` indirectly writes to field `this.mUri.mUriString` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/common/src/main/java/alluxio/underfs/BaseUnderFileSystem.java","tnLine":125,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.BaseUnderFileSystem.getPhysicalStores():java.util.List","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object BaseFileSystem$RpcCallable.call(Object)` of un-annotated interface `alluxio.client.file.BaseFileSystem$RpcCallable`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/client/fs/src/main/java/alluxio/client/file/BaseFileSystem.java","tnLine":180,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.client.file.BaseFileSystem.createFile(alluxio.AlluxioURI,alluxio.grpc.CreateFilePOptions):alluxio.client.file.FileOutStream","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.debug(String,Object,Object)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"underfs/gcs/src/main/java/alluxio/underfs/gcs/GCSUnderFileSystem.java","tnLine":155,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.gcs.GCSUnderFileSystem.copyObject(java.lang.String,java.lang.String):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `ExecutorService ExecutorServiceFactory.create()` of un-annotated interface `alluxio.util.executor.ExecutorServiceFactory`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"underfs/gcs/src/main/java/alluxio/underfs/gcs/GCSUnderFileSystemFactory.java","tnLine":50,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.gcs.GCSUnderFileSystemFactory.create(java.lang.String,alluxio.underfs.UnderFileSystemConfiguration):alluxio.underfs.UnderFileSystem","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String Command.getCommandName()` of un-annotated interface `alluxio.cli.Command`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/LeaderCommand.java","tnLine":51,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.LeaderCommand.validateArgs(org.apache.commons.cli.CommandLine):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.debug(String,Object)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/server/worker/src/main/java/alluxio/Sessions.java","tnLine":79,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.Sessions.removeSession(long):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void ForkJoinPool.deregisterWorker(ForkJoinWorkerThread,Throwable)` indirectly reads without synchronization from `this.workQueues`. Potentially races with write in method `ForkJoinPool.registerWorker(...)`.\n Reporting because this access may occur on a background thread.","tnFile":"core/common/src/main/java/alluxio/concurrent/jsr/ForkJoinPool.java","tnLine":1204,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.jsr.ForkJoinPool.deregisterWorker(alluxio.concurrent.jsr.ForkJoinWorkerThread,java.lang.Throwable):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"RESOURCE_LEAK","tnDesc":"resource of type `org.rocksdb.DBOptions` acquired by call to `new()` at line 77 is not released after line 79.","tnFile":"core/server/master/src/main/java/alluxio/master/metastore/rocks/RocksBlockStore.java","tnLine":79,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.metastore.rocks.RocksBlockStore.<init>(java.lang.String)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `cmd.getCommandType()` could be null and is dereferenced at line 171.","tnFile":"core/server/worker/src/main/java/alluxio/worker/block/BlockMasterSync.java","tnLine":171,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.worker.block.BlockMasterSync.handleMasterCommand(alluxio.grpc.Command):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `__new(alluxio.concurrent.ManagedBlockingUfsForwarder$23).get()` could be null and is dereferenced at line 326.","tnFile":"core/common/src/main/java/alluxio/concurrent/ManagedBlockingUfsForwarder.java","tnLine":326,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.ManagedBlockingUfsForwarder.isDirectory(java.lang.String):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `Map ServerConfiguration.getNestedProperties(PropertyKey)` reads without synchronization from `conf.ServerConfiguration.sConf`. Potentially races with write in method `ServerConfiguration.loadClusterDefaultsIfNotLoaded(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"core/server/common/src/main/java/alluxio/conf/ServerConfiguration.java","tnLine":308,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.conf.ServerConfiguration.getNestedProperties(alluxio.conf.PropertyKey):java.util.Map","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void AbstractClient.connect()` indirectly reads with synchronization from `this.mServiceVersion`. Potentially races with unsynchronized write in method `AbstractClient.checkVersion(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/common/src/main/java/alluxio/AbstractClient.java","tnLine":235,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.AbstractClient.connect():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void FileSystemContext.releaseBlockWorkerClient(WorkerNetAddress,BlockWorkerClient)` indirectly writes to field `resourceInternal.mLastAccessTimeMs` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/client/fs/src/main/java/alluxio/client/file/FileSystemContext.java","tnLine":496,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.client.file.FileSystemContext.releaseBlockWorkerClient(alluxio.wire.WorkerNetAddress,alluxio.client.block.stream.BlockWorkerClient):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `JobInfo JobMaster.getStatus(long)` reads without synchronization from container `this.mIdToJobCoordinator` via call to `get`. Potentially races with write in method `JobMaster.run(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"job/server/src/main/java/alluxio/master/job/JobMaster.java","tnLine":288,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.job.JobMaster.getStatus(long):alluxio.job.wire.JobInfo","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void InodeLockList.close()` of un-annotated interface `alluxio.master.file.meta.InodeLockList`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/server/master/src/main/java/alluxio/master/file/meta/LockedInodePathList.java","tnLine":46,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.file.meta.LockedInodePathList.close():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void FileSystem.setAttribute(AlluxioURI,SetAttributePOptions)` of un-annotated interface `alluxio.client.file.FileSystem`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/FileSystemCommandUtils.java","tnLine":68,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.FileSystemCommandUtils.setPinned(alluxio.client.file.FileSystem,alluxio.AlluxioURI,boolean,java.util.List):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Acl$AccessControlList InodeMeta$InodeOrBuilder.getAccessAcl()` of un-annotated interface `alluxio.proto.meta.InodeMeta$InodeOrBuilder`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/server/master/src/main/java/alluxio/master/metastore/rocks/RocksInodeStore.java","tnLine":160,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.metastore.rocks.RocksInodeStore.getMutable(long,alluxio.master.metastore.ReadOption):java.util.Optional","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.error(String)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"underfs/cos/src/main/java/alluxio/underfs/cos/COSUnderFileSystem.java","tnLine":306,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.cos.COSUnderFileSystem.openObject(java.lang.String,alluxio.underfs.options.OpenOptions,alluxio.retry.RetryPolicy):java.io.InputStream","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Authority URI.getAuthority()` of un-annotated interface `alluxio.uri.URI`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/base/src/main/java/alluxio/uri/MultiPartSchemeURI.java","tnLine":72,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.uri.MultiPartSchemeURI.createNewPath(java.lang.String,boolean):alluxio.uri.URI","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String AlluxioConfiguration.get(PropertyKey)` of un-annotated interface `alluxio.conf.AlluxioConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/underfs/ObjectUnderFileSystem.java","tnLine":374,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.ObjectUnderFileSystem.create(java.lang.String,alluxio.underfs.options.CreateOptions):java.io.OutputStream","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `UserState UserStateFactory.create(Subject,AlluxioConfiguration,boolean)` of un-annotated interface `alluxio.security.user.UserStateFactory`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/TailCommand.java","tnLine":49,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.TailCommand.<init>(alluxio.client.file.FileSystemContext)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void WriteRequestContext.setCounter(Counter)` writes to field `this.mCounter` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/server/worker/src/main/java/alluxio/worker/grpc/WriteRequestContext.java","tnLine":135,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.worker.grpc.WriteRequestContext.setCounter(com.codahale.metrics.Counter):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `AlluxioConfiguration ConfigurationUtils.getClusterConf(GetConfigurationPResponse,AlluxioConfiguration)` indirectly reads without synchronization from container `conf.PropertyKey.DEFAULT_ALIAS_MAP` via call to `get`. Potentially races with write in method `ConfigurationUtils.defaults()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"core/common/src/main/java/alluxio/util/ConfigurationUtils.java","tnLine":545,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.util.ConfigurationUtils.getClusterConf(alluxio.grpc.GetConfigurationPResponse,alluxio.conf.AlluxioConfiguration):alluxio.conf.AlluxioConfiguration","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void HeapBlockStore.putBlock(long,Block$BlockMeta)` mutates container `this.mBlocks` via call to `put` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/server/master/src/main/java/alluxio/master/metastore/heap/HeapBlockStore.java","tnLine":50,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.metastore.heap.HeapBlockStore.putBlock(long,alluxio.proto.meta.Block$BlockMeta):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `alluxio.underfs.UfsStatus[] BaseUnderFileSystem.listStatus(String,ListOptions)` indirectly writes to field `pathStatus.mName` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/common/src/main/java/alluxio/underfs/BaseUnderFileSystem.java","tnLine":161,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.BaseUnderFileSystem.listStatus(java.lang.String,alluxio.underfs.options.ListOptions):alluxio.underfs.UfsStatus[]","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.error(String,Object)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"underfs/web/src/main/java/alluxio/underfs/web/WebUnderFileSystem.java","tnLine":102,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.web.WebUnderFileSystem.exists(java.lang.String):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `String SecurityUtils.getGroup(UserState,AlluxioConfiguration)` indirectly reads without synchronization from `group.GroupMappingService$Factory.sCachedGroupMapping`. Potentially races with write in method `SecurityUtils.getGroup(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/common/src/main/java/alluxio/util/SecurityUtils.java","tnLine":122,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.util.SecurityUtils.getGroup(alluxio.security.user.UserState,alluxio.conf.AlluxioConfiguration):java.lang.String","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String URI.getPath()` of un-annotated interface `alluxio.uri.URI`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/server/master/src/main/java/alluxio/master/file/meta/MountTable.java","tnLine":160,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.file.meta.MountTable.delete(java.util.function.Supplier,alluxio.AlluxioURI,boolean):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.debug(String,java.lang.Object[])` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/client/fs/src/main/java/alluxio/client/block/AlluxioBlockStore.java","tnLine":283,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.client.block.AlluxioBlockStore.getOutStream(long,long,alluxio.wire.WorkerNetAddress,alluxio.client.file.options.OutStreamOptions):alluxio.client.block.stream.BlockOutStream","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object Gauge.getValue()` of un-annotated interface `com.codahale.metrics.Gauge`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/metrics/MetricsSystem.java","tnLine":498,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.metrics.MetricsSystem.allClientMetrics():java.util.List","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void ChmodCommand.runPlainPath(AlluxioURI,CommandLine)` reads without synchronization from `this.mModeString`. Potentially races with write in method `ChmodCommand.run(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"shell/src/main/java/alluxio/cli/fs/command/ChmodCommand.java","tnLine":57,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.ChmodCommand.runPlainPath(alluxio.AlluxioURI,org.apache.commons.cli.CommandLine):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `long ReadRequestContext.getPosToQueue()` reads without synchronization from `this.mPosToQueue`. Potentially races with write in method `ReadRequestContext.setPosToQueue(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/server/worker/src/main/java/alluxio/worker/grpc/ReadRequestContext.java","tnLine":113,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.worker.grpc.ReadRequestContext.getPosToQueue():long","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `String AlluxioURI.getRootPath()` indirectly writes to field `this.mUriString` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/base/src/main/java/alluxio/AlluxioURI.java","tnLine":298,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.AlluxioURI.getRootPath():java.lang.String","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object `alluxio.util.OSUtils.JAVA_VENDOR_NAME` last assigned on line 28 could be null and is dereferenced at line 30.","tnFile":"core/base/src/main/java/alluxio/util/OSUtils.java","tnLine":30,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.util.OSUtils.<clinit>():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `MoreObjects$ToStringHelper MutableInode.toStringHelper()` reads without synchronization from `this.mLastModificationTimeMs`. Potentially races with write in method `MutableInode.setLastModificationTimeMs(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"core/server/master/src/main/java/alluxio/master/file/meta/MutableInode.java","tnLine":613,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.file.meta.MutableInode.toStringHelper():com.google.common.base.MoreObjects$ToStringHelper","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void HeapInodeStore.writeToCheckpoint(OutputStream)` reads without synchronization from container `this.mInodes` via call to `values`. Potentially races with write in method `HeapInodeStore.restoreFromCheckpoint(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/server/master/src/main/java/alluxio/master/metastore/heap/HeapInodeStore.java","tnLine":132,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.metastore.heap.HeapInodeStore.writeToCheckpoint(java.io.OutputStream):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `boolean ForkJoinPool$ManagedBlocker.block()` of un-annotated interface `alluxio.concurrent.jsr.ForkJoinPool$ManagedBlocker`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.underfs.UnderFileSystem` is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/concurrent/ManagedBlockingUfsForwarder.java","tnLine":476,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.ManagedBlockingUfsForwarder.renameRenamableFile(java.lang.String,java.lang.String):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void RetryHandlingFileSystemMasterClient.afterConnect()` reads without synchronization from `this.mChannel`. Potentially races with write in method `RetryHandlingFileSystemMasterClient.getStatus(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/client/fs/src/main/java/alluxio/client/file/RetryHandlingFileSystemMasterClient.java","tnLine":109,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.client.file.RetryHandlingFileSystemMasterClient.afterConnect():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object UnderFileSystemWithLogging$UfsCallable.call()` of un-annotated interface `alluxio.underfs.UnderFileSystemWithLogging$UfsCallable`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.underfs.UnderFileSystem` is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/underfs/UnderFileSystemWithLogging.java","tnLine":268,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.UnderFileSystemWithLogging.deleteFile(java.lang.String):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void ForkJoinPool.execute(Runnable)` indirectly reads without synchronization from `ws.[_]`. Potentially races with write in method `ForkJoinPool.externalPush(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"core/common/src/main/java/alluxio/concurrent/jsr/ForkJoinPool.java","tnLine":1865,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.jsr.ForkJoinPool.execute(java.lang.Runnable):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `boolean FieldIndex.containsField(Object)` of un-annotated interface `alluxio.collections.FieldIndex`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"integration/fuse/src/main/java/alluxio/fuse/AlluxioFuseFileSystem.java","tnLine":320,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.fuse.AlluxioFuseFileSystem.getattr(java.lang.String,ru.serce.jnrfuse.struct.FileStat):int","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.error(String)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/server/common/src/main/java/alluxio/master/journalv0/ufs/UfsJournalWriter.java","tnLine":323,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.journalv0.ufs.UfsJournalWriter$EntryOutputStream.<init>(alluxio.underfs.UnderFileSystem,java.net.URI,alluxio.master.journalv0.JournalFormatter,alluxio.master.journalv0.ufs.UfsJournalWriter)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void LogUtils.warnWithException(Logger,String,java.lang.Object[])` writes to field `args.[_]` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/common/src/main/java/alluxio/util/LogUtils.java","tnLine":130,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.util.LogUtils.warnWithException(org.slf4j.Logger,java.lang.String,java.lang.Object[]):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void ReadRequestContext.setEof(boolean)` writes to field `this.mEof` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/server/worker/src/main/java/alluxio/worker/grpc/ReadRequestContext.java","tnLine":201,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.worker.grpc.ReadRequestContext.setEof(boolean):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `URIStatus FileSystem.getStatus(AlluxioURI)` of un-annotated interface `alluxio.client.file.FileSystem`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/HeadCommand.java","tnLine":67,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.HeadCommand.runPlainPath(alluxio.AlluxioURI,org.apache.commons.cli.CommandLine):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.info(String,Object)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/server/master/src/main/java/alluxio/master/meta/MetaMasterFactory.java","tnLine":50,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.meta.MetaMasterFactory.create(alluxio.master.MasterRegistry,alluxio.master.CoreMasterContext):alluxio.master.Master","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `List FileSystemMasterClient.checkConsistency(AlluxioURI,CheckConsistencyPOptions)` of un-annotated interface `alluxio.client.file.FileSystemMasterClient`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.cli.fs.command.AbstractFileSystemCommand` is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/CheckConsistencyCommand.java","tnLine":57,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.CheckConsistencyCommand.runPlainPath(alluxio.AlluxioURI,org.apache.commons.cli.CommandLine):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void SaslServerHandler.close()` of un-annotated interface `alluxio.security.authentication.SaslServerHandler`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/security/authentication/DefaultAuthenticationServer.java","tnLine":129,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.security.authentication.DefaultAuthenticationServer.unregisterChannel(java.util.UUID):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `UserState UserStateFactory.create(Subject,AlluxioConfiguration,boolean)` of un-annotated interface `alluxio.security.user.UserStateFactory`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.cli.fs.command.AbstractFileSystemCommand` is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/StopSyncCommand.java","tnLine":35,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.StopSyncCommand.<init>(alluxio.client.file.FileSystemContext)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `pMode.getGroupBits()` could be null and is dereferenced at line 242.","tnFile":"core/base/src/main/java/alluxio/security/authorization/Mode.java","tnLine":242,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.security.authorization.Mode.fromProto(alluxio.grpc.PMode):alluxio.security.authorization.Mode","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `URI URI.createNewPath(String,boolean)` of un-annotated interface `alluxio.uri.URI`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/server/worker/src/main/java/alluxio/worker/file/UnderFileSystemUtils.java","tnLine":47,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.worker.file.UnderFileSystemUtils.prepareFilePath(alluxio.AlluxioURI,java.lang.String,alluxio.client.file.FileSystem,alluxio.underfs.UnderFileSystem):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.error(String)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"underfs/wasb/src/main/java/alluxio/underfs/wasb/WasbUnderFileSystem.java","tnLine":94,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.wasb.WasbUnderFileSystem.getBlockSizeByte(java.lang.String):long","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `String AlluxioURI.toString()` writes to field `this.mUriString` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/base/src/main/java/alluxio/AlluxioURI.java","tnLine":501,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.AlluxioURI.toString():java.lang.String","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `message.getMessageType()` could be null and is dereferenced at line 51.","tnFile":"core/common/src/main/java/alluxio/security/authentication/DefaultSaslHandshakeClientHandler.java","tnLine":51,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.security.authentication.DefaultSaslHandshakeClientHandler.handleSaslMessage(alluxio.grpc.SaslMessage):alluxio.grpc.SaslMessage","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `ServerServiceDefinition BindableService.bindService()` of un-annotated interface `io.grpc.BindableService`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"job/server/src/main/java/alluxio/master/job/JobMaster.java","tnLine":186,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.job.JobMaster.getServices():java.util.Map","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `boolean ForkJoinPool$ManagedBlocker.block()` of un-annotated interface `alluxio.concurrent.jsr.ForkJoinPool$ManagedBlocker`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.underfs.UnderFileSystem` is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/concurrent/ManagedBlockingUfsForwarder.java","tnLine":492,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.ManagedBlockingUfsForwarder.setAclEntries(java.lang.String,java.util.List):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `double ServerConfiguration.getDouble(PropertyKey)` reads without synchronization from `conf.ServerConfiguration.sConf`. Potentially races with write in method `ServerConfiguration.loadClusterDefaultsIfNotLoaded(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"core/server/common/src/main/java/alluxio/conf/ServerConfiguration.java","tnLine":212,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.conf.ServerConfiguration.getDouble(alluxio.conf.PropertyKey):double","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `response.getStatus()` could be null and is dereferenced by call to `fromProto(...)` at line 607.","tnFile":"core/common/src/main/java/alluxio/util/CommonUtils.java","tnLine":607,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.util.CommonUtils.unwrapResponse(alluxio.proto.dataserver.Protocol$Response):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `__new(alluxio.concurrent.ManagedBlockingUfsForwarder$11).get()` could be null and is dereferenced at line 184.","tnFile":"core/common/src/main/java/alluxio/concurrent/ManagedBlockingUfsForwarder.java","tnLine":184,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.ManagedBlockingUfsForwarder.exists(java.lang.String):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object `ufs` last assigned on line 199 could be null and is dereferenced at line 200.","tnFile":"core/server/worker/src/main/java/alluxio/worker/file/FileDataManager.java","tnLine":200,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.worker.file.FileDataManager.ufsFingerprint(long):java.lang.String","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `AlluxioProperties AlluxioConfiguration.copyProperties()` of un-annotated interface `alluxio.conf.AlluxioConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/server/common/src/main/java/alluxio/master/journalv0/ufs/UfsMutableJournal.java","tnLine":52,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.journalv0.ufs.UfsMutableJournal.format():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `List AlluxioConfiguration.getList(PropertyKey,String)` of un-annotated interface `alluxio.conf.AlluxioConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/PinCommand.java","tnLine":55,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.PinCommand.runPlainPath(alluxio.AlluxioURI,org.apache.commons.cli.CommandLine):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void JobMasterClient.close()` of un-annotated interface `alluxio.client.job.JobMasterClient`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"job/client/src/main/java/alluxio/client/job/JobGrpcClientUtils.java","tnLine":57,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.client.job.JobGrpcClientUtils.run(alluxio.job.JobConfig,int,alluxio.conf.AlluxioConfiguration):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void ByteIOUtils.writeByte(byte[],int,byte)` writes to field `buf.[_]` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/common/src/main/java/alluxio/util/io/ByteIOUtils.java","tnLine":112,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.util.io.ByteIOUtils.writeByte(byte[],int,byte):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `int ForkJoinPool.getQueuedSubmissionCount()` reads without synchronization from `this.workQueues`. Potentially races with write in method `ForkJoinPool.registerWorker(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"core/common/src/main/java/alluxio/concurrent/jsr/ForkJoinPool.java","tnLine":2106,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.jsr.ForkJoinPool.getQueuedSubmissionCount():int","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String Command.getCommandName()` of un-annotated interface `alluxio.cli.Command`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/HelpCommand.java","tnLine":114,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.HelpCommand.validateArgs(org.apache.commons.cli.CommandLine):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.error(String)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"underfs/swift/src/main/java/alluxio/underfs/swift/SwiftUnderFileSystem.java","tnLine":370,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.swift.SwiftUnderFileSystem.openObject(java.lang.String,alluxio.underfs.options.OpenOptions,alluxio.retry.RetryPolicy):java.io.InputStream","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `UserState UserStateFactory.create(Subject,AlluxioConfiguration,boolean)` of un-annotated interface `alluxio.security.user.UserStateFactory`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/client/fs/src/main/java/alluxio/client/file/FileSystemContext.java","tnLine":155,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.client.file.FileSystemContext.create(alluxio.conf.AlluxioConfiguration):alluxio.client.file.FileSystemContext","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `int AlluxioConfiguration.getInt(PropertyKey)` of un-annotated interface `alluxio.conf.AlluxioConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"underfs/gcs/src/main/java/alluxio/underfs/gcs/GCSUnderFileSystem.java","tnLine":219,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.gcs.GCSUnderFileSystem.getObjectListingChunk(java.lang.String,boolean):alluxio.underfs.ObjectUnderFileSystem$ObjectListingChunk","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Class AlluxioConfiguration.getClass(PropertyKey)` of un-annotated interface `alluxio.conf.AlluxioConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/conf/path/SpecificPathConfiguration.java","tnLine":153,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.conf.path.SpecificPathConfiguration.getClass(alluxio.conf.PropertyKey):java.lang.Class","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String URI.getPath()` of un-annotated interface `alluxio.uri.URI`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"job/client/src/main/java/alluxio/job/replicate/DefaultReplicationHandler.java","tnLine":55,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.job.replicate.DefaultReplicationHandler.replicate(alluxio.AlluxioURI,long,int):long","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String Command.getCommandName()` of un-annotated interface `alluxio.cli.Command`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/MvCommand.java","tnLine":46,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.MvCommand.validateArgs(org.apache.commons.cli.CommandLine):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `request.getCommand().getType()` could be null and is dereferenced at line 58.","tnFile":"core/server/worker/src/main/java/alluxio/worker/grpc/DelegationWriteHandler.java","tnLine":58,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.worker.grpc.DelegationWriteHandler.createWriterHandler(alluxio.grpc.WriteRequest):alluxio.worker.grpc.AbstractWriteHandler","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object BaseFileSystem$RpcCallable.call(Object)` of un-annotated interface `alluxio.client.file.BaseFileSystem$RpcCallable`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/client/fs/src/main/java/alluxio/client/file/BaseFileSystem.java","tnLine":210,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.client.file.BaseFileSystem.delete(alluxio.AlluxioURI,alluxio.grpc.DeletePOptions):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String AlluxioConfiguration.get(PropertyKey)` of un-annotated interface `alluxio.conf.AlluxioConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/util/CommonUtils.java","tnLine":634,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.util.CommonUtils.isLocalHost(alluxio.wire.WorkerNetAddress,alluxio.conf.AlluxioConfiguration):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Authority URI.getAuthority()` of un-annotated interface `alluxio.uri.URI`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/util/UnderFileSystemUtils.java","tnLine":146,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.util.UnderFileSystemUtils.getBucketName(alluxio.AlluxioURI):java.lang.String","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String Command.getCommandName()` of un-annotated interface `alluxio.cli.Command`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/TestCommand.java","tnLine":80,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.TestCommand.validateArgs(org.apache.commons.cli.CommandLine):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.error(String)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"underfs/s3a/src/main/java/alluxio/underfs/s3a/S3AUnderFileSystem.java","tnLine":259,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.s3a.S3AUnderFileSystem.cleanup():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `boolean ReadRequestContext.isCancel()` reads without synchronization from `this.mCancel`. Potentially races with write in method `ReadRequestContext.setCancel(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/server/worker/src/main/java/alluxio/worker/grpc/ReadRequestContext.java","tnLine":137,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.worker.grpc.ReadRequestContext.isCancel():boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `List GroupMappingService.getGroups(String)` of un-annotated interface `alluxio.security.group.GroupMappingService`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/util/CommonUtils.java","tnLine":375,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.util.CommonUtils.getGroups(java.lang.String,alluxio.conf.AlluxioConfiguration):java.util.List","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void FileSystem.free(AlluxioURI,FreePOptions)` of un-annotated interface `alluxio.client.file.FileSystem`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/FreeCommand.java","tnLine":75,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.FreeCommand.runPlainPath(alluxio.AlluxioURI,org.apache.commons.cli.CommandLine):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `boolean ForkJoinPool$ManagedBlocker.block()` of un-annotated interface `alluxio.concurrent.jsr.ForkJoinPool$ManagedBlocker`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.underfs.UnderFileSystem` is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/concurrent/ManagedBlockingUfsForwarder.java","tnLine":124,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.ManagedBlockingUfsForwarder.deleteDirectory(java.lang.String):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `InodeMeta$Inode$Builder MutableInode.toProtoBuilder()` indirectly reads without synchronization from `this.mLastModificationTimeMs`. Potentially races with write in method `MutableInode.setLastModificationTimeMs(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"core/server/master/src/main/java/alluxio/master/file/meta/MutableInode.java","tnLine":629,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.file.meta.MutableInode.toProtoBuilder():alluxio.proto.meta.InodeMeta$Inode$Builder","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object BaseFileSystem$RpcCallable.call(Object)` of un-annotated interface `alluxio.client.file.BaseFileSystem$RpcCallable`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/client/fs/src/main/java/alluxio/client/file/BaseFileSystem.java","tnLine":522,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.client.file.BaseFileSystem.unmount(alluxio.AlluxioURI,alluxio.grpc.UnmountPOptions):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"RESOURCE_LEAK","tnDesc":"resource of type `java.lang.Process` acquired by call to `exec(...)` at line 103 is not released after line 104.","tnFile":"core/server/common/src/main/java/alluxio/cli/validation/RamDiskMountPrivilegeValidationTask.java","tnLine":104,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.validation.RamDiskMountPrivilegeValidationTask.checkSudoPrivilege():boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void HeapInodeStore.clear()` mutates container `this.mInodes` via call to `clear` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/server/master/src/main/java/alluxio/master/metastore/heap/HeapInodeStore.java","tnLine":121,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.metastore.heap.HeapInodeStore.clear():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `ExecutorService ExecutorServiceFactory.create()` of un-annotated interface `alluxio.util.executor.ExecutorServiceFactory`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"underfs/cos/src/main/java/alluxio/underfs/cos/COSUnderFileSystem.java","tnLine":93,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.cos.COSUnderFileSystem.createInstance(alluxio.AlluxioURI,alluxio.underfs.UnderFileSystemConfiguration):alluxio.underfs.cos.COSUnderFileSystem","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `boolean ReadRequestContext.isEof()` reads without synchronization from `this.mEof`. Potentially races with write in method `ReadRequestContext.setEof(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/server/worker/src/main/java/alluxio/worker/grpc/ReadRequestContext.java","tnLine":129,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.worker.grpc.ReadRequestContext.isEof():boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `boolean ForkJoinPool$ManagedBlocker.block()` of un-annotated interface `alluxio.concurrent.jsr.ForkJoinPool$ManagedBlocker`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.underfs.UnderFileSystem` is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/concurrent/ManagedBlockingUfsForwarder.java","tnLine":266,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.ManagedBlockingUfsForwarder.getExistingFileStatus(java.lang.String):alluxio.underfs.UfsFileStatus","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String AlluxioConfiguration.get(PropertyKey)` of un-annotated interface `alluxio.conf.AlluxioConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/security/authentication/DefaultAuthenticationServer.java","tnLine":143,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.security.authentication.DefaultAuthenticationServer.createSaslHandler(alluxio.grpc.ChannelAuthenticationScheme):alluxio.security.authentication.SaslServerHandler","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `Map ServerConfiguration.toMap()` reads without synchronization from `conf.ServerConfiguration.sConf`. Potentially races with write in method `ServerConfiguration.loadClusterDefaultsIfNotLoaded(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"core/server/common/src/main/java/alluxio/conf/ServerConfiguration.java","tnLine":324,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.conf.ServerConfiguration.toMap():java.util.Map","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `UserState UserStateFactory.create(Subject,AlluxioConfiguration,boolean)` of un-annotated interface `alluxio.security.user.UserStateFactory`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/client/fs/src/main/java/alluxio/client/file/FileSystemContext.java","tnLine":167,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.client.file.FileSystemContext.create(javax.security.auth.Subject,alluxio.conf.AlluxioConfiguration):alluxio.client.file.FileSystemContext","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Optional PathConfiguration.getConfiguration(AlluxioURI,PropertyKey)` of un-annotated interface `alluxio.conf.path.PathConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/conf/path/SpecificPathConfiguration.java","tnLine":158,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.conf.path.SpecificPathConfiguration.getNestedProperties(alluxio.conf.PropertyKey):java.util.Map","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object Gauge.getValue()` of un-annotated interface `com.codahale.metrics.Gauge`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/metrics/MetricsSystem.java","tnLine":477,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.metrics.MetricsSystem.reportClientMetrics():java.util.List","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"RESOURCE_LEAK","tnDesc":"resource of type `java.lang.Process` acquired by call to `exec(...)` at line 42 is not released after line 44.","tnFile":"core/server/common/src/main/java/alluxio/cli/validation/UserLimitValidationTask.java","tnLine":44,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.validation.UserLimitValidationTask.validate(java.util.Map):alluxio.cli.validation.ValidationTask$TaskResult","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void ReadRequestContext.setError(Error)` writes to field `this.mError` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/server/worker/src/main/java/alluxio/worker/grpc/ReadRequestContext.java","tnLine":217,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.worker.grpc.ReadRequestContext.setError(alluxio.worker.grpc.Error):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object UnderFileSystemWithLogging$UfsCallable.call()` of un-annotated interface `alluxio.underfs.UnderFileSystemWithLogging$UfsCallable`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.underfs.UnderFileSystem` is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/underfs/UnderFileSystemWithLogging.java","tnLine":436,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.UnderFileSystemWithLogging.getFingerprint(java.lang.String):java.lang.String","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `int HeadCommand.run(CommandLine)` writes to field `this.mNumOfBytes` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"shell/src/main/java/alluxio/cli/fs/command/HeadCommand.java","tnLine":91,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.HeadCommand.run(org.apache.commons.cli.CommandLine):int","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String Command.getCommandName()` of un-annotated interface `alluxio.cli.Command`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/GetCapacityBytesCommand.java","tnLine":46,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.GetCapacityBytesCommand.validateArgs(org.apache.commons.cli.CommandLine):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object UnderFileSystemWithLogging$UfsCallable.call()` of un-annotated interface `alluxio.underfs.UnderFileSystemWithLogging$UfsCallable`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.underfs.UnderFileSystem` is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/underfs/UnderFileSystemWithLogging.java","tnLine":715,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.UnderFileSystemWithLogging.renameDirectory(java.lang.String,java.lang.String):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `UnderFileSystemCommonOperations.mUfs.listStatus(root)` could be null and is dereferenced at line 695.","tnFile":"examples/src/main/java/alluxio/examples/UnderFileSystemCommonOperations.java","tnLine":695,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.examples.UnderFileSystemCommonOperations.listStatusRecursiveTest():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void ChownCommand.runPlainPath(AlluxioURI,CommandLine)` reads without synchronization from `this.mGroup`. Potentially races with write in method `ChownCommand.run(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"shell/src/main/java/alluxio/cli/fs/command/ChownCommand.java","tnLine":58,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.ChownCommand.runPlainPath(alluxio.AlluxioURI,org.apache.commons.cli.CommandLine):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"RESOURCE_LEAK","tnDesc":"resource of type `alluxio.master.journal.PatchedInputChunked` acquired by call to `createReader(...)` at line 39 is not released after line 48.","tnFile":"core/server/common/src/main/java/alluxio/master/journal/checkpoint/CompoundCheckpointFormat.java","tnLine":48,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.journal.checkpoint.CompoundCheckpointFormat.parseToHumanReadable(alluxio.master.journal.checkpoint.CheckpointInputStream,java.io.PrintStream):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `String CommonUtils.getPrimaryGroupName(String,AlluxioConfiguration)` indirectly reads without synchronization from `group.GroupMappingService$Factory.sCachedGroupMapping`. Potentially races with write in method `CommonUtils.getGroups(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/common/src/main/java/alluxio/util/CommonUtils.java","tnLine":361,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.util.CommonUtils.getPrimaryGroupName(java.lang.String,alluxio.conf.AlluxioConfiguration):java.lang.String","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String URI.getScheme()` of un-annotated interface `alluxio.uri.URI`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"underfs/s3a/src/main/java/alluxio/underfs/s3a/S3AUnderFileSystem.java","tnLine":568,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.s3a.S3AUnderFileSystem.getRootKey():java.lang.String","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `message.getMessageType()` could be null and is dereferenced at line 46.","tnFile":"core/common/src/main/java/alluxio/security/authentication/DefaultSaslHandshakeServerHandler.java","tnLine":46,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.security.authentication.DefaultSaslHandshakeServerHandler.handleSaslMessage(alluxio.grpc.SaslMessage):alluxio.grpc.SaslMessage","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void ForkJoinPool.shutdown()` indirectly reads without synchronization from `this.workQueues`. Potentially races with write in method `ForkJoinPool.registerWorker(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"core/common/src/main/java/alluxio/concurrent/jsr/ForkJoinPool.java","tnLine":2230,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.jsr.ForkJoinPool.shutdown():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `Worker BlockWorkerFactory.create(WorkerRegistry,UfsManager)` indirectly reads with synchronization from `dirPaths.[_]`. Potentially races with unsynchronized write in method `BlockWorkerFactory.create(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/server/worker/src/main/java/alluxio/worker/block/BlockWorkerFactory.java","tnLine":26,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.worker.block.BlockWorkerFactory.create(alluxio.worker.WorkerRegistry,alluxio.underfs.UfsManager):alluxio.worker.Worker","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.error(String,Object,Object)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/underfs/ObjectUnderFileSystem.java","tnLine":737,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.ObjectUnderFileSystem.renameFile(java.lang.String,java.lang.String):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"UNSAFE_GUARDED_BY_ACCESS","tnDesc":"The field `alluxio.master.block.DefaultBlockMaster.mJournaledNextContainerId` is annotated with `@GuardedBy(\"mBlockContainerIdGenerator\")`, but the lock `mBlockContainerIdGenerator` is not held during the access to the field at line 278. Since the current method is non-private, it can be called from outside the current class without synchronization. Consider wrapping the access in a `synchronized(mBlockContainerIdGenerator)` block or making the method private.","tnFile":"core/server/master/src/main/java/alluxio/master/block/DefaultBlockMaster.java","tnLine":278,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.block.DefaultBlockMaster.processJournalEntry(alluxio.proto.journal.Journal$JournalEntry):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.error(String)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/server/worker/src/main/java/alluxio/worker/block/evictor/Evictor.java","tnLine":54,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.worker.block.evictor.Evictor$Factory.create(alluxio.worker.block.BlockMetadataEvictorView,alluxio.worker.block.allocator.Allocator):alluxio.worker.block.evictor.Evictor","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `String MetricsSystem.escape(AlluxioURI)` indirectly writes to field `uri.mUriString` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/common/src/main/java/alluxio/metrics/MetricsSystem.java","tnLine":370,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.metrics.MetricsSystem.escape(alluxio.AlluxioURI):java.lang.String","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object `ufs` last assigned on line 368 could be null and is dereferenced at line 369.","tnFile":"core/server/master/src/main/java/alluxio/master/file/meta/MountTable.java","tnLine":369,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.file.meta.MountTable.resolve(alluxio.AlluxioURI):alluxio.master.file.meta.MountTable$Resolution","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String Command.getCommandName()` of un-annotated interface `alluxio.cli.Command`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/ChecksumCommand.java","tnLine":65,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.ChecksumCommand.validateArgs(org.apache.commons.cli.CommandLine):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String AlluxioConfiguration.get(PropertyKey)` of un-annotated interface `alluxio.conf.AlluxioConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/util/webui/UIFileInfo.java","tnLine":242,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.util.webui.UIFileInfo.getCreationTime():java.lang.String","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void ConfigurationDocGenerator.main(java.lang.String[])` indirectly reads without synchronization from container `conf.PropertyKey.DEFAULT_ALIAS_MAP` via call to `get`. Potentially races with write in method `ConfigurationDocGenerator.main(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"shell/src/main/java/alluxio/cli/ConfigurationDocGenerator.java","tnLine":213,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.ConfigurationDocGenerator.main(java.lang.String[]):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String URI.getPath()` of un-annotated interface `alluxio.uri.URI`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"underfs/local/src/main/java/alluxio/underfs/local/LocalUnderFileSystem.java","tnLine":275,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.local.LocalUnderFileSystem.isFile(java.lang.String):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String Command.getCommandName()` of un-annotated interface `alluxio.cli.Command`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/ChgrpCommand.java","tnLine":59,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.ChgrpCommand.validateArgs(org.apache.commons.cli.CommandLine):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void DefaultBlockMaster.resetState()` writes to field `this.mJournaledNextContainerId` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"core/server/master/src/main/java/alluxio/master/block/DefaultBlockMaster.java","tnLine":304,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.block.DefaultBlockMaster.resetState():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `MountPointInfo MountInfo.toDisplayMountPointInfo()` indirectly mutates container `conf.PropertyKey.DEFAULT_ALIAS_MAP` via call to `put` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/server/master/src/main/java/alluxio/master/file/meta/options/MountInfo.java","tnLine":102,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.file.meta.options.MountInfo.toDisplayMountPointInfo():alluxio.wire.MountPointInfo","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void Cache$EvictionThread.run()` indirectly writes to field `this.mEvictionHead` outside of synchronization.\n Reporting because this access may occur on a background thread.","tnFile":"core/server/master/src/main/java/alluxio/master/metastore/caching/Cache.java","tnLine":320,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.metastore.caching.Cache$EvictionThread.run():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `Iterator DefaultBlockMaster.getJournalEntryIterator()` indirectly reads without synchronization from `this.mJournaledNextContainerId`. Potentially races with write in method `DefaultBlockMaster.getNewContainerId()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"core/server/master/src/main/java/alluxio/master/block/DefaultBlockMaster.java","tnLine":341,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.block.DefaultBlockMaster.getJournalEntryIterator():java.util.Iterator","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.debug(String)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"underfs/wasb/src/main/java/alluxio/underfs/wasb/WasbUnderFileSystem.java","tnLine":100,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.wasb.WasbUnderFileSystem.getFileLocations(java.lang.String):java.util.List","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `Server Registry.get(Class,int)` reads without synchronization from container `this.mRegistry` via call to `get`. Potentially races with write in method `Registry.add(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/server/common/src/main/java/alluxio/Registry.java","tnLine":93,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.Registry.get(java.lang.Class,int):alluxio.Server","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void CachingInodeStore.restoreFromCheckpoint(CheckpointInputStream)` indirectly writes to field `this.mListingCache.mEvictionHead` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/server/master/src/main/java/alluxio/master/metastore/caching/CachingInodeStore.java","tnLine":254,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.metastore.caching.CachingInodeStore.restoreFromCheckpoint(alluxio.master.journal.checkpoint.CheckpointInputStream):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.info(String)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/server/master/src/main/java/alluxio/master/metastore/caching/CachingInodeStore.java","tnLine":243,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.metastore.caching.CachingInodeStore.writeToCheckpoint(java.io.OutputStream):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void CopyFromLocalCommand.validateArgs(CommandLine)` indirectly writes to field `this.mCpCommand.mCopyFromLocalBufferSize` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"shell/src/main/java/alluxio/cli/fs/command/CopyFromLocalCommand.java","tnLine":75,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.CopyFromLocalCommand.validateArgs(org.apache.commons.cli.CommandLine):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String URI.getQuery()` of un-annotated interface `alluxio.uri.URI`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/base/src/main/java/alluxio/AlluxioURI.java","tnLine":281,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.AlluxioURI.getQueryMap():java.util.Map","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String URI.getPath()` of un-annotated interface `alluxio.uri.URI`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/FileSystemShellUtils.java","tnLine":324,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.FileSystemShellUtils.match(java.lang.String,java.lang.String):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void SaslClientHandler.close()` of un-annotated interface `alluxio.security.authentication.SaslClientHandler`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class io.grpc.Channel` is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/security/authentication/ChannelAuthenticator.java","tnLine":169,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.security.authentication.ChannelAuthenticator$DefaultAuthenticatedChannel.authenticate():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `int ForkJoinPool.awaitJoin(ForkJoinPool$WorkQueue,ForkJoinTask,long)` reads without synchronization from `this.workQueues`. Potentially races with write in method `ForkJoinPool.registerWorker(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"core/common/src/main/java/alluxio/concurrent/jsr/ForkJoinPool.java","tnLine":1443,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.jsr.ForkJoinPool.awaitJoin(alluxio.concurrent.jsr.ForkJoinPool$WorkQueue,alluxio.concurrent.jsr.ForkJoinTask,long):int","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void ServerConfiguration.set(PropertyKey,Object,Source)` reads without synchronization from `conf.ServerConfiguration.sConf`. Potentially races with write in method `ServerConfiguration.loadClusterDefaultsIfNotLoaded(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"core/server/common/src/main/java/alluxio/conf/ServerConfiguration.java","tnLine":113,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.conf.ServerConfiguration.set(alluxio.conf.PropertyKey,java.lang.Object,alluxio.conf.Source):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `int CpCommand.run(CommandLine)` reads without synchronization from `this.mThread`. Potentially races with write in method `CpCommand.validateArgs(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"shell/src/main/java/alluxio/cli/fs/command/CpCommand.java","tnLine":378,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.CpCommand.run(org.apache.commons.cli.CommandLine):int","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `Object ForkJoinTask.get(long,TimeUnit)` indirectly writes to field `w.top` outside of synchronization.\n Reporting because this access may occur on a background thread.","tnFile":"core/common/src/main/java/alluxio/concurrent/jsr/ForkJoinTask.java","tnLine":1080,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.jsr.ForkJoinTask.get(long,java.util.concurrent.TimeUnit):java.lang.Object","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void UfsJournal.gainPrimacy()` indirectly reads with synchronization from container `conf.PropertyKey.DEFAULT_ALIAS_MAP` via call to `get`. Potentially races with unsynchronized write in method `UfsJournal(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/server/common/src/main/java/alluxio/master/journal/ufs/UfsJournal.java","tnLine":222,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.journal.ufs.UfsJournal.gainPrimacy():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `int FieldIndex.size()` of un-annotated interface `alluxio.collections.FieldIndex`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/base/src/main/java/alluxio/collections/IndexedSet.java","tnLine":348,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.collections.IndexedSet.size():int","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `String ChannelAuthenticator$DefaultAuthenticatedChannel.authority()` reads without synchronization from `this.mChannel`. Potentially races with write in method `ChannelAuthenticator$DefaultAuthenticatedChannel.authenticate()`.\n Reporting because a superclass `class io.grpc.Channel` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/common/src/main/java/alluxio/security/authentication/ChannelAuthenticator.java","tnLine":241,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.security.authentication.ChannelAuthenticator$DefaultAuthenticatedChannel.authority():java.lang.String","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `response.body()` could be null and is dereferenced at line 125.","tnFile":"underfs/kodo/src/main/java/alluxio/underfs/kodo/KodoClient.java","tnLine":125,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.kodo.KodoClient.getObject(java.lang.String,long,long,long):java.io.InputStream","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `java.lang.String[] ObjectUnderFileSystem$ObjectListingChunk.getCommonPrefixes()` of un-annotated interface `alluxio.underfs.ObjectUnderFileSystem$ObjectListingChunk`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/underfs/ObjectUnderFileSystem.java","tnLine":1101,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.ObjectUnderFileSystem.parentExists(java.lang.String):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `Map SingleTagValueAggregator.updateValues(Map)` reads without synchronization from `this.mAggregates`. Potentially races with write in method `SingleTagValueAggregator.updateValues(...)`.\n Reporting because this access may occur on a background thread.","tnFile":"core/common/src/main/java/alluxio/metrics/aggregator/SingleTagValueAggregator.java","tnLine":83,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.metrics.aggregator.SingleTagValueAggregator.updateValues(java.util.Map):java.util.Map","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void ForkJoinTask.invokeAll(ForkJoinTask,ForkJoinTask)` indirectly writes to field `w.top` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"core/common/src/main/java/alluxio/concurrent/jsr/ForkJoinTask.java","tnLine":311,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.jsr.ForkJoinTask.invokeAll(alluxio.concurrent.jsr.ForkJoinTask,alluxio.concurrent.jsr.ForkJoinTask):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Authority URI.getAuthority()` of un-annotated interface `alluxio.uri.URI`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/base/src/main/java/alluxio/AlluxioURI.java","tnLine":311,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.AlluxioURI.hasAuthority():boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `Configuration HadoopConfigurationUtils.mergeAlluxioConfiguration(Configuration,AlluxioConfiguration)` indirectly reads without synchronization from container `conf.PropertyKey.DEFAULT_KEYS_MAP` via call to `values`. Potentially races with write in method `HadoopConfigurationUtils.mergeHadoopConfiguration(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/client/hdfs/src/main/java/alluxio/hadoop/HadoopConfigurationUtils.java","tnLine":78,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.hadoop.HadoopConfigurationUtils.mergeAlluxioConfiguration(org.apache.hadoop.conf.Configuration,alluxio.conf.AlluxioConfiguration):org.apache.hadoop.conf.Configuration","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void UnderFileSystemFactoryRegistry.unregister(UnderFileSystemFactory)` indirectly mutates container `underfs.UnderFileSystemFactoryRegistry.sRegistryInstance.mFactories` via call to `remove` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"core/common/src/main/java/alluxio/underfs/UnderFileSystemFactoryRegistry.java","tnLine":171,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.UnderFileSystemFactoryRegistry.unregister(alluxio.underfs.UnderFileSystemFactory):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void FileSystem.delete(AlluxioURI)` of un-annotated interface `alluxio.client.file.FileSystem`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"integration/fuse/src/main/java/alluxio/fuse/AlluxioFuseFileSystem.java","tnLine":632,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.fuse.AlluxioFuseFileSystem.rmdir(java.lang.String):int","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String Command.getCommandName()` of un-annotated interface `alluxio.cli.Command`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/cli/CommandUtils.java","tnLine":88,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.CommandUtils.checkNumOfArgsNoLessThan(alluxio.cli.Command,org.apache.commons.cli.CommandLine,int):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `long MasterBlockInfo.getLength()` reads without synchronization from `this.mLength`. Potentially races with write in method `MasterBlockInfo.updateLength(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"core/server/master/src/main/java/alluxio/master/block/meta/MasterBlockInfo.java","tnLine":67,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.block.meta.MasterBlockInfo.getLength():long","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object RpcUtils$RpcCallableThrowsIOException.call()` of un-annotated interface `alluxio.RpcUtils$RpcCallableThrowsIOException`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"job/server/src/main/java/alluxio/master/job/JobMasterWorkerServiceHandler.java","tnLine":74,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.job.JobMasterWorkerServiceHandler.registerJobWorker(alluxio.grpc.RegisterJobWorkerPRequest,io.grpc.stub.StreamObserver):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `__new(alluxio.concurrent.ManagedBlockingUfsForwarder$25).get()` could be null and is dereferenced at line 346.","tnFile":"core/common/src/main/java/alluxio/concurrent/ManagedBlockingUfsForwarder.java","tnLine":346,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.ManagedBlockingUfsForwarder.isFile(java.lang.String):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object UnderFileSystemWithLogging$UfsCallable.call()` of un-annotated interface `alluxio.underfs.UnderFileSystemWithLogging$UfsCallable`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.underfs.UnderFileSystem` is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/underfs/UnderFileSystemWithLogging.java","tnLine":540,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.UnderFileSystemWithLogging.isFile(java.lang.String):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.debug(String,Object,Object)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"underfs/oss/src/main/java/alluxio/underfs/oss/OSSUnderFileSystem.java","tnLine":117,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.oss.OSSUnderFileSystem.copyObject(java.lang.String,java.lang.String):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Enum AlluxioConfiguration.getEnum(PropertyKey,Class)` of un-annotated interface `alluxio.conf.AlluxioConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/util/network/NettyUtils.java","tnLine":218,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.util.network.NettyUtils.getWorkerChannel(alluxio.conf.AlluxioConfiguration):alluxio.network.ChannelType","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object Gauge.getValue()` of un-annotated interface `com.codahale.metrics.Gauge`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/server/master/src/main/java/alluxio/master/metrics/MetricsStore.java","tnLine":172,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.metrics.MetricsStore.getMetricsByInstanceTypeAndName(alluxio.metrics.MetricsSystem$InstanceType,java.lang.String):java.util.Set","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"RESOURCE_LEAK","tnDesc":"resource of type `alluxio.master.file.meta.SimpleInodeLockList` acquired by call to `lockChild(...)` at line 1757 is not released after line 1759.","tnFile":"core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java","tnLine":1759,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.file.DefaultFileSystemMaster.getInMemoryFilesInternal(alluxio.master.file.meta.LockedInodePath,java.util.ArrayList):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `UserState UserStateFactory.create(Subject,AlluxioConfiguration,boolean)` of un-annotated interface `alluxio.security.user.UserStateFactory`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/LocationCommand.java","tnLine":40,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.LocationCommand.<init>(alluxio.client.file.FileSystemContext)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `long AlluxioConfiguration.getMs(PropertyKey)` of un-annotated interface `alluxio.conf.AlluxioConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/client/fs/src/main/java/alluxio/client/file/BaseFileSystem.java","tnLine":123,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.client.file.BaseFileSystem.<init>(alluxio.client.file.FileSystemContext,boolean)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Authority URI.getAuthority()` of un-annotated interface `alluxio.uri.URI`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/underfs/BaseUnderFileSystem.java","tnLine":144,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.BaseUnderFileSystem.listStatus(java.lang.String,alluxio.underfs.options.ListOptions):alluxio.underfs.UfsStatus[]","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object UnderFileSystemWithLogging$UfsCallable.call()` of un-annotated interface `alluxio.underfs.UnderFileSystemWithLogging$UfsCallable`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.underfs.UnderFileSystem` is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/underfs/UnderFileSystemWithLogging.java","tnLine":700,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.UnderFileSystemWithLogging.openExistingFile(java.lang.String,alluxio.underfs.options.OpenOptions):java.io.InputStream","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void JobMaster.start(Boolean)` indirectly writes to field `this.mExecutorService` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"job/server/src/main/java/alluxio/master/job/JobMaster.java","tnLine":167,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.job.JobMaster.start(java.lang.Boolean):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `alluxio.master.backcompat.ops.Delete.RECURSIVE.getParent()` could be null and is dereferenced at line 52.","tnFile":"tests/src/main/java/alluxio/master/backcompat/ops/Delete.java","tnLine":52,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.backcompat.ops.Delete.check(alluxio.client.file.FileSystem):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Set PathConfiguration.getPropertyKeys(AlluxioURI)` of un-annotated interface `alluxio.conf.path.PathConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/conf/path/SpecificPathConfiguration.java","tnLine":98,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.conf.path.SpecificPathConfiguration.userKeySet():java.util.Set","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void TouchCommand.runPlainPath(AlluxioURI,CommandLine)` indirectly writes to field `bos.mClosed` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"shell/src/main/java/alluxio/cli/fs/command/TouchCommand.java","tnLine":52,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.TouchCommand.runPlainPath(alluxio.AlluxioURI,org.apache.commons.cli.CommandLine):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object `ufs` last assigned on line 2929 could be null and is dereferenced at line 2930.","tnFile":"core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java","tnLine":2930,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.file.DefaultFileSystemMaster.setUfsAcl(alluxio.master.file.meta.LockedInodePath):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `UserState UserStateFactory.create(Subject,AlluxioConfiguration,boolean)` of un-annotated interface `alluxio.security.user.UserStateFactory`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/GetCapacityBytesCommand.java","tnLine":36,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.GetCapacityBytesCommand.<init>(alluxio.client.file.FileSystemContext)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Server.close()` of un-annotated interface `alluxio.Server`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/server/common/src/main/java/alluxio/Registry.java","tnLine":158,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.Registry.close():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `boolean ForkJoinPool$ManagedBlocker.block()` of un-annotated interface `alluxio.concurrent.jsr.ForkJoinPool$ManagedBlocker`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.underfs.UnderFileSystem` is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/concurrent/ManagedBlockingUfsForwarder.java","tnLine":225,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.ManagedBlockingUfsForwarder.getExistingDirectoryStatus(java.lang.String):alluxio.underfs.UfsDirectoryStatus","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String Command.getCommandName()` of un-annotated interface `alluxio.cli.Command`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/server/common/src/main/java/alluxio/cli/extensions/command/UninstallCommand.java","tnLine":94,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.extensions.command.UninstallCommand.validateArgs(org.apache.commons.cli.CommandLine):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `UserState UserStateFactory.create(Subject,AlluxioConfiguration,boolean)` of un-annotated interface `alluxio.security.user.UserStateFactory`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/MvCommand.java","tnLine":36,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.MvCommand.<init>(alluxio.client.file.FileSystemContext)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.debug(String,Object)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/security/authentication/AuthenticationUserUtils.java","tnLine":48,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.security.authentication.AuthenticationUserUtils.getImpersonationUser(javax.security.auth.Subject,alluxio.conf.AlluxioConfiguration):java.lang.String","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void CopyToLocalCommand.validateArgs(CommandLine)` indirectly writes to field `this.mCpCommand.mCopyFromLocalBufferSize` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"shell/src/main/java/alluxio/cli/fs/command/CopyToLocalCommand.java","tnLine":54,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.CopyToLocalCommand.validateArgs(org.apache.commons.cli.CommandLine):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `AlluxioConfiguration ConfigurationUtils.merge(AlluxioConfiguration,Map,Source)` indirectly mutates container `conf.PropertyKey.DEFAULT_ALIAS_MAP` via call to `put` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"core/common/src/main/java/alluxio/util/ConfigurationUtils.java","tnLine":460,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.util.ConfigurationUtils.merge(alluxio.conf.AlluxioConfiguration,java.util.Map,alluxio.conf.Source):alluxio.conf.AlluxioConfiguration","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String AlluxioConfiguration.get(PropertyKey)` of un-annotated interface `alluxio.conf.AlluxioConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/util/network/NetworkAddressUtils.java","tnLine":239,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.util.network.NetworkAddressUtils.getConnectAddress(alluxio.util.network.NetworkAddressUtils$ServiceType,alluxio.conf.AlluxioConfiguration):java.net.InetSocketAddress","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `long InodeView.getId()` of un-annotated interface `alluxio.master.file.meta.InodeView`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/server/master/src/main/java/alluxio/master/file/meta/TtlBucketList.java","tnLine":179,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.file.meta.TtlBucketList.writeToCheckpoint(java.io.OutputStream):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object BaseFileSystem$RpcCallable.call(Object)` of un-annotated interface `alluxio.client.file.BaseFileSystem$RpcCallable`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/client/fs/src/main/java/alluxio/client/file/BaseFileSystem.java","tnLine":161,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.client.file.BaseFileSystem.createDirectory(alluxio.AlluxioURI,alluxio.grpc.CreateDirectoryPOptions):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void FileSystem.delete(AlluxioURI)` of un-annotated interface `alluxio.client.file.FileSystem`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/CpCommand.java","tnLine":262,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.CpCommand$CopyThreadPoolExecutor.shutdown():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void FileSystemMasterClient.afterConnect()` reads without synchronization from `this.mChannel`. Potentially races with write in method `FileSystemMasterClient.getFileInfo(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"job/server/src/main/java/alluxio/master/file/FileSystemMasterClient.java","tnLine":64,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.file.FileSystemMasterClient.afterConnect():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.error(String)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/server/common/src/main/java/alluxio/cli/extensions/ExtensionsShellUtils.java","tnLine":72,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.extensions.ExtensionsShellUtils.getWorkerHostnames():java.util.List","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"RESOURCE_LEAK","tnDesc":"resource of type `alluxio.master.journal.PatchedInputChunked` acquired by call to `CompoundCheckpointFormat$CompoundCheckpointReader(...)` at line 149 is not released after line 167.","tnFile":"core/server/common/src/main/java/alluxio/master/journal/JournalUtils.java","tnLine":167,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.journal.JournalUtils.restoreFromCheckpoint(alluxio.master.journal.checkpoint.CheckpointInputStream,java.util.List):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"RESOURCE_LEAK","tnDesc":"resource of type `alluxio.worker.file.FileWorkerMasterSyncExecutor` acquired by call to `new()` at line 105 is not released after line 105.","tnFile":"core/server/worker/src/main/java/alluxio/worker/file/DefaultFileSystemWorker.java","tnLine":105,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.worker.file.DefaultFileSystemWorker.start(alluxio.wire.WorkerNetAddress):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `boolean ForkJoinPool$ManagedBlocker.block()` of un-annotated interface `alluxio.concurrent.jsr.ForkJoinPool$ManagedBlocker`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.underfs.UnderFileSystem` is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/concurrent/ManagedBlockingUfsForwarder.java","tnLine":456,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.ManagedBlockingUfsForwarder.renameRenamableDirectory(java.lang.String,java.lang.String):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Authority URI.getAuthority()` of un-annotated interface `alluxio.uri.URI`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/underfs/BaseUnderFileSystem.java","tnLine":226,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.BaseUnderFileSystem.validatePath(java.lang.String):java.lang.String","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"RESOURCE_LEAK","tnDesc":"resource of type `alluxio.master.journal.checkpoint.CheckpointOutputStream` acquired by call to `new()` at line 131 is not released after line 134.","tnFile":"core/server/master/src/main/java/alluxio/master/metastore/heap/HeapInodeStore.java","tnLine":134,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.metastore.heap.HeapInodeStore.writeToCheckpoint(java.io.OutputStream):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String AlluxioConfiguration.get(PropertyKey)` of un-annotated interface `alluxio.conf.AlluxioConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/util/network/NetworkAddressUtils.java","tnLine":341,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.util.network.NetworkAddressUtils.getBindHost(alluxio.util.network.NetworkAddressUtils$ServiceType,alluxio.conf.AlluxioConfiguration):java.lang.String","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `boolean UfsJournalWriter$CheckpointOutputStream.isClosed()` reads without synchronization from `this.mIsClosed`. Potentially races with write in method `UfsJournalWriter$CheckpointOutputStream.close()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"core/server/common/src/main/java/alluxio/master/journalv0/ufs/UfsJournalWriter.java","tnLine":219,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.journalv0.ufs.UfsJournalWriter$CheckpointOutputStream.isClosed():boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Set FieldIndex.getByField(Object)` of un-annotated interface `alluxio.collections.FieldIndex`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/base/src/main/java/alluxio/collections/IndexedSet.java","tnLine":265,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.collections.IndexedSet.getByField(alluxio.collections.IndexDefinition,java.lang.Object):java.util.Set","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String Command.getCommandName()` of un-annotated interface `alluxio.cli.Command`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/job/command/StatCommand.java","tnLine":126,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.job.command.StatCommand.validateArgs(org.apache.commons.cli.CommandLine):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `URIStatus FileSystem.getStatus(AlluxioURI)` of un-annotated interface `alluxio.client.file.FileSystem`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/CountCommand.java","tnLine":55,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.CountCommand.run(org.apache.commons.cli.CommandLine):int","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void FileSystem.setAttribute(AlluxioURI,SetAttributePOptions)` of un-annotated interface `alluxio.client.file.FileSystem`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/SetReplicationCommand.java","tnLine":113,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.SetReplicationCommand.run(org.apache.commons.cli.CommandLine):int","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String Command.getCommandName()` of un-annotated interface `alluxio.cli.Command`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/RmCommand.java","tnLine":128,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.RmCommand.validateArgs(org.apache.commons.cli.CommandLine):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String Command.getCommandName()` of un-annotated interface `alluxio.cli.Command`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/StartSyncCommand.java","tnLine":80,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.StartSyncCommand.validateArgs(org.apache.commons.cli.CommandLine):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.error(String)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/server/worker/src/main/java/alluxio/worker/DataServer.java","tnLine":48,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.worker.DataServer$Factory.create(java.lang.String,java.net.SocketAddress,alluxio.worker.WorkerProcess):alluxio.worker.DataServer","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `long AlluxioConfiguration.getBytes(PropertyKey)` of un-annotated interface `alluxio.conf.AlluxioConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/client/fs/src/main/java/alluxio/client/block/policy/LocalFirstAvoidEvictionPolicy.java","tnLine":47,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.client.block.policy.LocalFirstAvoidEvictionPolicy.<init>(alluxio.conf.AlluxioConfiguration)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void Master.updateConf(PropertyKey,String)` mutates container `this.mProperties` via call to `remove` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"minicluster/src/main/java/alluxio/multi/process/Master.java","tnLine":59,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.multi.process.Master.updateConf(alluxio.conf.PropertyKey,java.lang.String):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `__new(alluxio.concurrent.ManagedBlockingUfsForwarder$8).get()` could be null and is dereferenced at line 154.","tnFile":"core/common/src/main/java/alluxio/concurrent/ManagedBlockingUfsForwarder.java","tnLine":154,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.ManagedBlockingUfsForwarder.deleteExistingDirectory(java.lang.String,alluxio.underfs.options.DeleteOptions):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `boolean ForkJoinPool$ManagedBlocker.block()` of un-annotated interface `alluxio.concurrent.jsr.ForkJoinPool$ManagedBlocker`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.underfs.UnderFileSystem` is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/concurrent/ManagedBlockingUfsForwarder.java","tnLine":215,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.ManagedBlockingUfsForwarder.getDirectoryStatus(java.lang.String):alluxio.underfs.UfsDirectoryStatus","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String URI.getPath()` of un-annotated interface `alluxio.uri.URI`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"underfs/local/src/main/java/alluxio/underfs/local/LocalUnderFileSystem.java","tnLine":393,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.local.LocalUnderFileSystem.setOwner(java.lang.String,java.lang.String,java.lang.String):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `long SingleTagValueAggregator.getValue(String)` reads without synchronization from `this.mAggregates`. Potentially races with write in method `SingleTagValueAggregator.updateValues(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"core/common/src/main/java/alluxio/metrics/aggregator/SingleTagValueAggregator.java","tnLine":88,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.metrics.aggregator.SingleTagValueAggregator.getValue(java.lang.String):long","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object UnderFileSystemWithLogging$UfsCallable.call()` of un-annotated interface `alluxio.underfs.UnderFileSystemWithLogging$UfsCallable`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.underfs.UnderFileSystem` is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/underfs/UnderFileSystemWithLogging.java","tnLine":581,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.UnderFileSystemWithLogging.listStatus(java.lang.String,alluxio.underfs.options.ListOptions):alluxio.underfs.UfsStatus[]","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Enum AlluxioConfiguration.getEnum(PropertyKey,Class)` of un-annotated interface `alluxio.conf.AlluxioConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/util/SecurityUtils.java","tnLine":93,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.util.SecurityUtils.getGroupFromGrpcClient(alluxio.conf.AlluxioConfiguration):java.lang.String","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `int FuseFillDir.apply(Pointer,String,FileStat,long)` of un-annotated interface `ru.serce.jnrfuse.FuseFillDir`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"integration/fuse/src/main/java/alluxio/fuse/AlluxioFuseFileSystem.java","tnLine":540,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.fuse.AlluxioFuseFileSystem.readdir(java.lang.String,jnr.ffi.Pointer,ru.serce.jnrfuse.FuseFillDir,long,ru.serce.jnrfuse.struct.FuseFileInfo):int","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"UNSAFE_GUARDED_BY_ACCESS","tnDesc":"The field `alluxio.network.TieredIdentityFactory.sInstance` is annotated with `@GuardedBy(\"LOCK\")`, but the lock `LOCK` is not held during the access to the field at line 67. Since the current method is non-private, it can be called from outside the current class without synchronization. Consider wrapping the access in a `synchronized(LOCK)` block or making the method private.","tnFile":"core/common/src/main/java/alluxio/network/TieredIdentityFactory.java","tnLine":67,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.network.TieredIdentityFactory.localIdentity(alluxio.conf.AlluxioConfiguration):alluxio.wire.TieredIdentity","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"RESOURCE_LEAK","tnDesc":"resource of type `org.rocksdb.ColumnFamilyOptions` acquired by call to `new()` at line 82 is not released after line 83.","tnFile":"core/server/master/src/main/java/alluxio/master/metastore/rocks/RocksInodeStore.java","tnLine":83,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.metastore.rocks.RocksInodeStore.<init>(java.lang.String)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"RESOURCE_LEAK","tnDesc":"resource of type `alluxio.master.file.InodeTtlChecker` acquired by call to `new()` at line 612 is not released after line 612.","tnFile":"core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java","tnLine":612,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.file.DefaultFileSystemMaster.start(java.lang.Boolean):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `AlluxioProperties AlluxioConfiguration.copyProperties()` of un-annotated interface `alluxio.conf.AlluxioConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/server/common/src/main/java/alluxio/master/journal/ufs/UfsJournal.java","tnLine":122,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.journal.ufs.UfsJournal.getJournalUfsConf():alluxio.underfs.UnderFileSystemConfiguration","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `UserState UserStateFactory.create(Subject,AlluxioConfiguration,boolean)` of un-annotated interface `alluxio.security.user.UserStateFactory`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/StatCommand.java","tnLine":47,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.StatCommand.<init>(alluxio.client.file.FileSystemContext)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void SetTtlCommand.runPlainPath(AlluxioURI,CommandLine)` reads without synchronization from `this.mAction`. Potentially races with write in method `SetTtlCommand.validateArgs(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"shell/src/main/java/alluxio/cli/fs/command/SetTtlCommand.java","tnLine":85,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.SetTtlCommand.runPlainPath(alluxio.AlluxioURI,org.apache.commons.cli.CommandLine):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `long AlluxioConfiguration.getMs(PropertyKey)` of un-annotated interface `alluxio.conf.AlluxioConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/GetUsedBytesCommand.java","tnLine":52,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.GetUsedBytesCommand.run(org.apache.commons.cli.CommandLine):int","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"UNSAFE_GUARDED_BY_ACCESS","tnDesc":"The field `alluxio.master.file.meta.MountTable.mState` is annotated with `@GuardedBy(\"mReadLock,mWriteLock\")`, but the lock `mReadLock,mWriteLock` is not held during the access to the field at line 238. Since the current method is non-private, it can be called from outside the current class without synchronization. Consider wrapping the access in a `synchronized(mReadLock,mWriteLock)` block or making the method private.","tnFile":"core/server/master/src/main/java/alluxio/master/file/meta/MountTable.java","tnLine":238,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.file.meta.MountTable.getMountPoint(alluxio.AlluxioURI):java.lang.String","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.error(String)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.underfs.ObjectUnderFileSystem` is annotated `@ThreadSafe`.","tnFile":"underfs/kodo/src/main/java/alluxio/underfs/kodo/KodoUnderFileSystem.java","tnLine":135,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.kodo.KodoUnderFileSystem.createObject(java.lang.String):java.io.OutputStream","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `int StandardURI.hashCode()` reads without synchronization from `this.mHashCode`. Potentially races with write in method `StandardURI.hashCode()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/base/src/main/java/alluxio/uri/StandardURI.java","tnLine":209,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.uri.StandardURI.hashCode():int","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.info(String)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/server/common/src/main/java/alluxio/cli/Format.java","tnLine":82,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.Format.main(java.lang.String[]):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `UserState UserStateFactory.create(Subject,AlluxioConfiguration,boolean)` of un-annotated interface `alluxio.security.user.UserStateFactory`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/SetTtlCommand.java","tnLine":55,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.SetTtlCommand.<init>(alluxio.client.file.FileSystemContext)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `UserState UserStateFactory.create(Subject,AlluxioConfiguration,boolean)` of un-annotated interface `alluxio.security.user.UserStateFactory`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/PinCommand.java","tnLine":41,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.PinCommand.<init>(alluxio.client.file.FileSystemContext)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `DefaultBlockStoreMeta.<init>(BlockMetadataManager,boolean)` mutates container `blockIds` via call to `addAll` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/server/worker/src/main/java/alluxio/worker/block/DefaultBlockStoreMeta.java","tnLine":180,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.worker.block.DefaultBlockStoreMeta.<init>(alluxio.worker.block.BlockMetadataManager,boolean)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `ufs.get()` could be null and is dereferenced at line 583.","tnFile":"core/server/master/src/main/java/alluxio/master/file/activesync/ActiveSyncManager.java","tnLine":583,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.file.activesync.ActiveSyncManager.stop():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void Format.format(Format$Mode,AlluxioConfiguration)` indirectly reads without synchronization from container `conf.PropertyKey.DEFAULT_KEYS_MAP` via call to `get`. Potentially races with write in method `Format.main(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/server/common/src/main/java/alluxio/cli/Format.java","tnLine":125,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.Format.format(alluxio.cli.Format$Mode,alluxio.conf.AlluxioConfiguration):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `Iterator InodeDirectoryIdGenerator.getJournalEntryIterator()` indirectly reads without synchronization from `this.mNextDirectoryId.mSequenceNumber`. Potentially races with write in method `InodeDirectoryIdGenerator.processJournalEntry(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/server/master/src/main/java/alluxio/master/file/meta/InodeDirectoryIdGenerator.java","tnLine":115,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.file.meta.InodeDirectoryIdGenerator.getJournalEntryIterator():java.util.Iterator","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.error(String,Object)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"integration/fuse/src/main/java/alluxio/fuse/AlluxioFuseFileSystem.java","tnLine":577,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.fuse.AlluxioFuseFileSystem.release(java.lang.String,ru.serce.jnrfuse.struct.FuseFileInfo):int","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object UnderFileSystemWithLogging$UfsCallable.call()` of un-annotated interface `alluxio.underfs.UnderFileSystemWithLogging$UfsCallable`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.underfs.UnderFileSystem` is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/underfs/UnderFileSystemWithLogging.java","tnLine":344,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.UnderFileSystemWithLogging.getDirectoryStatus(java.lang.String):alluxio.underfs.UfsDirectoryStatus","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void ReplicationChecker.heartbeat()` reads without synchronization from `this.mQuietPeriodSeconds`. Potentially races with write in method `ReplicationChecker.heartbeat()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/server/master/src/main/java/alluxio/master/file/replication/ReplicationChecker.java","tnLine":130,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.file.replication.ReplicationChecker.heartbeat():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.info(String,Object)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/server/worker/src/main/java/alluxio/worker/block/BlockWorkerFactory.java","tnLine":42,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.worker.block.BlockWorkerFactory.create(alluxio.worker.WorkerRegistry,alluxio.underfs.UfsManager):alluxio.worker.block.BlockWorker","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `long AlluxioConfiguration.getMs(PropertyKey)` of un-annotated interface `alluxio.conf.AlluxioConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/client/fs/src/main/java/alluxio/client/block/AlluxioBlockStore.java","tnLine":86,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.client.block.AlluxioBlockStore.create(alluxio.client.file.FileSystemContext):alluxio.client.block.AlluxioBlockStore","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `syncPointInfo.getSyncStatus()` could be null and is dereferenced at line 93.","tnFile":"core/common/src/main/java/alluxio/wire/SyncPointInfo.java","tnLine":93,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.wire.SyncPointInfo.fromProto(alluxio.grpc.SyncPointInfo):alluxio.wire.SyncPointInfo","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `boolean AlluxioConfiguration.isSetByUser(PropertyKey)` of un-annotated interface `alluxio.conf.AlluxioConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/conf/path/PrefixPathConfiguration.java","tnLine":69,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.conf.path.PrefixPathConfiguration.getConfiguration(alluxio.AlluxioURI,alluxio.conf.PropertyKey):java.util.Optional","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void GrpcChannel.intercept(ClientInterceptor)` writes to field `this.mChannel` outside of synchronization.\n Reporting because a superclass `class io.grpc.Channel` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/common/src/main/java/alluxio/grpc/GrpcChannel.java","tnLine":92,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.grpc.GrpcChannel.intercept(io.grpc.ClientInterceptor):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `response.getStatus()` could be null and is dereferenced by call to `fromProto(...)` at line 621.","tnFile":"core/common/src/main/java/alluxio/util/CommonUtils.java","tnLine":621,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.util.CommonUtils.unwrapResponseFrom(alluxio.proto.dataserver.Protocol$Response,io.netty.channel.Channel):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `List JobMasterClient.list()` of un-annotated interface `alluxio.client.job.JobMasterClient`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/job/command/ListCommand.java","tnLine":62,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.job.command.ListCommand.run(org.apache.commons.cli.CommandLine):int","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `UserState UserStateFactory.create(Subject,AlluxioConfiguration,boolean)` of un-annotated interface `alluxio.security.user.UserStateFactory`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.cli.fs.command.AbstractFileSystemCommand` is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/GetSyncPathListCommand.java","tnLine":35,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.GetSyncPathListCommand.<init>(alluxio.client.file.FileSystemContext)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void AlluxioLogServerProcess.stop()` reads without synchronization from `this.mServerSocket`. Potentially races with write in method `AlluxioLogServerProcess.start()`.\n Reporting because this access may occur on a background thread.","tnFile":"logserver/src/main/java/alluxio/logserver/AlluxioLogServerProcess.java","tnLine":146,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.logserver.AlluxioLogServerProcess.stop():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.debug(String,Object,Object)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"underfs/cos/src/main/java/alluxio/underfs/cos/COSUnderFileSystem.java","tnLine":128,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.cos.COSUnderFileSystem.copyObject(java.lang.String,java.lang.String):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"RESOURCE_LEAK","tnDesc":"resource of type `alluxio.master.journal.raft.SnapshotReaderStream` acquired by call to `new()` at line 142 is not released after line 142.\n**Note**: potential exception at line 142","tnFile":"core/server/common/src/main/java/alluxio/master/journal/tool/RaftJournalDumper.java","tnLine":142,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.journal.tool.RaftJournalDumper.readCopycatSnapshotFromDir():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `__new(alluxio.concurrent.ManagedBlockingUfsForwarder$28).get()` could be null and is dereferenced at line 386.","tnFile":"core/common/src/main/java/alluxio/concurrent/ManagedBlockingUfsForwarder.java","tnLine":386,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.ManagedBlockingUfsForwarder.mkdirs(java.lang.String):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"RESOURCE_LEAK","tnDesc":"resource of type `com.esotericsoftware.kryo.io.OutputChunked` acquired by call to `new()` at line 129 is not released after line 136.","tnFile":"core/server/common/src/main/java/alluxio/master/journal/JournalUtils.java","tnLine":136,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.journal.JournalUtils.writeToCheckpoint(alluxio.master.journal.raft.SnapshotWriterStream,java.util.List):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object `ufs` last assigned on line 223 could be null and is dereferenced at line 226.","tnFile":"core/server/worker/src/main/java/alluxio/worker/grpc/UfsFallbackBlockWriteHandler.java","tnLine":226,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.worker.grpc.UfsFallbackBlockWriteHandler.createUfsBlock(alluxio.worker.grpc.BlockWriteRequestContext):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.error(String)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/server/common/src/main/java/alluxio/master/journal/AsyncJournalWriter.java","tnLine":166,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.journal.AsyncJournalWriter.<init>(alluxio.master.journal.JournalWriter,java.util.function.Supplier)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void FileSystem.delete(AlluxioURI)` of un-annotated interface `alluxio.client.file.FileSystem`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"integration/fuse/src/main/java/alluxio/fuse/AlluxioFuseFileSystem.java","tnLine":654,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.fuse.AlluxioFuseFileSystem.unlink(java.lang.String):int","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `long ReadRequestContext.getPosReceived()` reads without synchronization from `this.mPosReceived`. Potentially races with write in method `ReadRequestContext.setPosReceived(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/server/worker/src/main/java/alluxio/worker/grpc/ReadRequestContext.java","tnLine":121,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.worker.grpc.ReadRequestContext.getPosReceived():long","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object `results` last assigned on line 854 could be null and is dereferenced at line 857.","tnFile":"examples/src/main/java/alluxio/examples/UnderFileSystemCommonOperations.java","tnLine":857,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.examples.UnderFileSystemCommonOperations.objectCommonPrefixesListStatusRecursiveTest():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.debug(String,Object)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"underfs/swift/src/main/java/alluxio/underfs/swift/SwiftUnderFileSystem.java","tnLine":250,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.swift.SwiftUnderFileSystem.createObject(java.lang.String):java.io.OutputStream","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Container Account.getContainer(String)` of un-annotated interface `org.javaswift.joss.model.Account`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"underfs/swift/src/main/java/alluxio/underfs/swift/SwiftUnderFileSystem.java","tnLine":277,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.swift.SwiftUnderFileSystem.getObjectListingChunk(java.lang.String,boolean):alluxio.underfs.ObjectUnderFileSystem$ObjectListingChunk","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `UnderFileSystemConfiguration UfsJournal.getJournalUfsConf()` indirectly mutates container `conf.PropertyKey.DEFAULT_ALIAS_MAP` via call to `put` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/server/common/src/main/java/alluxio/master/journal/ufs/UfsJournal.java","tnLine":123,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.journal.ufs.UfsJournal.getJournalUfsConf():alluxio.underfs.UnderFileSystemConfiguration","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object UnderFileSystemWithLogging$UfsCallable.call()` of un-annotated interface `alluxio.underfs.UnderFileSystemWithLogging$UfsCallable`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.underfs.UnderFileSystem` is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/underfs/UnderFileSystemWithLogging.java","tnLine":510,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.UnderFileSystemWithLogging.isDirectory(java.lang.String):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object BaseFileSystem$RpcCallable.call(Object)` of un-annotated interface `alluxio.client.file.BaseFileSystem$RpcCallable`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/client/fs/src/main/java/alluxio/client/file/BaseFileSystem.java","tnLine":307,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.client.file.BaseFileSystem.getStatus(alluxio.AlluxioURI):alluxio.client.file.URIStatus","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void JobMaster.cancel(long)` reads without synchronization from container `this.mIdToJobCoordinator` via call to `get`. Potentially races with write in method `JobMaster.run(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"job/server/src/main/java/alluxio/master/job/JobMaster.java","tnLine":266,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.job.JobMaster.cancel(long):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void ForkJoinPool.externalPush(ForkJoinTask)` reads without synchronization from `ws.[_]`. Potentially races with write in method `ForkJoinPool.externalPush(...)`.\n Reporting because this access may occur on a background thread.","tnFile":"core/common/src/main/java/alluxio/concurrent/jsr/ForkJoinPool.java","tnLine":1630,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.jsr.ForkJoinPool.externalPush(alluxio.concurrent.jsr.ForkJoinTask):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void ExtensionFactoryRegistry.register(ExtensionFactory)` indirectly mutates container `this.mFactories` via call to `add` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"core/common/src/main/java/alluxio/extensions/ExtensionFactoryRegistry.java","tnLine":224,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.extensions.ExtensionFactoryRegistry.register(alluxio.extensions.ExtensionFactory):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object Gauge.getValue()` of un-annotated interface `com.codahale.metrics.Gauge`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/metrics/MetricsSystem.java","tnLine":491,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.metrics.MetricsSystem.allWorkerMetrics():java.util.List","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void SetTtlCommand.validateArgs(CommandLine)` writes to field `this.mAction` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"shell/src/main/java/alluxio/cli/fs/command/SetTtlCommand.java","tnLine":69,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.SetTtlCommand.validateArgs(org.apache.commons.cli.CommandLine):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"RESOURCE_LEAK","tnDesc":"resource of type `alluxio.client.file.FileSystemContext` acquired to `ctx` by call to `new()` at line 177 is not released after line 179.\n**Note**: potential exception at line 178","tnFile":"core/client/fs/src/main/java/alluxio/client/file/FileSystemContext.java","tnLine":179,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.client.file.FileSystemContext.create(alluxio.ClientContext):alluxio.client.file.FileSystemContext","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `__new(alluxio.concurrent.ManagedBlockingUfsForwarder$7).get()` could be null and is dereferenced at line 144.","tnFile":"core/common/src/main/java/alluxio/concurrent/ManagedBlockingUfsForwarder.java","tnLine":144,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.ManagedBlockingUfsForwarder.deleteExistingDirectory(java.lang.String):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.error(String)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"underfs/web/src/main/java/alluxio/underfs/web/WebUnderFileSystem.java","tnLine":223,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.web.WebUnderFileSystem.isFile(java.lang.String):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String URI.getPath()` of un-annotated interface `alluxio.uri.URI`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/conf/path/PrefixPathMatcher.java","tnLine":64,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.conf.path.PrefixPathMatcher.match(alluxio.AlluxioURI):java.util.Optional","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `Source ServerConfiguration.getSource(PropertyKey)` reads without synchronization from `conf.ServerConfiguration.sConf`. Potentially races with write in method `ServerConfiguration.loadClusterDefaultsIfNotLoaded(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"core/server/common/src/main/java/alluxio/conf/ServerConfiguration.java","tnLine":316,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.conf.ServerConfiguration.getSource(alluxio.conf.PropertyKey):alluxio.conf.Source","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `boolean UfsJournal.isFormatted()` indirectly reads without synchronization from container `conf.PropertyKey.DEFAULT_ALIAS_MAP` via call to `get`. Potentially races with write in method `UfsJournal(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/server/common/src/main/java/alluxio/master/journal/ufs/UfsJournal.java","tnLine":293,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.journal.ufs.UfsJournal.isFormatted():boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `Map ServerConfiguration.toMap(ConfigurationValueOptions)` reads without synchronization from `conf.ServerConfiguration.sConf`. Potentially races with write in method `ServerConfiguration.loadClusterDefaultsIfNotLoaded(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"core/server/common/src/main/java/alluxio/conf/ServerConfiguration.java","tnLine":333,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.conf.ServerConfiguration.toMap(alluxio.conf.ConfigurationValueOptions):java.util.Map","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.debug(String,Object)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/util/ShellUtils.java","tnLine":113,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.util.ShellUtils.parseMountInfo(java.lang.String):alluxio.util.UnixMountInfo","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object UnderFileSystemWithLogging$UfsCallable.call()` of un-annotated interface `alluxio.underfs.UnderFileSystemWithLogging$UfsCallable`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.underfs.UnderFileSystem` is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/underfs/UnderFileSystemWithLogging.java","tnLine":813,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.UnderFileSystemWithLogging.setMode(java.lang.String,short):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.debug(String,Object)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/security/authentication/AuthenticatedUserInjector.java","tnLine":56,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.security.authentication.AuthenticatedUserInjector.interceptCall(io.grpc.ServerCall,io.grpc.Metadata,io.grpc.ServerCallHandler):io.grpc.ServerCall$Listener","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"RESOURCE_LEAK","tnDesc":"resource of type `org.apache.commons.compress.archivers.tar.TarArchiveOutputStream` acquired by call to `new()` at line 45 is not released after line 60.","tnFile":"core/server/common/src/main/java/alluxio/util/TarUtils.java","tnLine":60,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.util.TarUtils.writeTarGz(java.nio.file.Path,alluxio.master.journal.checkpoint.CheckpointOutputStream):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Enum AlluxioConfiguration.getEnum(PropertyKey,Class)` of un-annotated interface `alluxio.conf.AlluxioConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/util/SecurityUtils.java","tnLine":76,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.util.SecurityUtils.getOwnerFromGrpcClient(alluxio.conf.AlluxioConfiguration):java.lang.String","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"UNSAFE_GUARDED_BY_ACCESS","tnDesc":"The field `alluxio.util.ConfigurationUtils.sDefaultProperties` is annotated with `@GuardedBy(\"DEFAULT_PROPERTIES_LOCK\")`, but the lock `DEFAULT_PROPERTIES_LOCK` is not held during the access to the field at line 390. Since the current method is non-private, it can be called from outside the current class without synchronization. Consider wrapping the access in a `synchronized(DEFAULT_PROPERTIES_LOCK)` block or making the method private.","tnFile":"core/common/src/main/java/alluxio/util/ConfigurationUtils.java","tnLine":390,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.util.ConfigurationUtils.defaults():alluxio.conf.AlluxioProperties","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `boolean ForkJoinPool$ManagedBlocker.block()` of un-annotated interface `alluxio.concurrent.jsr.ForkJoinPool$ManagedBlocker`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.underfs.UnderFileSystem` is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/concurrent/ManagedBlockingUfsForwarder.java","tnLine":84,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.ManagedBlockingUfsForwarder.create(java.lang.String):java.io.OutputStream","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `boolean ForkJoinPool.awaitTermination(long,TimeUnit)` indirectly reads without synchronization from `this.workQueues`. Potentially races with write in method `ForkJoinPool.registerWorker(...)`.\n Reporting because this access may occur on a background thread.","tnFile":"core/common/src/main/java/alluxio/concurrent/jsr/ForkJoinPool.java","tnLine":2307,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.jsr.ForkJoinPool.awaitTermination(long,java.util.concurrent.TimeUnit):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void FileSystem.setAttribute(AlluxioURI,SetAttributePOptions)` of un-annotated interface `alluxio.client.file.FileSystem`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/FileSystemCommandUtils.java","tnLine":51,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.FileSystemCommandUtils.setTtl(alluxio.client.file.FileSystem,alluxio.AlluxioURI,long,alluxio.grpc.TtlAction):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object BaseFileSystem$RpcCallable.call(Object)` of un-annotated interface `alluxio.client.file.BaseFileSystem$RpcCallable`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/client/fs/src/main/java/alluxio/client/file/BaseFileSystem.java","tnLine":374,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.client.file.BaseFileSystem.getMountTable():java.util.Map","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String Command.getCommandName()` of un-annotated interface `alluxio.cli.Command`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/UnpinCommand.java","tnLine":73,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.UnpinCommand.validateArgs(org.apache.commons.cli.CommandLine):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String Command.getCommandName()` of un-annotated interface `alluxio.cli.Command`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/LoadCommand.java","tnLine":137,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.LoadCommand.validateArgs(org.apache.commons.cli.CommandLine):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.error(String)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/server/worker/src/main/java/alluxio/worker/block/AsyncCacheRequestManager.java","tnLine":51,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.worker.block.AsyncCacheRequestManager.<init>(java.util.concurrent.ExecutorService,alluxio.worker.block.BlockWorker,alluxio.client.file.FileSystemContext)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `boolean ForkJoinPool$ManagedBlocker.block()` of un-annotated interface `alluxio.concurrent.jsr.ForkJoinPool$ManagedBlocker`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.underfs.UnderFileSystem` is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/concurrent/ManagedBlockingUfsForwarder.java","tnLine":326,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.ManagedBlockingUfsForwarder.isDirectory(java.lang.String):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `UserState UserStateFactory.create(Subject,AlluxioConfiguration,boolean)` of un-annotated interface `alluxio.security.user.UserStateFactory`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/server/worker/src/main/java/alluxio/worker/WorkerProcess.java","tnLine":38,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.worker.WorkerProcess$Factory.create():alluxio.worker.WorkerProcess","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `String ServerConfiguration.getOrDefault(PropertyKey,String,ConfigurationValueOptions)` reads without synchronization from `conf.ServerConfiguration.sConf`. Potentially races with write in method `ServerConfiguration.loadClusterDefaultsIfNotLoaded(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"core/server/common/src/main/java/alluxio/conf/ServerConfiguration.java","tnLine":165,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.conf.ServerConfiguration.getOrDefault(alluxio.conf.PropertyKey,java.lang.String,alluxio.conf.ConfigurationValueOptions):java.lang.String","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object UnderFileSystemWithLogging$UfsCallable.call()` of un-annotated interface `alluxio.underfs.UnderFileSystemWithLogging$UfsCallable`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.underfs.UnderFileSystem` is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/underfs/UnderFileSystemWithLogging.java","tnLine":97,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.UnderFileSystemWithLogging.close():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `UserState UserStateFactory.create(Subject,AlluxioConfiguration,boolean)` of un-annotated interface `alluxio.security.user.UserStateFactory`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/CatCommand.java","tnLine":40,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.CatCommand.<init>(alluxio.client.file.FileSystemContext)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `UserState UserStateFactory.create(Subject,AlluxioConfiguration,boolean)` of un-annotated interface `alluxio.security.user.UserStateFactory`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/ChecksumCommand.java","tnLine":42,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.ChecksumCommand.<init>(alluxio.client.file.FileSystemContext)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String URI.getPath()` of un-annotated interface `alluxio.uri.URI`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"underfs/local/src/main/java/alluxio/underfs/local/LocalUnderFileSystem.java","tnLine":101,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.local.LocalUnderFileSystem.create(java.lang.String,alluxio.underfs.options.CreateOptions):java.io.OutputStream","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void RaftPrimarySelector.init(CopycatServer)` writes to field `this.mStateListener` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/server/common/src/main/java/alluxio/master/journal/raft/RaftPrimarySelector.java","tnLine":47,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.journal.raft.RaftPrimarySelector.init(io.atomix.copycat.server.CopycatServer):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void FileSystem.persist(AlluxioURI,ScheduleAsyncPersistencePOptions)` of un-annotated interface `alluxio.client.file.FileSystem`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/client/fs/src/main/java/alluxio/client/file/FileSystemUtils.java","tnLine":139,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.client.file.FileSystemUtils.persistAndWait(alluxio.client.file.FileSystem,alluxio.AlluxioURI,long):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String Command.getCommandName()` of un-annotated interface `alluxio.cli.Command`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/CountCommand.java","tnLine":47,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.CountCommand.validateArgs(org.apache.commons.cli.CommandLine):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Optional PathConfiguration.getConfiguration(AlluxioURI,PropertyKey)` of un-annotated interface `alluxio.conf.path.PathConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/conf/path/SpecificPathConfiguration.java","tnLine":103,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.conf.path.SpecificPathConfiguration.getInt(alluxio.conf.PropertyKey):int","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"UNSAFE_GUARDED_BY_ACCESS","tnDesc":"The field `alluxio.master.file.meta.MountTable.mState` is annotated with `@GuardedBy(\"mReadLock,mWriteLock\")`, but the lock `mReadLock,mWriteLock` is not held during the access to the field at line 259. Since the current method is non-private, it can be called from outside the current class without synchronization. Consider wrapping the access in a `synchronized(mReadLock,mWriteLock)` block or making the method private.","tnFile":"core/server/master/src/main/java/alluxio/master/file/meta/MountTable.java","tnLine":259,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.file.meta.MountTable.getMountTable():java.util.Map","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Optional PathConfiguration.getConfiguration(AlluxioURI,PropertyKey)` of un-annotated interface `alluxio.conf.path.PathConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/conf/path/SpecificPathConfiguration.java","tnLine":133,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.conf.path.SpecificPathConfiguration.getEnum(alluxio.conf.PropertyKey,java.lang.Class):java.lang.Enum","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String Command.getCommandName()` of un-annotated interface `alluxio.cli.Command`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/job/command/LeaderCommand.java","tnLine":51,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.job.command.LeaderCommand.validateArgs(org.apache.commons.cli.CommandLine):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.error(String)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"underfs/s3a/src/main/java/alluxio/underfs/s3a/S3AUnderFileSystem.java","tnLine":337,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.s3a.S3AUnderFileSystem.deleteObjects(java.util.List):java.util.List","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.debug(String,Object,Object)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/security/authentication/DefaultAuthenticationServer.java","tnLine":96,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.security.authentication.DefaultAuthenticationServer.registerChannel(java.util.UUID,alluxio.security.authentication.AuthenticatedUserInfo,alluxio.security.authentication.SaslStreamServerDriver):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `String MetricsSystem.stripInstanceAndHost(String)` writes to field `pieces.[_]` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/common/src/main/java/alluxio/metrics/MetricsSystem.java","tnLine":353,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.metrics.MetricsSystem.stripInstanceAndHost(java.lang.String):java.lang.String","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `Iterator InodeDirectoryIdGenerator.getJournalEntryIterator()` indirectly reads without synchronization from `this.mNextDirectoryId.mContainerId`. Potentially races with write in method `InodeDirectoryIdGenerator.processJournalEntry(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/server/master/src/main/java/alluxio/master/file/meta/InodeDirectoryIdGenerator.java","tnLine":114,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.file.meta.InodeDirectoryIdGenerator.getJournalEntryIterator():java.util.Iterator","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `User UserState.getUser()` of un-annotated interface `alluxio.security.user.UserState`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/util/SecurityUtils.java","tnLine":109,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.util.SecurityUtils.getOwner(alluxio.security.user.UserState):java.lang.String","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `boolean CachingInodeStore.hasChildren(InodeDirectoryView,ReadOption)` indirectly reads without synchronization from container `this.mListingCache.mMap` via call to `get`. Potentially races with write in method `CachingInodeStore.restoreFromCheckpoint(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/server/master/src/main/java/alluxio/master/metastore/caching/CachingInodeStore.java","tnLine":202,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.metastore.caching.CachingInodeStore.hasChildren(alluxio.master.file.meta.InodeDirectoryView,alluxio.master.metastore.ReadOption):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.debug(String,java.lang.Object[])` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/util/LogUtils.java","tnLine":127,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.util.LogUtils.warnWithException(org.slf4j.Logger,java.lang.String,java.lang.Object[]):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Listener.close()` of un-annotated interface `io.atomix.catalyst.concurrent.Listener`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/server/common/src/main/java/alluxio/master/journal/raft/RaftPrimarySelector.java","tnLine":43,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.journal.raft.RaftPrimarySelector.init(io.atomix.copycat.server.CopycatServer):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `UserState UserStateFactory.create(Subject,AlluxioConfiguration,boolean)` of un-annotated interface `alluxio.security.user.UserStateFactory`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/CopyToLocalCommand.java","tnLine":38,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.CopyToLocalCommand.<init>(alluxio.client.file.FileSystemContext)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object ObjectUnderFileSystem$ObjectStoreOperation.apply()` of un-annotated interface `alluxio.underfs.ObjectUnderFileSystem$ObjectStoreOperation`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/underfs/ObjectUnderFileSystem.java","tnLine":582,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.ObjectUnderFileSystem.isExistingDirectory(java.lang.String):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void FileSystem.persist(AlluxioURI,ScheduleAsyncPersistencePOptions)` of un-annotated interface `alluxio.client.file.FileSystem`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/client/fs/src/main/java/alluxio/client/file/FileSystemUtils.java","tnLine":156,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.client.file.FileSystemUtils.persistAndWait(alluxio.client.file.FileSystem,alluxio.AlluxioURI,long,int):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `int AlluxioConfiguration.getInt(PropertyKey)` of un-annotated interface `alluxio.conf.AlluxioConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/util/network/NetworkAddressUtils.java","tnLine":310,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.util.network.NetworkAddressUtils.getPort(alluxio.util.network.NetworkAddressUtils$ServiceType,alluxio.conf.AlluxioConfiguration):int","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `boolean ForkJoinPool$ManagedBlocker.block()` of un-annotated interface `alluxio.concurrent.jsr.ForkJoinPool$ManagedBlocker`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.underfs.UnderFileSystem` is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/concurrent/ManagedBlockingUfsForwarder.java","tnLine":256,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.ManagedBlockingUfsForwarder.getFileStatus(java.lang.String):alluxio.underfs.UfsFileStatus","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"RESOURCE_LEAK","tnDesc":"resource of type `java.lang.Process` acquired by call to `exec(...)` at line 229 is not released after line 229.","tnFile":"examples/src/main/java/alluxio/cli/JournalCrashTest.java","tnLine":229,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.JournalCrashTest.killMaster():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Authority URI.getAuthority()` of un-annotated interface `alluxio.uri.URI`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/base/src/main/java/alluxio/uri/MultiPartSchemeURI.java","tnLine":59,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.uri.MultiPartSchemeURI.<init>(alluxio.uri.URI,java.lang.String,java.lang.String)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object UnderFileSystemWithLogging$UfsCallable.call()` of un-annotated interface `alluxio.underfs.UnderFileSystemWithLogging$UfsCallable`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.underfs.UnderFileSystem` is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/underfs/UnderFileSystemWithLogging.java","tnLine":639,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.UnderFileSystemWithLogging.mkdirs(java.lang.String,alluxio.underfs.options.MkdirsOptions):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object BaseFileSystem$RpcCallable.call(Object)` of un-annotated interface `alluxio.client.file.BaseFileSystem$RpcCallable`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/client/fs/src/main/java/alluxio/client/file/BaseFileSystem.java","tnLine":379,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.client.file.BaseFileSystem.getSyncPathList():java.util.List","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `int HeadCommand.run(CommandLine)` reads without synchronization from `this.mNumOfBytes`. Potentially races with write in method `HeadCommand.run(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"shell/src/main/java/alluxio/cli/fs/command/HeadCommand.java","tnLine":94,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.HeadCommand.run(org.apache.commons.cli.CommandLine):int","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `String PropertyKey.getDeprecationMessage(PropertyKey)` indirectly reads without synchronization from `conf.PropertyKey.DEPRECATED_CHECKER.mAnnotatedKeys`. Potentially races with write in method `PropertyKey.getDeprecationMessage(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/common/src/main/java/alluxio/conf/PropertyKey.java","tnLine":4803,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.conf.PropertyKey.getDeprecationMessage(alluxio.conf.PropertyKey):java.lang.String","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object UnderFileSystemWithLogging$UfsCallable.call()` of un-annotated interface `alluxio.underfs.UnderFileSystemWithLogging$UfsCallable`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.underfs.UnderFileSystem` is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/underfs/UnderFileSystemWithLogging.java","tnLine":869,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.UnderFileSystemWithLogging.getActiveSyncInfo():alluxio.SyncInfo","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `InstancedConfiguration HadoopConfigurationUtils.mergeHadoopConfiguration(Configuration,AlluxioProperties)` indirectly mutates container `conf.PropertyKey.DEFAULT_ALIAS_MAP` via call to `put` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/client/hdfs/src/main/java/alluxio/hadoop/HadoopConfigurationUtils.java","tnLine":59,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.hadoop.HadoopConfigurationUtils.mergeHadoopConfiguration(org.apache.hadoop.conf.Configuration,alluxio.conf.AlluxioProperties):alluxio.conf.InstancedConfiguration","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object UnderFileSystemWithLogging$UfsCallable.call()` of un-annotated interface `alluxio.underfs.UnderFileSystemWithLogging$UfsCallable`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.underfs.UnderFileSystem` is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/underfs/UnderFileSystemWithLogging.java","tnLine":298,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.UnderFileSystemWithLogging.exists(java.lang.String):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void GrpcChannel.shutdown()` reads without synchronization from `this.mChannelReleased`. Potentially races with write in method `GrpcChannel.shutdown()`.\n Reporting because a superclass `class io.grpc.Channel` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/common/src/main/java/alluxio/grpc/GrpcChannel.java","tnLine":103,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.grpc.GrpcChannel.shutdown():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `UserState UserStateFactory.create(Subject,AlluxioConfiguration,boolean)` of un-annotated interface `alluxio.security.user.UserStateFactory`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"examples/src/main/java/alluxio/cli/TestRunner.java","tnLine":100,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.TestRunner.main(java.lang.String[]):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object UnderFileSystemWithLogging$UfsCallable.call()` of un-annotated interface `alluxio.underfs.UnderFileSystemWithLogging$UfsCallable`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.underfs.UnderFileSystem` is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/underfs/UnderFileSystemWithLogging.java","tnLine":624,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.UnderFileSystemWithLogging.mkdirs(java.lang.String):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object BaseFileSystem$RpcCallable.call(Object)` of un-annotated interface `alluxio.client.file.BaseFileSystem$RpcCallable`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/client/fs/src/main/java/alluxio/client/file/BaseFileSystem.java","tnLine":492,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.client.file.BaseFileSystem.startSync(alluxio.AlluxioURI):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object ObjectUnderFileSystem$ObjectStoreOperation.apply()` of un-annotated interface `alluxio.underfs.ObjectUnderFileSystem$ObjectStoreOperation`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/underfs/ObjectUnderFileSystem.java","tnLine":445,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.ObjectUnderFileSystem.deleteExistingDirectory(java.lang.String):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"UNSAFE_GUARDED_BY_ACCESS","tnDesc":"The field `alluxio.master.file.meta.MountTable.mState` is annotated with `@GuardedBy(\"mReadLock,mWriteLock\")`, but the lock `mReadLock,mWriteLock` is not held during the access to the field at line 183. Since the current method is non-private, it can be called from outside the current class without synchronization. Consider wrapping the access in a `synchronized(mReadLock,mWriteLock)` block or making the method private.","tnFile":"core/server/master/src/main/java/alluxio/master/file/meta/MountTable.java","tnLine":183,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.file.meta.MountTable.delete(java.util.function.Supplier,alluxio.AlluxioURI,boolean):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.error(String)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/server/master/src/main/java/alluxio/master/metastore/caching/CachingInodeStore.java","tnLine":120,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.metastore.caching.CachingInodeStore.<init>(alluxio.master.metastore.InodeStore,alluxio.master.file.meta.InodeLockManager)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"RESOURCE_LEAK","tnDesc":"resource of type `alluxio.master.block.DefaultBlockMaster$LostWorkerDetectionHeartbeatExecutor` acquired by call to `new()` at line 348 is not released after line 348.","tnFile":"core/server/master/src/main/java/alluxio/master/block/DefaultBlockMaster.java","tnLine":348,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.block.DefaultBlockMaster.start(java.lang.Boolean):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void InodeDirectoryIdGenerator.resetState()` indirectly writes to field `this.mNextDirectoryId.mContainerId` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/server/master/src/main/java/alluxio/master/file/meta/InodeDirectoryIdGenerator.java","tnLine":106,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.file.meta.InodeDirectoryIdGenerator.resetState():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"UNSAFE_GUARDED_BY_ACCESS","tnDesc":"The field `alluxio.master.job.JobMaster.mWorkers` is annotated with `@GuardedBy(\"mWorkerRWLock\")`, but the lock `mWorkerRWLock` is not held during the access to the field at line 330. Since the current method is non-private, it can be called from outside the current class without synchronization. Consider wrapping the access in a `synchronized(mWorkerRWLock)` block or making the method private.","tnFile":"job/server/src/main/java/alluxio/master/job/JobMaster.java","tnLine":330,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.job.JobMaster.getWorkerInfoList():java.util.List","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String AlluxioConfiguration.get(PropertyKey,ConfigurationValueOptions)` of un-annotated interface `alluxio.conf.AlluxioConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/conf/path/SpecificPathConfiguration.java","tnLine":78,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.conf.path.SpecificPathConfiguration.get(alluxio.conf.PropertyKey,alluxio.conf.ConfigurationValueOptions):java.lang.String","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String Command.getCommandName()` of un-annotated interface `alluxio.cli.Command`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/DistributedMvCommand.java","tnLine":49,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.DistributedMvCommand.validateArgs(org.apache.commons.cli.CommandLine):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object RpcUtils$RpcCallableThrowsIOException.call()` of un-annotated interface `alluxio.RpcUtils$RpcCallableThrowsIOException`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"job/server/src/main/java/alluxio/master/job/JobMasterWorkerServiceHandler.java","tnLine":55,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.job.JobMasterWorkerServiceHandler.heartbeat(alluxio.grpc.JobHeartbeatPRequest,io.grpc.stub.StreamObserver):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `int JournalCrashTest$ClientThread.getSuccessNum()` reads without synchronization from `this.mSuccessNum`. Potentially races with write in method `JournalCrashTest$ClientThread.run()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"examples/src/main/java/alluxio/cli/JournalCrashTest.java","tnLine":102,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.JournalCrashTest$ClientThread.getSuccessNum():int","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `UserState UserStateFactory.create(Subject,AlluxioConfiguration,boolean)` of un-annotated interface `alluxio.security.user.UserStateFactory`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/StartSyncCommand.java","tnLine":38,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.StartSyncCommand.<init>(alluxio.client.file.FileSystemContext)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String Command.getCommandName()` of un-annotated interface `alluxio.cli.Command`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/FreeCommand.java","tnLine":121,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.FreeCommand.validateArgs(org.apache.commons.cli.CommandLine):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object UnderFileSystemWithLogging$UfsCallable.call()` of un-annotated interface `alluxio.underfs.UnderFileSystemWithLogging$UfsCallable`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.underfs.UnderFileSystem` is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/underfs/UnderFileSystemWithLogging.java","tnLine":253,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.UnderFileSystemWithLogging.deleteExistingDirectory(java.lang.String,alluxio.underfs.options.DeleteOptions):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `String ForkJoinPool.toString()` reads without synchronization from `this.workQueues`. Potentially races with write in method `ForkJoinPool.registerWorker(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"core/common/src/main/java/alluxio/concurrent/jsr/ForkJoinPool.java","tnLine":2187,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.jsr.ForkJoinPool.toString():java.lang.String","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void AuthenticationServer.close()` of un-annotated interface `alluxio.security.authentication.AuthenticationServer`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/server/master/src/main/java/alluxio/master/AlluxioMasterProcess.java","tnLine":375,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.AlluxioMasterProcess$Factory.create():alluxio.master.AlluxioMasterProcess","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object `results` last assigned on line 1116 could be null and is dereferenced at line 1117.","tnFile":"examples/src/main/java/alluxio/examples/UnderFileSystemCommonOperations.java","tnLine":1117,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.examples.UnderFileSystemCommonOperations.lambda$renameLargeDirectoryTest$1(java.lang.String,java.lang.String[],alluxio.examples.UnderFileSystemCommonOperations$LargeDirectoryConfig):java.lang.Boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String Command.getCommandName()` of un-annotated interface `alluxio.cli.Command`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/server/common/src/main/java/alluxio/cli/extensions/ExtensionsShellUtils.java","tnLine":43,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.extensions.ExtensionsShellUtils.loadCommands():java.util.Map","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `JobInfo JobMasterClient.getStatus(long)` of un-annotated interface `alluxio.client.job.JobMasterClient`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/job/command/StatCommand.java","tnLine":74,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.job.command.StatCommand.run(org.apache.commons.cli.CommandLine):int","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"UNSAFE_GUARDED_BY_ACCESS","tnDesc":"The field `alluxio.master.file.meta.MountTable.mState` is annotated with `@GuardedBy(\"mReadLock,mWriteLock\")`, but the lock `mReadLock,mWriteLock` is not held during the access to the field at line 168. Since the current method is non-private, it can be called from outside the current class without synchronization. Consider wrapping the access in a `synchronized(mReadLock,mWriteLock)` block or making the method private.","tnFile":"core/server/master/src/main/java/alluxio/master/file/meta/MountTable.java","tnLine":168,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.file.meta.MountTable.delete(java.util.function.Supplier,alluxio.AlluxioURI,boolean):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void JobMaster.start(Object)` indirectly writes to field `this.mExecutorService` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"job/server/src/main/java/alluxio/master/job/JobMaster.java","tnLine":75,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.job.JobMaster.start(java.lang.Object):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `ChannelConfig Channel.config()` of un-annotated interface `io.netty.channel.Channel`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/util/network/NettyUtils.java","tnLine":135,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.util.network.NettyUtils.enableAutoRead(io.netty.channel.Channel):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void ForkJoinPool.externalPush(ForkJoinTask)` reads without synchronization from `this.workQueues`. Potentially races with write in method `ForkJoinPool.registerWorker(...)`.\n Reporting because this access may occur on a background thread.","tnFile":"core/common/src/main/java/alluxio/concurrent/jsr/ForkJoinPool.java","tnLine":1624,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.jsr.ForkJoinPool.externalPush(alluxio.concurrent.jsr.ForkJoinTask):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.debug(String,Object)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/client/fs/src/main/java/alluxio/client/block/policy/LocalFirstPolicy.java","tnLine":78,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.client.block.policy.LocalFirstPolicy.getWorker(alluxio.client.block.policy.options.GetWorkerOptions):alluxio.wire.WorkerNetAddress","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.debug(String,Object)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/client/fs/src/main/java/alluxio/client/file/FileSystemUtils.java","tnLine":103,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.client.file.FileSystemUtils.waitCompleted(alluxio.client.file.FileSystem,alluxio.AlluxioURI,long,java.util.concurrent.TimeUnit):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Map FileSystem.getMountTable()` of un-annotated interface `alluxio.client.file.FileSystem`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/MountCommand.java","tnLine":86,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.MountCommand.run(org.apache.commons.cli.CommandLine):int","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `List ForkJoinPool.shutdownNow()` indirectly reads without synchronization from `this.workQueues`. Potentially races with write in method `ForkJoinPool.registerWorker(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"core/common/src/main/java/alluxio/concurrent/jsr/ForkJoinPool.java","tnLine":2249,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.jsr.ForkJoinPool.shutdownNow():java.util.List","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `boolean ForkJoinPool$ManagedBlocker.block()` of un-annotated interface `alluxio.concurrent.jsr.ForkJoinPool$ManagedBlocker`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.underfs.UnderFileSystem` is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/concurrent/ManagedBlockingUfsForwarder.java","tnLine":386,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.ManagedBlockingUfsForwarder.mkdirs(java.lang.String):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.error(String)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"underfs/web/src/main/java/alluxio/underfs/web/WebUnderFileSystem.java","tnLine":210,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.web.WebUnderFileSystem.isDirectory(java.lang.String):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void UfsJournal.losePrimacy()` indirectly reads with synchronization from container `conf.PropertyKey.DEFAULT_ALIAS_MAP` via call to `get`. Potentially races with unsynchronized write in method `UfsJournal(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/server/common/src/main/java/alluxio/master/journal/ufs/UfsJournal.java","tnLine":241,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.journal.ufs.UfsJournal.losePrimacy():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"RESOURCE_LEAK","tnDesc":"resource of type `alluxio.master.journal.checkpoint.CheckpointOutputStream` acquired by call to `new()` at line 79 is not released after line 88.","tnFile":"core/server/common/src/main/java/alluxio/master/journal/JournalUtils.java","tnLine":88,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.journal.JournalUtils.writeJournalEntryCheckpoint(java.io.OutputStream,alluxio.master.journal.JournalEntryIterable):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String URI.getPath()` of un-annotated interface `alluxio.uri.URI`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"underfs/local/src/main/java/alluxio/underfs/local/LocalUnderFileSystem.java","tnLine":383,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.local.LocalUnderFileSystem.renameFile(java.lang.String,java.lang.String):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"RESOURCE_LEAK","tnDesc":"resource of type `alluxio.master.meta.DefaultMetaMaster$LogConfigReportHeartbeatExecutor` acquired by call to `new()` at line 230 is not released after line 230.","tnFile":"core/server/master/src/main/java/alluxio/master/meta/DefaultMetaMaster.java","tnLine":230,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.meta.DefaultMetaMaster.start(java.lang.Boolean):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void ServerConfiguration.reset()` writes to field `conf.ServerConfiguration.sConf` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"core/server/common/src/main/java/alluxio/conf/ServerConfiguration.java","tnLine":70,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.conf.ServerConfiguration.reset():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void WriteRequestContext.setMeter(Meter)` writes to field `this.mMeter` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/server/worker/src/main/java/alluxio/worker/grpc/WriteRequestContext.java","tnLine":142,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.worker.grpc.WriteRequestContext.setMeter(com.codahale.metrics.Meter):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Authority URI.getAuthority()` of un-annotated interface `alluxio.uri.URI`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/grpc/GrpcUtils.java","tnLine":620,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.grpc.GrpcUtils.toProto(alluxio.wire.UfsInfo):alluxio.grpc.UfsInfo","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.error(String)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/server/common/src/main/java/alluxio/StorageTierAssoc.java","tnLine":65,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.StorageTierAssoc.<init>(alluxio.conf.PropertyKey,alluxio.conf.PropertyKey$Template)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `String MasterBlockInfo.toString()` reads without synchronization from `this.mLength`. Potentially races with write in method `MasterBlockInfo.updateLength(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"core/server/master/src/main/java/alluxio/master/block/meta/MasterBlockInfo.java","tnLine":154,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.block.meta.MasterBlockInfo.toString():java.lang.String","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object `request` last assigned on line 73 could be null and is dereferenced at line 74.","tnFile":"core/server/worker/src/main/java/alluxio/worker/grpc/BlockWriteHandler.java","tnLine":74,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.worker.grpc.BlockWriteHandler.createRequestContext(alluxio.grpc.WriteRequest):alluxio.worker.grpc.BlockWriteRequestContext","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object `statuses` last assigned on line 135 could be null and is dereferenced at line 136.","tnFile":"core/server/master/src/main/java/alluxio/master/meta/DailyMetadataBackup.java","tnLine":136,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.meta.DailyMetadataBackup.deleteStaleBackups():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void AlluxioLogServerProcess.start()` writes to field `this.mThreadPool` outside of synchronization.\n Reporting because this access may occur on a background thread.","tnFile":"logserver/src/main/java/alluxio/logserver/AlluxioLogServerProcess.java","tnLine":86,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.logserver.AlluxioLogServerProcess.start():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void MiniBenchmark.main(java.lang.String[])` reads without synchronization from `cli.MiniBenchmark.sIterations`. Potentially races with write in method `MiniBenchmark.main(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"examples/src/main/java/alluxio/cli/MiniBenchmark.java","tnLine":136,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.MiniBenchmark.main(java.lang.String[]):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `boolean ForkJoinPool$ManagedBlocker.block()` of un-annotated interface `alluxio.concurrent.jsr.ForkJoinPool$ManagedBlocker`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.underfs.UnderFileSystem` is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/concurrent/ManagedBlockingUfsForwarder.java","tnLine":246,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.ManagedBlockingUfsForwarder.getFileLocations(java.lang.String,alluxio.underfs.options.FileLocationOptions):java.util.List","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `SocketAddress Channel.remoteAddress()` of un-annotated interface `io.netty.channel.Channel`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/util/CommonUtils.java","tnLine":624,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.util.CommonUtils.unwrapResponseFrom(alluxio.proto.dataserver.Protocol$Response,io.netty.channel.Channel):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `URI URI.createNewPath(String,boolean)` of un-annotated interface `alluxio.uri.URI`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/base/src/main/java/alluxio/AlluxioURI.java","tnLine":124,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.AlluxioURI.<init>(alluxio.AlluxioURI,java.lang.String,boolean)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `UnderFileSystemCommonOperations.mUfs.listStatus(UnderFileSystemCommonOperations.mTopLevelTestDirectory)` could be null and is dereferenced at line 755.","tnFile":"examples/src/main/java/alluxio/examples/UnderFileSystemCommonOperations.java","tnLine":755,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.examples.UnderFileSystemCommonOperations.mkdirsTest():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `UserState UserStateFactory.create(Subject,AlluxioConfiguration,boolean)` of un-annotated interface `alluxio.security.user.UserStateFactory`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/job/command/ListCommand.java","tnLine":45,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.job.command.ListCommand.<init>(alluxio.client.file.FileSystemContext)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void UIFileInfo.addBlock(String,long,long,long)` mutates container `blocksOnTier` via call to `add` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/common/src/main/java/alluxio/util/webui/UIFileInfo.java","tnLine":195,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.util.webui.UIFileInfo.addBlock(java.lang.String,long,long,long):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `boolean ForkJoinPool.isQuiescent()` reads without synchronization from `this.workQueues`. Potentially races with write in method `ForkJoinPool.registerWorker(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"core/common/src/main/java/alluxio/concurrent/jsr/ForkJoinPool.java","tnLine":2038,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.jsr.ForkJoinPool.isQuiescent():boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"RESOURCE_LEAK","tnDesc":"resource of type `org.rocksdb.DBOptions` acquired by call to `new()` at line 89 is not released after line 91.","tnFile":"core/server/master/src/main/java/alluxio/master/metastore/rocks/RocksInodeStore.java","tnLine":91,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.metastore.rocks.RocksInodeStore.<init>(java.lang.String)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `CopyFromLocalCommand.<init>(FileSystemContext)` indirectly reads without synchronization from container `conf.PropertyKey.DEFAULT_ALIAS_MAP` via call to `get`. Potentially races with write in method `CopyFromLocalCommand(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"shell/src/main/java/alluxio/cli/fs/command/CopyFromLocalCommand.java","tnLine":52,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.CopyFromLocalCommand.<init>(alluxio.client.file.FileSystemContext)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.error(String)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"underfs/web/src/main/java/alluxio/underfs/web/WebUnderFileSystem.java","tnLine":116,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.web.WebUnderFileSystem.getDirectoryStatus(java.lang.String):alluxio.underfs.UfsDirectoryStatus","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object BaseFileSystem$RpcCallable.call(Object)` of un-annotated interface `alluxio.client.file.BaseFileSystem$RpcCallable`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/client/fs/src/main/java/alluxio/client/file/BaseFileSystem.java","tnLine":392,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.client.file.BaseFileSystem.persist(alluxio.AlluxioURI,alluxio.grpc.ScheduleAsyncPersistencePOptions):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object BaseFileSystem$RpcCallable.call(Object)` of un-annotated interface `alluxio.client.file.BaseFileSystem$RpcCallable`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/client/fs/src/main/java/alluxio/client/file/BaseFileSystem.java","tnLine":222,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.client.file.BaseFileSystem.exists(alluxio.AlluxioURI):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `int ForkJoinPool.externalHelpComplete(CountedCompleter,int)` reads without synchronization from `this.workQueues`. Potentially races with write in method `ForkJoinPool.registerWorker(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"core/common/src/main/java/alluxio/concurrent/jsr/ForkJoinPool.java","tnLine":1720,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.jsr.ForkJoinPool.externalHelpComplete(alluxio.concurrent.jsr.CountedCompleter,int):int","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `boolean ForkJoinPool$ManagedBlocker.block()` of un-annotated interface `alluxio.concurrent.jsr.ForkJoinPool$ManagedBlocker`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.underfs.UnderFileSystem` is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/concurrent/ManagedBlockingUfsForwarder.java","tnLine":376,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.ManagedBlockingUfsForwarder.listStatus(java.lang.String,alluxio.underfs.options.ListOptions):alluxio.underfs.UfsStatus[]","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `long InodeView.getCreationTimeMs()` of un-annotated interface `alluxio.master.file.meta.InodeView`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/server/master/src/main/java/alluxio/master/file/meta/TtlBucketList.java","tnLine":107,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.file.meta.TtlBucketList.insert(alluxio.master.file.meta.Inode):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `boolean SafeModeManager.isInSafeMode()` of un-annotated interface `alluxio.master.SafeModeManager`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/server/master/src/main/java/alluxio/master/file/replication/ReplicationChecker.java","tnLine":126,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.file.replication.ReplicationChecker.heartbeat():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"RESOURCE_LEAK","tnDesc":"resource of type `alluxio.master.file.FileSystemMasterAuditContext` acquired to `auditContext` by call to `new()` at line 4480 is not released after line 4500.\n**Note**: potential exception at line 4483","tnFile":"core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java","tnLine":4500,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.file.DefaultFileSystemMaster.createAuditContext(java.lang.String,alluxio.AlluxioURI,alluxio.AlluxioURI,alluxio.master.file.meta.Inode):alluxio.master.file.FileSystemMasterAuditContext","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `Object AbstractClient.retryRPC(AbstractClient$RpcCallable,String)` indirectly reads with synchronization from `this.mServiceVersion`. Potentially races with unsynchronized write in method `AbstractClient.checkVersion(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/common/src/main/java/alluxio/AbstractClient.java","tnLine":349,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.AbstractClient.retryRPC(alluxio.AbstractClient$RpcCallable,java.lang.String):java.lang.Object","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String URI.getPath()` of un-annotated interface `alluxio.uri.URI`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"underfs/local/src/main/java/alluxio/underfs/local/LocalUnderFileSystem.java","tnLine":245,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.local.LocalUnderFileSystem.getStatus(java.lang.String):alluxio.underfs.UfsStatus","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object BaseFileSystem$RpcCallable.call(Object)` of un-annotated interface `alluxio.client.file.BaseFileSystem$RpcCallable`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/client/fs/src/main/java/alluxio/client/file/BaseFileSystem.java","tnLine":412,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.client.file.BaseFileSystem.openFile(alluxio.AlluxioURI,alluxio.grpc.OpenFilePOptions):alluxio.client.file.FileInStream","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void AsyncJournalWriter.close()` indirectly writes to field `this.mFlushThread` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/server/common/src/main/java/alluxio/master/journal/AsyncJournalWriter.java","tnLine":209,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.journal.AsyncJournalWriter.close():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `long AlluxioConfiguration.getMs(PropertyKey)` of un-annotated interface `alluxio.conf.AlluxioConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/client/fs/src/main/java/alluxio/client/file/BaseFileSystem.java","tnLine":103,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.client.file.BaseFileSystem.create(alluxio.client.file.FileSystemContext):alluxio.client.file.BaseFileSystem","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void UfsJournalGarbageCollector.close()` reads without synchronization from `this.mGc`. Potentially races with write in method `UfsJournalGarbageCollector.close()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/server/common/src/main/java/alluxio/master/journal/ufs/UfsJournalGarbageCollector.java","tnLine":65,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.journal.ufs.UfsJournalGarbageCollector.close():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object `ufsclient` last assigned on line 74 could be null and is dereferenced at line 75.","tnFile":"core/server/master/src/main/java/alluxio/master/file/activesync/ActiveSyncer.java","tnLine":75,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.file.activesync.ActiveSyncer.heartbeat():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void DynamicResourcePool.release(Object)` indirectly writes to field `resourceInternal.mLastAccessTimeMs` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/common/src/main/java/alluxio/resource/DynamicResourcePool.java","tnLine":373,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.resource.DynamicResourcePool.release(java.lang.Object):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `List ForkJoinPool.invokeAll(Collection)` indirectly reads without synchronization from `ws.[_]`. Potentially races with write in method `ForkJoinPool.externalPush(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"core/common/src/main/java/alluxio/concurrent/jsr/ForkJoinPool.java","tnLine":1923,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.jsr.ForkJoinPool.invokeAll(java.util.Collection):java.util.List","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"RESOURCE_LEAK","tnDesc":"resource of type `org.rocksdb.WriteOptions` acquired by call to `new()` at line 69 is not released after line 69.","tnFile":"core/server/master/src/main/java/alluxio/master/metastore/rocks/RocksBlockStore.java","tnLine":69,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.metastore.rocks.RocksBlockStore.<init>(java.lang.String)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `__new(alluxio.concurrent.ManagedBlockingUfsForwarder$20).get()` could be null and is dereferenced at line 291.","tnFile":"core/common/src/main/java/alluxio/concurrent/ManagedBlockingUfsForwarder.java","tnLine":291,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.ManagedBlockingUfsForwarder.getSpace(java.lang.String,alluxio.underfs.UnderFileSystem$SpaceType):long","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `createDirectoryContext.getOptions()` could be null and is dereferenced at line 2523.","tnFile":"core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java","tnLine":2523,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.file.DefaultFileSystemMaster.loadDirectoryMetadata(alluxio.master.file.RpcContext,alluxio.master.file.meta.LockedInodePath,alluxio.master.file.contexts.LoadMetadataContext):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `URI URI.createNewPath(String,boolean)` of un-annotated interface `alluxio.uri.URI`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/underfs/BaseUnderFileSystem.java","tnLine":189,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.BaseUnderFileSystem.resolveUri(alluxio.AlluxioURI,java.lang.String):alluxio.AlluxioURI","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.error(String)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/server/worker/src/main/java/alluxio/worker/block/BlockMetricsReporter.java","tnLine":40,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.worker.block.BlockMetricsReporter.<init>()","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Authority URI.getAuthority()` of un-annotated interface `alluxio.uri.URI`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/base/src/main/java/alluxio/AlluxioURI.java","tnLine":113,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.AlluxioURI.<init>(alluxio.AlluxioURI,alluxio.AlluxioURI)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `UserState UserStateFactory.create(Subject,AlluxioConfiguration,boolean)` of un-annotated interface `alluxio.security.user.UserStateFactory`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/server/worker/src/main/java/alluxio/underfs/WorkerUfsManager.java","tnLine":46,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.WorkerUfsManager.<init>()","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `UserState UserStateFactory.create(Subject,AlluxioConfiguration,boolean)` of un-annotated interface `alluxio.security.user.UserStateFactory`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/LoadCommand.java","tnLine":53,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.LoadCommand.<init>(alluxio.client.file.FileSystemContext)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"RESOURCE_LEAK","tnDesc":"resource of type `java.io.FileOutputStream` acquired by call to `FileOutputStream(...)` at line 116 is not released after line 116.","tnFile":"core/server/common/src/main/java/alluxio/master/journal/tool/AbstractJournalDumper.java","tnLine":116,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.journal.tool.AbstractJournalDumper.readRegularCheckpoint(alluxio.master.journal.checkpoint.CheckpointInputStream,java.nio.file.Path):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `createFileContext.getOptions()` could be null and is dereferenced at line 2460.","tnFile":"core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java","tnLine":2460,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.file.DefaultFileSystemMaster.loadFileMetadataInternal(alluxio.master.file.RpcContext,alluxio.master.file.meta.LockedInodePath,alluxio.master.file.meta.MountTable$Resolution,alluxio.master.file.contexts.LoadMetadataContext):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void CpCommand.validateArgs(CommandLine)` writes to field `this.mCopyFromLocalBufferSize` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"shell/src/main/java/alluxio/cli/fs/command/CpCommand.java","tnLine":313,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.CpCommand.validateArgs(org.apache.commons.cli.CommandLine):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `ForkJoinTask ForkJoinPool.submit(Callable)` indirectly reads without synchronization from `ws.[_]`. Potentially races with write in method `ForkJoinPool.externalPush(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"core/common/src/main/java/alluxio/concurrent/jsr/ForkJoinPool.java","tnLine":1886,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.jsr.ForkJoinPool.submit(java.util.concurrent.Callable):alluxio.concurrent.jsr.ForkJoinTask","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"RESOURCE_LEAK","tnDesc":"resource of type `alluxio.master.journal.checkpoint.CheckpointInputStream` acquired by call to `CheckpointInputStream(...)` at line 84 is not released after line 85.","tnFile":"core/server/common/src/main/java/alluxio/master/journal/checkpoint/CompoundCheckpointFormat.java","tnLine":85,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.journal.checkpoint.CompoundCheckpointFormat$CompoundCheckpointReader.nextCheckpoint():java.util.Optional","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.error(String)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"underfs/oss/src/main/java/alluxio/underfs/oss/OSSUnderFileSystem.java","tnLine":286,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.oss.OSSUnderFileSystem.openObject(java.lang.String,alluxio.underfs.options.OpenOptions,alluxio.retry.RetryPolicy):java.io.InputStream","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object UnderFileSystemWithLogging$UfsCallable.call()` of un-annotated interface `alluxio.underfs.UnderFileSystemWithLogging$UfsCallable`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.underfs.UnderFileSystem` is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/underfs/UnderFileSystemWithLogging.java","tnLine":283,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.UnderFileSystemWithLogging.deleteExistingFile(java.lang.String):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object `ufs` last assigned on line 1173 could be null and is dereferenced at line 1175.","tnFile":"core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java","tnLine":1175,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.file.DefaultFileSystemMaster.completeFileInternal(alluxio.master.file.RpcContext,alluxio.master.file.meta.LockedInodePath,alluxio.master.file.contexts.CompleteFileContext):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.error(String,Object)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/underfs/ObjectUnderFileSystem.java","tnLine":406,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.ObjectUnderFileSystem.deleteDirectory(java.lang.String,alluxio.underfs.options.DeleteOptions):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Enum AlluxioConfiguration.getEnum(PropertyKey,Class)` of un-annotated interface `alluxio.conf.AlluxioConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/security/authentication/AuthenticatedClientUser.java","tnLine":157,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.security.authentication.AuthenticatedClientUser.getAuthMethod(alluxio.conf.AlluxioConfiguration):java.lang.String","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String AlluxioConfiguration.get(PropertyKey)` of un-annotated interface `alluxio.conf.AlluxioConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"underfs/local/src/main/java/alluxio/underfs/local/LocalUnderFileSystem.java","tnLine":197,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.local.LocalUnderFileSystem.getFileLocations(java.lang.String):java.util.List","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String URI.getPath()` of un-annotated interface `alluxio.uri.URI`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"underfs/local/src/main/java/alluxio/underfs/local/LocalUnderFileSystem.java","tnLine":361,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.local.LocalUnderFileSystem.open(java.lang.String,alluxio.underfs.options.OpenOptions):java.io.InputStream","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String AlluxioConfiguration.get(PropertyKey)` of un-annotated interface `alluxio.conf.AlluxioConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/util/network/NetworkAddressUtils.java","tnLine":361,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.util.network.NetworkAddressUtils.getClientHostName(alluxio.conf.AlluxioConfiguration):java.lang.String","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `UnderFileSystemCommonOperations.mUfs.listStatus(root,defaults().setRecursive(1))` could be null and is dereferenced at line 919.","tnFile":"examples/src/main/java/alluxio/examples/UnderFileSystemCommonOperations.java","tnLine":919,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.examples.UnderFileSystemCommonOperations.objectNestedDirsListStatusRecursiveTest():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void ServerConfiguration.unset(PropertyKey)` reads without synchronization from `conf.ServerConfiguration.sConf`. Potentially races with write in method `ServerConfiguration.loadClusterDefaultsIfNotLoaded(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"core/server/common/src/main/java/alluxio/conf/ServerConfiguration.java","tnLine":122,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.conf.ServerConfiguration.unset(alluxio.conf.PropertyKey):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `Future ForkJoinPool.submit(Runnable,Object)` indirectly reads without synchronization from `ws.[_]`. Potentially races with write in method `ForkJoinPool.externalPush(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"core/common/src/main/java/alluxio/concurrent/jsr/ForkJoinPool.java","tnLine":142,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.jsr.ForkJoinPool.submit(java.lang.Runnable,java.lang.Object):java.util.concurrent.Future","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void FileSystem.setAcl(AlluxioURI,SetAclAction,List,SetAclPOptions)` of un-annotated interface `alluxio.client.file.FileSystem`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/SetFaclCommand.java","tnLine":167,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.SetFaclCommand.runPlainPath(alluxio.AlluxioURI,org.apache.commons.cli.CommandLine):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `Class ServerConfiguration.getClass(PropertyKey)` reads without synchronization from `conf.ServerConfiguration.sConf`. Potentially races with write in method `ServerConfiguration.loadClusterDefaultsIfNotLoaded(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"core/server/common/src/main/java/alluxio/conf/ServerConfiguration.java","tnLine":296,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.conf.ServerConfiguration.getClass(alluxio.conf.PropertyKey):java.lang.Class","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `boolean AlluxioConfiguration.getBoolean(PropertyKey)` of un-annotated interface `alluxio.conf.AlluxioConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/util/SecurityUtils.java","tnLine":45,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.util.SecurityUtils.isSecurityEnabled(alluxio.conf.AlluxioConfiguration):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void FileSystem.updateMount(AlluxioURI,MountPOptions)` of un-annotated interface `alluxio.client.file.FileSystem`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/UpdateMountCommand.java","tnLine":96,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.UpdateMountCommand.run(org.apache.commons.cli.CommandLine):int","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"RESOURCE_LEAK","tnDesc":"resource of type `java.io.FileWriter` acquired to `fileWriter` by call to `new()` at line 70 is not released after line 114.\n**Note**: potential exception at line 72","tnFile":"shell/src/main/java/alluxio/cli/ConfigurationDocGenerator.java","tnLine":114,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.ConfigurationDocGenerator.writeCSVFile(java.util.Collection,java.lang.String):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object UnderFileSystemWithLogging$UfsCallable.call()` of un-annotated interface `alluxio.underfs.UnderFileSystemWithLogging$UfsCallable`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.underfs.UnderFileSystem` is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/underfs/UnderFileSystemWithLogging.java","tnLine":129,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.UnderFileSystemWithLogging.connectFromWorker(java.lang.String):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"UNSAFE_GUARDED_BY_ACCESS","tnDesc":"The field `alluxio.worker.block.UfsInputStreamManager.mUnderFileInputStreamCache` is annotated with `@GuardedBy(\"mFileToInputStreamIds\")`, but the lock `mFileToInputStreamIds` is not held during the access to the field at line 227. Since the current method is non-private, it can be called from outside the current class without synchronization. Consider wrapping the access in a `synchronized(mFileToInputStreamIds)` block or making the method private.","tnFile":"core/server/worker/src/main/java/alluxio/worker/block/UfsInputStreamManager.java","tnLine":227,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.worker.block.UfsInputStreamManager.acquire(alluxio.underfs.UnderFileSystem,java.lang.String,long,alluxio.underfs.options.OpenOptions,boolean):java.io.InputStream","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `PrefixPathConfiguration.<init>(Map)` indirectly writes to field `current.mIsTerminal` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/common/src/main/java/alluxio/conf/path/PrefixPathConfiguration.java","tnLine":61,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.conf.path.PrefixPathConfiguration.<init>(java.util.Map)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String AlluxioConfiguration.get(PropertyKey)` of un-annotated interface `alluxio.conf.AlluxioConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/underfs/BaseUnderFileSystem.java","tnLine":184,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.BaseUnderFileSystem.mkdirs(java.lang.String):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `boolean ForkJoinPool$ManagedBlocker.block()` of un-annotated interface `alluxio.concurrent.jsr.ForkJoinPool$ManagedBlocker`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.underfs.UnderFileSystem` is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/concurrent/ManagedBlockingUfsForwarder.java","tnLine":184,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.ManagedBlockingUfsForwarder.exists(java.lang.String):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object UnderFileSystemWithLogging$UfsCallable.call()` of un-annotated interface `alluxio.underfs.UnderFileSystemWithLogging$UfsCallable`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.underfs.UnderFileSystem` is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/underfs/UnderFileSystemWithLogging.java","tnLine":329,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.UnderFileSystemWithLogging.getBlockSizeByte(java.lang.String):long","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"RESOURCE_LEAK","tnDesc":"resource of type `alluxio.master.journal.checkpoint.CheckpointOutputStream` acquired by call to `new()` at line 79 is not released after line 84.","tnFile":"core/server/common/src/main/java/alluxio/master/journal/JournalUtils.java","tnLine":84,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.journal.JournalUtils.writeJournalEntryCheckpoint(java.io.OutputStream,alluxio.master.journal.JournalEntryIterable):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `boolean ForkJoinPool$ManagedBlocker.block()` of un-annotated interface `alluxio.concurrent.jsr.ForkJoinPool$ManagedBlocker`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.underfs.UnderFileSystem` is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/concurrent/ManagedBlockingUfsForwarder.java","tnLine":144,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.ManagedBlockingUfsForwarder.deleteExistingDirectory(java.lang.String):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void ChownCommand.runPlainPath(AlluxioURI,CommandLine)` reads without synchronization from `this.mOwner`. Potentially races with write in method `ChownCommand.run(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"shell/src/main/java/alluxio/cli/fs/command/ChownCommand.java","tnLine":59,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.ChownCommand.runPlainPath(alluxio.AlluxioURI,org.apache.commons.cli.CommandLine):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void ReadRequestContext.setCounter(Counter)` writes to field `this.mCounter` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/server/worker/src/main/java/alluxio/worker/grpc/ReadRequestContext.java","tnLine":231,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.worker.grpc.ReadRequestContext.setCounter(com.codahale.metrics.Counter):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Optional PathConfiguration.getConfiguration(AlluxioURI,PropertyKey)` of un-annotated interface `alluxio.conf.path.PathConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/conf/path/SpecificPathConfiguration.java","tnLine":83,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.conf.path.SpecificPathConfiguration.isSet(alluxio.conf.PropertyKey):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"RESOURCE_LEAK","tnDesc":"resource of type `org.rocksdb.ReadOptions` acquired by call to `new()` at line 79 is not released after line 79.","tnFile":"core/server/master/src/main/java/alluxio/master/metastore/rocks/RocksInodeStore.java","tnLine":79,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.metastore.rocks.RocksInodeStore.<init>(java.lang.String)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String Command.getCommandName()` of un-annotated interface `alluxio.cli.Command`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/PinCommand.java","tnLine":97,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.PinCommand.validateArgs(org.apache.commons.cli.CommandLine):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"RESOURCE_LEAK","tnDesc":"resource of type `org.apache.commons.compress.archivers.tar.TarArchiveOutputStream` acquired by call to `new()` at line 45 is not released after line 48.","tnFile":"core/server/common/src/main/java/alluxio/util/TarUtils.java","tnLine":48,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.util.TarUtils.writeTarGz(java.nio.file.Path,alluxio.master.journal.checkpoint.CheckpointOutputStream):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.info(String)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/ConfigurationDocGenerator.java","tnLine":216,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.ConfigurationDocGenerator.main(java.lang.String[]):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.error(String,Object)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"integration/fuse/src/main/java/alluxio/fuse/AlluxioFuseFileSystem.java","tnLine":641,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.fuse.AlluxioFuseFileSystem.truncate(java.lang.String,long):int","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `Error ReadRequestContext.getError()` reads without synchronization from `this.mError`. Potentially races with write in method `ReadRequestContext.setError(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/server/worker/src/main/java/alluxio/worker/grpc/ReadRequestContext.java","tnLine":146,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.worker.grpc.ReadRequestContext.getError():alluxio.worker.grpc.Error","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `long InodeDirectoryView.getId()` of un-annotated interface `alluxio.master.file.meta.InodeDirectoryView`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/server/master/src/main/java/alluxio/master/metastore/heap/HeapInodeStore.java","tnLine":106,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.metastore.heap.HeapInodeStore.hasChildren(alluxio.master.file.meta.InodeDirectoryView,alluxio.master.metastore.ReadOption):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.debug(String,Object)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/server/common/src/main/java/alluxio/cli/extensions/command/UninstallCommand.java","tnLine":72,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.extensions.command.UninstallCommand.run(org.apache.commons.cli.CommandLine):int","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.error(String)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/underfs/ObjectUnderFileSystem.java","tnLine":484,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.ObjectUnderFileSystem.getBlockSizeByte(java.lang.String):long","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void UIFileInfo.setFileLocations(List)` mutates container `this.mFileLocations` via call to `clear` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/common/src/main/java/alluxio/util/webui/UIFileInfo.java","tnLine":362,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.util.webui.UIFileInfo.setFileLocations(java.util.List):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void ForkJoinTask.quietlyInvoke()` indirectly writes to field `w.top` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"core/common/src/main/java/alluxio/concurrent/jsr/ForkJoinTask.java","tnLine":1123,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.jsr.ForkJoinTask.quietlyInvoke():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `BlockMaster BlockMasterFactory.create(MasterRegistry,CoreMasterContext)` indirectly reads without synchronization from container `registry.mRegistry` via call to `get`. Potentially races with write in method `BlockMasterFactory.create(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/server/master/src/main/java/alluxio/master/block/BlockMasterFactory.java","tnLine":50,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.block.BlockMasterFactory.create(alluxio.master.MasterRegistry,alluxio.master.CoreMasterContext):alluxio.master.block.BlockMaster","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `boolean ForkJoinPool$ManagedBlocker.block()` of un-annotated interface `alluxio.concurrent.jsr.ForkJoinPool$ManagedBlocker`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.underfs.UnderFileSystem` is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/concurrent/ManagedBlockingUfsForwarder.java","tnLine":205,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.ManagedBlockingUfsForwarder.getBlockSizeByte(java.lang.String):long","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `java.lang.String[] ObjectUnderFileSystem$ObjectListingChunk.getCommonPrefixes()` of un-annotated interface `alluxio.underfs.ObjectUnderFileSystem$ObjectListingChunk`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/underfs/ObjectUnderFileSystem.java","tnLine":605,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.ObjectUnderFileSystem.listStatus(java.lang.String,alluxio.underfs.options.ListOptions):alluxio.underfs.UfsStatus[]","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void RetryHandlingMetaMasterConfigClient.afterConnect()` reads without synchronization from `this.mChannel`. Potentially races with write in method `RetryHandlingMetaMasterConfigClient.setPathConfiguration(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/client/fs/src/main/java/alluxio/client/meta/RetryHandlingMetaMasterConfigClient.java","tnLine":71,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.client.meta.RetryHandlingMetaMasterConfigClient.afterConnect():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"RESOURCE_LEAK","tnDesc":"resource of type `alluxio.fuse.OpenFileEntry` acquired by call to `new()` at line 445 is not released after line 445.","tnFile":"integration/fuse/src/main/java/alluxio/fuse/AlluxioFuseFileSystem.java","tnLine":445,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.fuse.AlluxioFuseFileSystem.open(java.lang.String,ru.serce.jnrfuse.struct.FuseFileInfo):int","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void JobMaster.start(Boolean)` reads without synchronization from container `this.mIdToJobCoordinator` via call to `values`. Potentially races with write in method `JobMaster.run(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"job/server/src/main/java/alluxio/master/job/JobMaster.java","tnLine":169,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.job.JobMaster.start(java.lang.Boolean):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void WriteRequestContext.setError(Error)` writes to field `this.mError` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/server/worker/src/main/java/alluxio/worker/grpc/WriteRequestContext.java","tnLine":113,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.worker.grpc.WriteRequestContext.setError(alluxio.worker.grpc.Error):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `UserState UserStateFactory.create(Subject,AlluxioConfiguration,boolean)` of un-annotated interface `alluxio.security.user.UserStateFactory`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/TouchCommand.java","tnLine":36,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.TouchCommand.<init>(alluxio.client.file.FileSystemContext)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `UserState UserStateFactory.create(Subject,AlluxioConfiguration,boolean)` of un-annotated interface `alluxio.security.user.UserStateFactory`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/ChownCommand.java","tnLine":52,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.ChownCommand.<init>(alluxio.client.file.FileSystemContext)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.error(String)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/server/common/src/main/java/alluxio/master/journal/ufs/UfsJournalGarbageCollector.java","tnLine":59,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.journal.ufs.UfsJournalGarbageCollector.<init>(alluxio.master.journal.ufs.UfsJournal)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String Command.getCommandName()` of un-annotated interface `alluxio.cli.Command`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/SetFaclCommand.java","tnLine":191,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.SetFaclCommand.validateArgs(org.apache.commons.cli.CommandLine):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void ForkJoinPool.runWorker(ForkJoinPool$WorkQueue)` indirectly reads without synchronization from `this.workQueues`. Potentially races with write in method `ForkJoinPool.registerWorker(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"core/common/src/main/java/alluxio/concurrent/jsr/ForkJoinPool.java","tnLine":1400,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.jsr.ForkJoinPool.runWorker(alluxio.concurrent.jsr.ForkJoinPool$WorkQueue):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `long ServerConfiguration.getBytes(PropertyKey)` reads without synchronization from `conf.ServerConfiguration.sConf`. Potentially races with write in method `ServerConfiguration.loadClusterDefaultsIfNotLoaded(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"core/server/common/src/main/java/alluxio/conf/ServerConfiguration.java","tnLine":265,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.conf.ServerConfiguration.getBytes(alluxio.conf.PropertyKey):long","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"UNSAFE_GUARDED_BY_ACCESS","tnDesc":"The field `alluxio.util.ConfigurationUtils.sDefaultProperties` is annotated with `@GuardedBy(\"DEFAULT_PROPERTIES_LOCK\")`, but the lock `DEFAULT_PROPERTIES_LOCK` is not held during the access to the field at line 399. Since the current method is non-private, it can be called from outside the current class without synchronization. Consider wrapping the access in a `synchronized(DEFAULT_PROPERTIES_LOCK)` block or making the method private.","tnFile":"core/common/src/main/java/alluxio/util/ConfigurationUtils.java","tnLine":399,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.util.ConfigurationUtils.defaults():alluxio.conf.AlluxioProperties","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"RESOURCE_LEAK","tnDesc":"resource of type `alluxio.master.journal.JournalEntryStreamReader` acquired by call to `new()` at line 107 is not released after line 117.","tnFile":"core/server/common/src/main/java/alluxio/master/journal/JournalUtils.java","tnLine":117,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.journal.JournalUtils.restoreJournalEntryCheckpoint(alluxio.master.journal.checkpoint.CheckpointInputStream,alluxio.master.journal.Journaled):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object `ufs` last assigned on line 1364 could be null and is dereferenced at line 1365.","tnFile":"core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java","tnLine":1365,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.file.DefaultFileSystemMaster.getDisplayMountPointInfo(alluxio.master.file.meta.options.MountInfo):alluxio.wire.MountPointInfo","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void JournalCrashTest$ClientThread.run()` reads without synchronization from `this.mSuccessNum`. Potentially races with write in method `JournalCrashTest$ClientThread.run()`.\n Reporting because this access may occur on a background thread.","tnFile":"examples/src/main/java/alluxio/cli/JournalCrashTest.java","tnLine":126,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.JournalCrashTest$ClientThread.run():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object FieldIndex.getFirst(Object)` of un-annotated interface `alluxio.collections.FieldIndex`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/base/src/main/java/alluxio/collections/IndexedSet.java","tnLine":281,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.collections.IndexedSet.getFirstByField(alluxio.collections.IndexDefinition,java.lang.Object):java.lang.Object","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"RESOURCE_LEAK","tnDesc":"resource of type `alluxio.master.journal.checkpoint.CheckpointOutputStream` acquired by call to `new()` at line 176 is not released after line 182.","tnFile":"core/server/master/src/main/java/alluxio/master/file/meta/TtlBucketList.java","tnLine":182,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.file.meta.TtlBucketList.writeToCheckpoint(java.io.OutputStream):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void BlockMasterClient.afterConnect()` reads without synchronization from `this.mChannel`. Potentially races with write in method `BlockMasterClient.commitBlockInUfs(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/server/worker/src/main/java/alluxio/worker/block/BlockMasterClient.java","tnLine":78,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.worker.block.BlockMasterClient.afterConnect():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.error(String)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"underfs/web/src/main/java/alluxio/underfs/web/WebUnderFileSystemFactory.java","tnLine":38,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.web.WebUnderFileSystemFactory.create(java.lang.String,alluxio.underfs.UnderFileSystemConfiguration):alluxio.underfs.UnderFileSystem","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String URI.getPath()` of un-annotated interface `alluxio.uri.URI`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/base/src/main/java/alluxio/AlluxioURI.java","tnLine":172,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.AlluxioURI.getDepth():int","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `UserState UserStateFactory.create(Subject,AlluxioConfiguration,boolean)` of un-annotated interface `alluxio.security.user.UserStateFactory`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/MasterInfoCommand.java","tnLine":38,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.MasterInfoCommand.<init>(alluxio.client.file.FileSystemContext)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object `openUfsBlockOptions` last assigned on line 169 could be null and is dereferenced at line 171.","tnFile":"core/server/worker/src/main/java/alluxio/worker/grpc/BlockReadHandler.java","tnLine":171,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.worker.grpc.BlockReadHandler$BlockDataReader.openBlock(alluxio.worker.grpc.BlockReadRequestContext,io.grpc.stub.StreamObserver):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.error(String,Object)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/underfs/ObjectUnderFileSystem.java","tnLine":697,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.ObjectUnderFileSystem.renameDirectory(java.lang.String,java.lang.String):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String AlluxioConfiguration.get(PropertyKey)` of un-annotated interface `alluxio.conf.AlluxioConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/util/CommonUtils.java","tnLine":139,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.util.CommonUtils.getWorkerDataDirectory(java.lang.String,alluxio.conf.AlluxioConfiguration):java.lang.String","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `long InodeView.getId()` of un-annotated interface `alluxio.master.file.meta.InodeView`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/server/master/src/main/java/alluxio/master/file/meta/TtlBucket.java","tnLine":104,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.file.meta.TtlBucket.removeInode(alluxio.master.file.meta.InodeView):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `int SetTtlCommand.run(CommandLine)` writes to field `this.mTtlMs` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"shell/src/main/java/alluxio/cli/fs/command/SetTtlCommand.java","tnLine":94,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.SetTtlCommand.run(org.apache.commons.cli.CommandLine):int","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void ExtensionFactoryRegistry.unregister(ExtensionFactory)` indirectly mutates container `this.mFactories` via call to `remove` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"core/common/src/main/java/alluxio/extensions/ExtensionFactoryRegistry.java","tnLine":262,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.extensions.ExtensionFactoryRegistry.unregister(alluxio.extensions.ExtensionFactory):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Enum AlluxioConfiguration.getEnum(PropertyKey,Class)` of un-annotated interface `alluxio.conf.AlluxioConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/security/authentication/AuthenticatedClientUser.java","tnLine":97,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.security.authentication.AuthenticatedClientUser.get(alluxio.conf.AlluxioConfiguration):alluxio.security.User","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object BaseFileSystem$RpcCallable.call(Object)` of un-annotated interface `alluxio.client.file.BaseFileSystem$RpcCallable`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/client/fs/src/main/java/alluxio/client/file/BaseFileSystem.java","tnLine":457,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.client.file.BaseFileSystem.setAcl(alluxio.AlluxioURI,alluxio.grpc.SetAclAction,java.util.List,alluxio.grpc.SetAclPOptions):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `ctx.getClusterConf()` could be null and is dereferenced by call to `create(...)` at line 167.","tnFile":"core/client/fs/src/main/java/alluxio/client/file/FileSystemContext.java","tnLine":167,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.client.file.FileSystemContext.create(javax.security.auth.Subject,alluxio.conf.AlluxioConfiguration):alluxio.client.file.FileSystemContext","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object BaseFileSystem$RpcCallable.call(Object)` of un-annotated interface `alluxio.client.file.BaseFileSystem$RpcCallable`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/client/fs/src/main/java/alluxio/client/file/BaseFileSystem.java","tnLine":331,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.client.file.BaseFileSystem.listStatus(alluxio.AlluxioURI,alluxio.grpc.ListStatusPOptions):java.util.List","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object UnderFileSystemWithLogging$UfsCallable.call()` of un-annotated interface `alluxio.underfs.UnderFileSystemWithLogging$UfsCallable`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.underfs.UnderFileSystem` is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/underfs/UnderFileSystemWithLogging.java","tnLine":175,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.UnderFileSystemWithLogging.createNonexistingFile(java.lang.String):java.io.OutputStream","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Authority URI.getAuthority()` of un-annotated interface `alluxio.uri.URI`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/base/src/main/java/alluxio/AlluxioURI.java","tnLine":456,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.AlluxioURI.isAncestorOf(alluxio.AlluxioURI):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `UserState UserStateFactory.create(Subject,AlluxioConfiguration,boolean)` of un-annotated interface `alluxio.security.user.UserStateFactory`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/UnpinCommand.java","tnLine":38,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.UnpinCommand.<init>(alluxio.client.file.FileSystemContext)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void BlockWorkerClient.close()` of un-annotated interface `alluxio.client.block.stream.BlockWorkerClient`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/client/fs/src/main/java/alluxio/client/file/FileSystemContext.java","tnLine":501,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.client.file.FileSystemContext.releaseBlockWorkerClient(alluxio.wire.WorkerNetAddress,alluxio.client.block.stream.BlockWorkerClient):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `ExecutorService ExecutorServiceFactory.create()` of un-annotated interface `alluxio.util.executor.ExecutorServiceFactory`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/underfs/ObjectUnderFileSystem.java","tnLine":94,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.ObjectUnderFileSystem.<init>(alluxio.AlluxioURI,alluxio.underfs.UnderFileSystemConfiguration)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"UNSAFE_GUARDED_BY_ACCESS","tnDesc":"The field `alluxio.metrics.MetricsSystem.sSinks` is annotated with `@GuardedBy(\"MetricsSystem\")`, but the lock `MetricsSystem` is not held during the access to the field at line 154. Since the current method is non-private, it can be called from outside the current class without synchronization. Consider wrapping the access in a `synchronized(MetricsSystem)` block or making the method private.","tnFile":"core/common/src/main/java/alluxio/metrics/MetricsSystem.java","tnLine":154,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.metrics.MetricsSystem.startSinksFromConfig(alluxio.metrics.MetricsConfig):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `boolean GrpcChannel.isShutdown()` reads without synchronization from `this.mChannelReleased`. Potentially races with write in method `GrpcChannel.shutdown()`.\n Reporting because a superclass `class io.grpc.Channel` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/common/src/main/java/alluxio/grpc/GrpcChannel.java","tnLine":113,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.grpc.GrpcChannel.isShutdown():boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `String ServerConfiguration.hash()` reads without synchronization from `conf.ServerConfiguration.sConf`. Potentially races with write in method `ServerConfiguration.loadClusterDefaultsIfNotLoaded(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"core/server/common/src/main/java/alluxio/conf/ServerConfiguration.java","tnLine":363,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.conf.ServerConfiguration.hash():java.lang.String","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `int CpCommand.run(CommandLine)` indirectly reads with synchronization from `this.mCopyToLocalBufferSize`. Potentially races with unsynchronized write in method `CpCommand.validateArgs(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"shell/src/main/java/alluxio/cli/fs/command/CpCommand.java","tnLine":402,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.CpCommand.run(org.apache.commons.cli.CommandLine):int","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `URI URI.createNewPath(String,boolean)` of un-annotated interface `alluxio.uri.URI`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/FileSystemShellUtils.java","tnLine":116,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.FileSystemShellUtils.getAlluxioURIs(alluxio.client.file.FileSystem,alluxio.AlluxioURI):java.util.List","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `boolean ForkJoinPool$ManagedBlocker.block()` of un-annotated interface `alluxio.concurrent.jsr.ForkJoinPool$ManagedBlocker`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.underfs.UnderFileSystem` is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/concurrent/ManagedBlockingUfsForwarder.java","tnLine":235,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.ManagedBlockingUfsForwarder.getFileLocations(java.lang.String):java.util.List","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void AlluxioLogServerProcess.start()` reads without synchronization from `this.mThreadPool`. Potentially races with write in method `AlluxioLogServerProcess.start()`.\n Reporting because this access may occur on a background thread.","tnFile":"logserver/src/main/java/alluxio/logserver/AlluxioLogServerProcess.java","tnLine":113,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.logserver.AlluxioLogServerProcess.start():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `URIStatus FileSystem.getStatus(AlluxioURI)` of un-annotated interface `alluxio.client.file.FileSystem`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/TailCommand.java","tnLine":60,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.TailCommand.runPlainPath(alluxio.AlluxioURI,org.apache.commons.cli.CommandLine):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String Command.getCommandName()` of un-annotated interface `alluxio.cli.Command`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/cli/CommandUtils.java","tnLine":104,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.CommandUtils.checkNumOfArgsNoMoreThan(alluxio.cli.Command,org.apache.commons.cli.CommandLine,int):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object BaseFileSystem$RpcCallable.call(Object)` of un-annotated interface `alluxio.client.file.BaseFileSystem$RpcCallable`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/client/fs/src/main/java/alluxio/client/file/BaseFileSystem.java","tnLine":477,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.client.file.BaseFileSystem.setAttribute(alluxio.AlluxioURI,alluxio.grpc.SetAttributePOptions):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String AlluxioConfiguration.get(PropertyKey)` of un-annotated interface `alluxio.conf.AlluxioConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/server/worker/src/main/java/alluxio/underfs/WorkerUfsManager.java","tnLine":83,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.WorkerUfsManager.connectUfs(alluxio.underfs.UnderFileSystem):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `UserState UserStateFactory.create(Subject,AlluxioConfiguration,boolean)` of un-annotated interface `alluxio.security.user.UserStateFactory`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/MountCommand.java","tnLine":68,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.MountCommand.<init>(alluxio.client.file.FileSystemContext)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `taskInfo.getStatus()` could be null and is dereferenced at line 152.","tnFile":"job/server/src/main/java/alluxio/worker/job/task/TaskExecutorManager.java","tnLine":152,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.worker.job.task.TaskExecutorManager.cancelTask(long,int):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `java.lang.String[] ObjectUnderFileSystem$ObjectListingChunk.getCommonPrefixes()` of un-annotated interface `alluxio.underfs.ObjectUnderFileSystem$ObjectListingChunk`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/underfs/ObjectUnderFileSystem.java","tnLine":940,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.ObjectUnderFileSystem.getObjectListingChunkForPath(java.lang.String,boolean):alluxio.underfs.ObjectUnderFileSystem$ObjectListingChunk","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void WriteRequestContext.setPos(long)` writes to field `this.mPos` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/server/worker/src/main/java/alluxio/worker/grpc/WriteRequestContext.java","tnLine":121,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.worker.grpc.WriteRequestContext.setPos(long):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String Command.getCommandName()` of un-annotated interface `alluxio.cli.Command`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/GetUsedBytesCommand.java","tnLine":47,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.GetUsedBytesCommand.validateArgs(org.apache.commons.cli.CommandLine):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `boolean PropertyKey.isDeprecated(PropertyKey)` indirectly writes to field `conf.PropertyKey.DEPRECATED_CHECKER.mAnnotatedKeys` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/common/src/main/java/alluxio/conf/PropertyKey.java","tnLine":4770,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.conf.PropertyKey.isDeprecated(alluxio.conf.PropertyKey):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `getProperty(\"line.separator\")` could be null and is dereferenced at line 37.","tnFile":"core/server/common/src/main/java/alluxio/cli/validation/Utils.java","tnLine":37,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.validation.Utils.<clinit>():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Optional PathConfiguration.getConfiguration(AlluxioURI,PropertyKey)` of un-annotated interface `alluxio.conf.path.PathConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/conf/path/SpecificPathConfiguration.java","tnLine":128,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.conf.path.SpecificPathConfiguration.getList(alluxio.conf.PropertyKey,java.lang.String):java.util.List","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `CompletableFuture CopycatClient.connect()` of un-annotated interface `io.atomix.copycat.client.CopycatClient`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/server/common/src/main/java/alluxio/cli/Format.java","tnLine":118,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.Format.format(alluxio.cli.Format$Mode,alluxio.conf.AlluxioConfiguration):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"RESOURCE_LEAK","tnDesc":"resource of type `alluxio.master.file.activesync.ActiveSyncer` acquired by call to `new()` at line 224 is not released after line 225.","tnFile":"core/server/master/src/main/java/alluxio/master/file/activesync/ActiveSyncManager.java","tnLine":225,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.file.activesync.ActiveSyncManager.launchPollingThread(long,long):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.error(String)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"underfs/gcs/src/main/java/alluxio/underfs/gcs/GCSUnderFileSystem.java","tnLine":209,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.gcs.GCSUnderFileSystem.getFolderSuffix():java.lang.String","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.error(String)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/server/common/src/main/java/alluxio/WorkerStorageTierAssoc.java","tnLine":31,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.WorkerStorageTierAssoc.<init>()","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void StoredObject.delete()` of un-annotated interface `org.javaswift.joss.model.StoredObject`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"underfs/swift/src/main/java/alluxio/underfs/swift/SwiftUnderFileSystem.java","tnLine":260,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.swift.SwiftUnderFileSystem.deleteObject(java.lang.String):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `resource.get()` could be null and is dereferenced at line 454.","tnFile":"core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java","tnLine":454,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.file.DefaultFileSystemMaster.getRootMountInfo(alluxio.underfs.MasterUfsManager):alluxio.master.file.meta.options.MountInfo","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void AuthenticationServer.close()` of un-annotated interface `alluxio.security.authentication.AuthenticationServer`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/server/master/src/main/java/alluxio/master/AlluxioMaster.java","tnLine":45,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.AlluxioMaster.main(java.lang.String[]):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"RESOURCE_LEAK","tnDesc":"resource of type `alluxio.master.journal.checkpoint.CheckpointOutputStream` acquired by call to `new()` at line 42 is not released after line 46.","tnFile":"core/server/master/src/main/java/alluxio/master/file/meta/CheckpointedIdHashSet.java","tnLine":46,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.file.meta.CheckpointedIdHashSet.writeToCheckpoint(java.io.OutputStream):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `UserState UserStateFactory.create(Subject,AlluxioConfiguration,boolean)` of un-annotated interface `alluxio.security.user.UserStateFactory`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/job/command/LeaderCommand.java","tnLine":41,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.job.command.LeaderCommand.<init>(alluxio.client.file.FileSystemContext)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"UNSAFE_GUARDED_BY_ACCESS","tnDesc":"The field `alluxio.master.file.meta.MountTable.mState` is annotated with `@GuardedBy(\"mReadLock,mWriteLock\")`, but the lock `mReadLock,mWriteLock` is not held during the access to the field at line 397. Since the current method is non-private, it can be called from outside the current class without synchronization. Consider wrapping the access in a `synchronized(mReadLock,mWriteLock)` block or making the method private.","tnFile":"core/server/master/src/main/java/alluxio/master/file/meta/MountTable.java","tnLine":397,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.file.meta.MountTable.checkUnderWritableMountPoint(alluxio.AlluxioURI):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object ObjectUnderFileSystem$ObjectStoreOperation.apply()` of un-annotated interface `alluxio.underfs.ObjectUnderFileSystem$ObjectStoreOperation`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/underfs/ObjectUnderFileSystem.java","tnLine":563,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.ObjectUnderFileSystem.getExistingStatus(java.lang.String):alluxio.underfs.UfsStatus","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"UNSAFE_GUARDED_BY_ACCESS","tnDesc":"The field `alluxio.master.file.meta.MountTable.mState` is annotated with `@GuardedBy(\"mReadLock,mWriteLock\")`, but the lock `mReadLock,mWriteLock` is not held during the access to the field at line 171. Since the current method is non-private, it can be called from outside the current class without synchronization. Consider wrapping the access in a `synchronized(mReadLock,mWriteLock)` block or making the method private.","tnFile":"core/server/master/src/main/java/alluxio/master/file/meta/MountTable.java","tnLine":171,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.file.meta.MountTable.delete(java.util.function.Supplier,alluxio.AlluxioURI,boolean):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `FileOutStream FileSystem.createFile(AlluxioURI)` of un-annotated interface `alluxio.client.file.FileSystem`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"integration/fuse/src/main/java/alluxio/fuse/AlluxioFuseFileSystem.java","tnLine":250,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.fuse.AlluxioFuseFileSystem.create(java.lang.String,long,ru.serce.jnrfuse.struct.FuseFileInfo):int","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void CuratorFramework.close()` of un-annotated interface `org.apache.curator.framework.CuratorFramework`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/master/ZkMasterInquireClient.java","tnLine":198,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.ZkMasterInquireClient.close():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `int CpCommand.run(CommandLine)` indirectly reads without synchronization from `this.mPreservePermissions`. Potentially races with write in method `CpCommand.validateArgs(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"shell/src/main/java/alluxio/cli/fs/command/CpCommand.java","tnLine":412,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.CpCommand.run(org.apache.commons.cli.CommandLine):int","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String AlluxioConfiguration.getOrDefault(PropertyKey,String)` of un-annotated interface `alluxio.conf.AlluxioConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/security/authentication/ImpersonationAuthenticator.java","tnLine":61,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.security.authentication.ImpersonationAuthenticator.<init>(alluxio.conf.AlluxioConfiguration)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String URI.getPath()` of un-annotated interface `alluxio.uri.URI`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"underfs/local/src/main/java/alluxio/underfs/local/LocalUnderFileSystem.java","tnLine":179,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.local.LocalUnderFileSystem.getDirectoryStatus(java.lang.String):alluxio.underfs.UfsDirectoryStatus","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Set FieldIndex.getByField(Object)` of un-annotated interface `alluxio.collections.FieldIndex`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/base/src/main/java/alluxio/collections/IndexedSet.java","tnLine":332,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.collections.IndexedSet.removeByField(alluxio.collections.IndexDefinition,java.lang.Object):int","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Enum AlluxioConfiguration.getEnum(PropertyKey,Class)` of un-annotated interface `alluxio.conf.AlluxioConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/security/authentication/AuthenticatedClientUser.java","tnLine":139,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.security.authentication.AuthenticatedClientUser.getConnectionUser(alluxio.conf.AlluxioConfiguration):java.lang.String","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `boolean ForkJoinPool$ManagedBlocker.block()` of un-annotated interface `alluxio.concurrent.jsr.ForkJoinPool$ManagedBlocker`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.underfs.UnderFileSystem` is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/concurrent/ManagedBlockingUfsForwarder.java","tnLine":446,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.ManagedBlockingUfsForwarder.renameDirectory(java.lang.String,java.lang.String):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `BlockStoreMeta BlockStoreMeta$Factory.create(BlockMetadataManager)` indirectly mutates container `lostStorages` via call to `addAll` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/server/worker/src/main/java/alluxio/worker/block/BlockStoreMeta.java","tnLine":42,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.worker.block.BlockStoreMeta$Factory.create(alluxio.worker.block.BlockMetadataManager):alluxio.worker.block.BlockStoreMeta","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object ObjectUnderFileSystem$ObjectStoreOperation.apply()` of un-annotated interface `alluxio.underfs.ObjectUnderFileSystem$ObjectStoreOperation`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/underfs/ObjectUnderFileSystem.java","tnLine":382,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.ObjectUnderFileSystem.createNonexistingFile(java.lang.String):java.io.OutputStream","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `boolean AlluxioConfiguration.getBoolean(PropertyKey)` of un-annotated interface `alluxio.conf.AlluxioConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/conf/path/SpecificPathConfiguration.java","tnLine":123,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.conf.path.SpecificPathConfiguration.getBoolean(alluxio.conf.PropertyKey):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `boolean ForkJoinPool$ManagedBlocker.block()` of un-annotated interface `alluxio.concurrent.jsr.ForkJoinPool$ManagedBlocker`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.underfs.UnderFileSystem` is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/concurrent/ManagedBlockingUfsForwarder.java","tnLine":346,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.ManagedBlockingUfsForwarder.isFile(java.lang.String):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `UfsManager$UfsClient UfsManager.get(long)` of un-annotated interface `alluxio.underfs.UfsManager`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/server/master/src/main/java/alluxio/master/file/meta/MountTable.java","tnLine":338,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.file.meta.MountTable.getUfsClient(long):alluxio.underfs.UfsManager$UfsClient","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String Command.getCommandName()` of un-annotated interface `alluxio.cli.Command`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/UnsetTtlCommand.java","tnLine":48,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.UnsetTtlCommand.validateArgs(org.apache.commons.cli.CommandLine):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String AlluxioConfiguration.get(PropertyKey)` of un-annotated interface `alluxio.conf.AlluxioConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/LsCommand.java","tnLine":289,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.LsCommand.runPlainPath(alluxio.AlluxioURI,org.apache.commons.cli.CommandLine):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `rpcContext.getBlockDeletionContext()` could be null and is dereferenced at line 883.","tnFile":"core/server/master/src/main/java/alluxio/master/file/meta/InodeTree.java","tnLine":883,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.file.meta.InodeTree.deleteInode(alluxio.master.file.RpcContext,alluxio.master.file.meta.LockedInodePath,long):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object `ufs` last assigned on line 2437 could be null and is dereferenced at line 2439.","tnFile":"core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java","tnLine":2439,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.file.DefaultFileSystemMaster.loadFileMetadataInternal(alluxio.master.file.RpcContext,alluxio.master.file.meta.LockedInodePath,alluxio.master.file.meta.MountTable$Resolution,alluxio.master.file.contexts.LoadMetadataContext):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"RESOURCE_LEAK","tnDesc":"resource of type `org.rocksdb.ColumnFamilyOptions` acquired by call to `new()` at line 70 is not released after line 71.","tnFile":"core/server/master/src/main/java/alluxio/master/metastore/rocks/RocksBlockStore.java","tnLine":71,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.metastore.rocks.RocksBlockStore.<init>(java.lang.String)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.info(String)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/metrics/MetricsSystem.java","tnLine":141,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.metrics.MetricsSystem.startSinks(java.lang.String):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `UserState UserStateFactory.create(Subject,AlluxioConfiguration,boolean)` of un-annotated interface `alluxio.security.user.UserStateFactory`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/SetReplicationCommand.java","tnLine":51,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.SetReplicationCommand.<init>(alluxio.client.file.FileSystemContext)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `Set ServerConfiguration.keySet()` reads without synchronization from `conf.ServerConfiguration.sConf`. Potentially races with write in method `ServerConfiguration.loadClusterDefaultsIfNotLoaded(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"core/server/common/src/main/java/alluxio/conf/ServerConfiguration.java","tnLine":182,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.conf.ServerConfiguration.keySet():java.util.Set","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `UserState UserStateFactory.create(Subject,AlluxioConfiguration,boolean)` of un-annotated interface `alluxio.security.user.UserStateFactory`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"integration/fuse/src/main/java/alluxio/fuse/AlluxioFuse.java","tnLine":62,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.fuse.AlluxioFuse.main(java.lang.String[]):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void ByteIOUtils.writeInt(byte[],int,int)` writes to field `buf.[_]` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/common/src/main/java/alluxio/util/io/ByteIOUtils.java","tnLine":170,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.util.io.ByteIOUtils.writeInt(byte[],int,int):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.debug(String)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/underfs/ObjectUnderFileSystem.java","tnLine":508,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.ObjectUnderFileSystem.getFileLocations(java.lang.String):java.util.List","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `entry.getUfsMode()` could be null and is dereferenced at line 173.","tnFile":"core/server/master/src/main/java/alluxio/underfs/MasterUfsManager.java","tnLine":173,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.MasterUfsManager$State.apply(alluxio.proto.journal.File$UpdateUfsModeEntry):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `__new(alluxio.concurrent.ManagedBlockingUfsForwarder$9).get()` could be null and is dereferenced at line 164.","tnFile":"core/common/src/main/java/alluxio/concurrent/ManagedBlockingUfsForwarder.java","tnLine":164,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.ManagedBlockingUfsForwarder.deleteFile(java.lang.String):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String AlluxioConfiguration.get(PropertyKey)` of un-annotated interface `alluxio.conf.AlluxioConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/util/webui/UIFileInfo.java","tnLine":252,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.util.webui.UIFileInfo.getModificationTime():java.lang.String","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `__new(alluxio.concurrent.ManagedBlockingUfsForwarder$34).get()` could be null and is dereferenced at line 446.","tnFile":"core/common/src/main/java/alluxio/concurrent/ManagedBlockingUfsForwarder.java","tnLine":446,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.ManagedBlockingUfsForwarder.renameDirectory(java.lang.String,java.lang.String):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void FileSystem.createDirectory(AlluxioURI)` of un-annotated interface `alluxio.client.file.FileSystem`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"integration/fuse/src/main/java/alluxio/fuse/AlluxioFuseFileSystem.java","tnLine":394,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.fuse.AlluxioFuseFileSystem.mkdir(java.lang.String,long):int","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"RESOURCE_LEAK","tnDesc":"resource of type `alluxio.master.job.JobMaster$LostWorkerDetectionHeartbeatExecutor` acquired by call to `new()` at line 175 is not released after line 176.","tnFile":"job/server/src/main/java/alluxio/master/job/JobMaster.java","tnLine":176,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.job.JobMaster.start(java.lang.Boolean):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Optional PathConfiguration.getConfiguration(AlluxioURI,PropertyKey)` of un-annotated interface `alluxio.conf.path.PathConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/conf/path/SpecificPathConfiguration.java","tnLine":108,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.conf.path.SpecificPathConfiguration.getLong(alluxio.conf.PropertyKey):long","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"RESOURCE_LEAK","tnDesc":"resource of type `java.lang.Process` acquired by call to `exec(...)` at line 172 is not released after line 173.","tnFile":"examples/src/main/java/alluxio/cli/AlluxioFrameworkIntegrationTest.java","tnLine":173,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.AlluxioFrameworkIntegrationTest.processExists(java.lang.String):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void BlockWorkerClient.close()` of un-annotated interface `alluxio.client.block.stream.BlockWorkerClient`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/client/fs/src/main/java/alluxio/client/block/stream/BlockWorkerClientPool.java","tnLine":70,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.client.block.stream.BlockWorkerClientPool.closeResource(alluxio.client.block.stream.BlockWorkerClient):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `URI URI.createNewPath(String,boolean)` of un-annotated interface `alluxio.uri.URI`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/PersistCommand.java","tnLine":134,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.PersistCommand.run(org.apache.commons.cli.CommandLine):int","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `java.lang.String[] ObjectUnderFileSystem$ObjectListingChunk.getCommonPrefixes()` of un-annotated interface `alluxio.underfs.ObjectUnderFileSystem$ObjectListingChunk`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"underfs/cos/src/main/java/alluxio/underfs/cos/COSUnderFileSystem.java","tnLine":258,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.cos.COSUnderFileSystem.isDirectory(java.lang.String):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"UNSAFE_GUARDED_BY_ACCESS","tnDesc":"The field `alluxio.worker.block.UfsInputStreamManager.mUnderFileInputStreamCache` is annotated with `@GuardedBy(\"mFileToInputStreamIds\")`, but the lock `mFileToInputStreamIds` is not held during the access to the field at line 209. Since the current method is non-private, it can be called from outside the current class without synchronization. Consider wrapping the access in a `synchronized(mFileToInputStreamIds)` block or making the method private.","tnFile":"core/server/worker/src/main/java/alluxio/worker/block/UfsInputStreamManager.java","tnLine":209,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.worker.block.UfsInputStreamManager.acquire(alluxio.underfs.UnderFileSystem,java.lang.String,long,alluxio.underfs.options.OpenOptions,boolean):java.io.InputStream","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void Registry.start(Object)` indirectly reads without synchronization from container `this.mRegistry` via call to `values`. Potentially races with write in method `Registry.add(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/server/common/src/main/java/alluxio/Registry.java","tnLine":129,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.Registry.start(java.lang.Object):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String AlluxioConfiguration.get(PropertyKey)` of un-annotated interface `alluxio.conf.AlluxioConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/util/network/NetworkAddressUtils.java","tnLine":403,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.util.network.NetworkAddressUtils.getLocalNodeName(alluxio.conf.AlluxioConfiguration):java.lang.String","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"RESOURCE_LEAK","tnDesc":"resource of type `alluxio.master.journal.checkpoint.CheckpointOutputStream` acquired to `cos` by call to `new()` at line 42 is not released after line 46.\n**Note**: potential exception at line 44","tnFile":"core/server/master/src/main/java/alluxio/master/file/meta/CheckpointedIdHashSet.java","tnLine":46,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.file.meta.CheckpointedIdHashSet.writeToCheckpoint(java.io.OutputStream):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `UserState UserStateFactory.create(Subject,AlluxioConfiguration,boolean)` of un-annotated interface `alluxio.security.user.UserStateFactory`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/server/worker/src/main/java/alluxio/worker/file/FileSystemWorkerFactory.java","tnLine":45,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.worker.file.FileSystemWorkerFactory.create(alluxio.worker.WorkerRegistry,alluxio.underfs.UfsManager):alluxio.worker.file.FileSystemWorker","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `java.lang.String[] ObjectUnderFileSystem$ObjectListingChunk.getCommonPrefixes()` of un-annotated interface `alluxio.underfs.ObjectUnderFileSystem$ObjectListingChunk`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/underfs/ObjectUnderFileSystem.java","tnLine":549,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.ObjectUnderFileSystem.getStatus(java.lang.String):alluxio.underfs.UfsStatus","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"UNSAFE_GUARDED_BY_ACCESS","tnDesc":"The field `alluxio.master.meta.PathProperties.mState` is annotated with `@GuardedBy(\"mLock\")`, but the lock `mLock` is not held during the access to the field at line 155. Since the current method is non-private, it can be called from outside the current class without synchronization. Consider wrapping the access in a `synchronized(mLock)` block or making the method private.","tnFile":"core/server/master/src/main/java/alluxio/master/meta/PathProperties.java","tnLine":155,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.meta.PathProperties.getDelegate():alluxio.master.journal.Journaled","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String URI.getPath()` of un-annotated interface `alluxio.uri.URI`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/base/src/main/java/alluxio/AlluxioURI.java","tnLine":228,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.AlluxioURI.containsWildcard():boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `Object ForkJoinPool.invoke(ForkJoinTask)` indirectly reads without synchronization from `ws.[_]`. Potentially races with write in method `ForkJoinPool.externalPush(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"core/common/src/main/java/alluxio/concurrent/jsr/ForkJoinPool.java","tnLine":1839,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.jsr.ForkJoinPool.invoke(alluxio.concurrent.jsr.ForkJoinTask):java.lang.Object","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Access Account.authenticate()` of un-annotated interface `org.javaswift.joss.model.Account`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"underfs/swift/src/main/java/alluxio/underfs/swift/SwiftUnderFileSystemFactory.java","tnLine":48,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.swift.SwiftUnderFileSystemFactory.create(java.lang.String,alluxio.underfs.UnderFileSystemConfiguration):alluxio.underfs.UnderFileSystem","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void InodeDirectoryIdGenerator.resetState()` indirectly writes to field `this.mNextDirectoryId.mSequenceNumber` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/server/master/src/main/java/alluxio/master/file/meta/InodeDirectoryIdGenerator.java","tnLine":107,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.file.meta.InodeDirectoryIdGenerator.resetState():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `AlluxioProperties AlluxioConfiguration.copyProperties()` of un-annotated interface `alluxio.conf.AlluxioConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/server/common/src/main/java/alluxio/master/journalv0/ufs/UfsMutableJournal.java","tnLine":89,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.journalv0.ufs.UfsMutableJournal.getWriter():alluxio.master.journalv0.JournalWriter","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `ExecutorService ExecutorServiceFactory.create()` of un-annotated interface `alluxio.util.executor.ExecutorServiceFactory`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"underfs/s3a/src/main/java/alluxio/underfs/s3a/S3AUnderFileSystemFactory.java","tnLine":30,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.s3a.S3AUnderFileSystemFactory.create(java.lang.String,alluxio.conf.AlluxioConfiguration):java.lang.Object","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String AlluxioConfiguration.get(PropertyKey)` of un-annotated interface `alluxio.conf.AlluxioConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/conf/path/SpecificPathConfiguration.java","tnLine":73,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.conf.path.SpecificPathConfiguration.get(alluxio.conf.PropertyKey):java.lang.String","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void FileSystem.setAttribute(AlluxioURI,SetAttributePOptions)` of un-annotated interface `alluxio.client.file.FileSystem`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/UnpinCommand.java","tnLine":49,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.UnpinCommand.runPlainPath(alluxio.AlluxioURI,org.apache.commons.cli.CommandLine):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String URI.getScheme()` of un-annotated interface `alluxio.uri.URI`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/base/src/main/java/alluxio/uri/StandardURI.java","tnLine":190,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.uri.StandardURI.equals(java.lang.Object):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.info(String,Object)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/server/master/src/main/java/alluxio/master/metastore/rocks/RocksStore.java","tnLine":80,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.metastore.rocks.RocksStore.<init>(java.lang.String,java.lang.String,java.util.Collection,org.rocksdb.DBOptions,java.util.List)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `CompletableFuture CopycatClient.connect()` of un-annotated interface `io.atomix.copycat.client.CopycatClient`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/server/common/src/main/java/alluxio/master/journal/raft/RaftJournalSystem.java","tnLine":191,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.journal.raft.RaftJournalSystem.create(alluxio.master.journal.raft.RaftJournalConfiguration):alluxio.master.journal.raft.RaftJournalSystem","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `__new(alluxio.concurrent.ManagedBlockingUfsForwarder$5).get()` could be null and is dereferenced at line 124.","tnFile":"core/common/src/main/java/alluxio/concurrent/ManagedBlockingUfsForwarder.java","tnLine":124,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.ManagedBlockingUfsForwarder.deleteDirectory(java.lang.String):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `long InodeDirectoryView.getId()` of un-annotated interface `alluxio.master.file.meta.InodeDirectoryView`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/server/master/src/main/java/alluxio/master/metastore/rocks/RocksInodeStore.java","tnLine":208,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.metastore.rocks.RocksInodeStore.hasChildren(alluxio.master.file.meta.InodeDirectoryView,alluxio.master.metastore.ReadOption):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `long AlluxioConfiguration.getMs(PropertyKey)` of un-annotated interface `alluxio.conf.AlluxioConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/StatCommand.java","tnLine":79,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.StatCommand.runPlainPath(alluxio.AlluxioURI,org.apache.commons.cli.CommandLine):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object ObjectUnderFileSystem$ObjectStoreOperation.apply()` of un-annotated interface `alluxio.underfs.ObjectUnderFileSystem$ObjectStoreOperation`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/underfs/ObjectUnderFileSystem.java","tnLine":500,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.ObjectUnderFileSystem.getExistingDirectoryStatus(java.lang.String):alluxio.underfs.UfsDirectoryStatus","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void AuthenticationServer.close()` of un-annotated interface `alluxio.security.authentication.AuthenticationServer`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"job/server/src/main/java/alluxio/master/AlluxioJobMasterProcess.java","tnLine":251,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.AlluxioJobMasterProcess$Factory.create():alluxio.master.AlluxioJobMasterProcess","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `UserState UserStateFactory.create(Subject,AlluxioConfiguration,boolean)` of un-annotated interface `alluxio.security.user.UserStateFactory`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/UnsetTtlCommand.java","tnLine":38,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.UnsetTtlCommand.<init>(alluxio.client.file.FileSystemContext)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String URI.getPath()` of un-annotated interface `alluxio.uri.URI`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/base/src/main/java/alluxio/AlluxioURI.java","tnLine":207,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.AlluxioURI.getLeadingPath(int):java.lang.String","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"UNSAFE_GUARDED_BY_ACCESS","tnDesc":"The field `alluxio.master.block.DefaultBlockMaster.mJournaledNextContainerId` is annotated with `@GuardedBy(\"mBlockContainerIdGenerator\")`, but the lock `mBlockContainerIdGenerator` is not held during the access to the field at line 277. Since the current method is non-private, it can be called from outside the current class without synchronization. Consider wrapping the access in a `synchronized(mBlockContainerIdGenerator)` block or making the method private.","tnFile":"core/server/master/src/main/java/alluxio/master/block/DefaultBlockMaster.java","tnLine":277,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.block.DefaultBlockMaster.processJournalEntry(alluxio.proto.journal.Journal$JournalEntry):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void RaftPrimarySelector.init(CopycatServer)` indirectly reads without synchronization from `this.mServer`. Potentially races with write in method `RaftPrimarySelector.init(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/server/common/src/main/java/alluxio/master/journal/raft/RaftPrimarySelector.java","tnLine":50,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.journal.raft.RaftPrimarySelector.init(io.atomix.copycat.server.CopycatServer):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object UnderFileSystemWithLogging$UfsCallable.call()` of un-annotated interface `alluxio.underfs.UnderFileSystemWithLogging$UfsCallable`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.underfs.UnderFileSystem` is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/underfs/UnderFileSystemWithLogging.java","tnLine":237,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.UnderFileSystemWithLogging.deleteExistingDirectory(java.lang.String):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void UfsJournalGarbageCollector.close()` writes to field `this.mGc` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/server/common/src/main/java/alluxio/master/journal/ufs/UfsJournalGarbageCollector.java","tnLine":67,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.journal.ufs.UfsJournalGarbageCollector.close():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `long AlluxioConfiguration.getBytes(PropertyKey)` of un-annotated interface `alluxio.conf.AlluxioConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/conf/path/SpecificPathConfiguration.java","tnLine":138,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.conf.path.SpecificPathConfiguration.getBytes(alluxio.conf.PropertyKey):long","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String URI.getPath()` of un-annotated interface `alluxio.uri.URI`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"underfs/local/src/main/java/alluxio/underfs/local/LocalUnderFileSystem.java","tnLine":229,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.local.LocalUnderFileSystem.getSpace(java.lang.String,alluxio.underfs.UnderFileSystem$SpaceType):long","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void ChannelAuthenticator$DefaultAuthenticatedChannel.authenticate()` writes to field `this.mClientDriver` outside of synchronization.\n Reporting because a superclass `class io.grpc.Channel` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/common/src/main/java/alluxio/security/authentication/ChannelAuthenticator.java","tnLine":155,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.security.authentication.ChannelAuthenticator$DefaultAuthenticatedChannel.authenticate():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String AlluxioConfiguration.get(PropertyKey)` of un-annotated interface `alluxio.conf.AlluxioConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/FileSystemShellUtils.java","tnLine":61,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.FileSystemShellUtils.getFilePath(java.lang.String,alluxio.conf.AlluxioConfiguration):java.lang.String","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object `serviceType` last assigned on line 48 could be null and is dereferenced at line 55.","tnFile":"core/common/src/main/java/alluxio/grpc/ServiceVersionClientServiceHandler.java","tnLine":55,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.grpc.ServiceVersionClientServiceHandler.getServiceVersion(alluxio.grpc.GetServiceVersionPRequest,io.grpc.stub.StreamObserver):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `long MutableInode.getLastModificationTimeMs()` reads without synchronization from `this.mLastModificationTimeMs`. Potentially races with write in method `MutableInode.setLastModificationTimeMs(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"core/server/master/src/main/java/alluxio/master/file/meta/MutableInode.java","tnLine":112,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.file.meta.MutableInode.getLastModificationTimeMs():long","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"UNSAFE_GUARDED_BY_ACCESS","tnDesc":"The field `alluxio.metrics.MetricsSystem.sSinks` is annotated with `@GuardedBy(\"MetricsSystem\")`, but the lock `MetricsSystem` is not held during the access to the field at line 159. Since the current method is non-private, it can be called from outside the current class without synchronization. Consider wrapping the access in a `synchronized(MetricsSystem)` block or making the method private.","tnFile":"core/common/src/main/java/alluxio/metrics/MetricsSystem.java","tnLine":159,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.metrics.MetricsSystem.startSinksFromConfig(alluxio.metrics.MetricsConfig):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void ReadRequestContext.setDataReaderActive(boolean)` writes to field `this.mDataReaderActive` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/server/worker/src/main/java/alluxio/worker/grpc/ReadRequestContext.java","tnLine":177,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.worker.grpc.ReadRequestContext.setDataReaderActive(boolean):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"RESOURCE_LEAK","tnDesc":"resource of type `java.io.FileOutputStream` acquired by call to `initNewFile()` at line 205 is not released after line 214.","tnFile":"underfs/s3a/src/main/java/alluxio/underfs/s3a/S3ALowLevelOutputStream.java","tnLine":214,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.s3a.S3ALowLevelOutputStream.write(byte[],int,int):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object UnderFileSystemWithLogging$UfsCallable.call()` of un-annotated interface `alluxio.underfs.UnderFileSystemWithLogging$UfsCallable`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.underfs.UnderFileSystem` is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/underfs/UnderFileSystemWithLogging.java","tnLine":884,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.UnderFileSystemWithLogging.startSync(alluxio.AlluxioURI):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.info(String)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/server/common/src/main/java/alluxio/master/journal/raft/JournalStateMachine.java","tnLine":87,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.journal.raft.JournalStateMachine.<init>(java.util.Map,java.util.function.Supplier)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `ExecutorService ExecutorServiceFactory.create()` of un-annotated interface `alluxio.util.executor.ExecutorServiceFactory`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"underfs/gcs/src/main/java/alluxio/underfs/gcs/GCSUnderFileSystem.java","tnLine":104,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.gcs.GCSUnderFileSystem.createInstance(alluxio.AlluxioURI,alluxio.underfs.UnderFileSystemConfiguration):alluxio.underfs.gcs.GCSUnderFileSystem","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.debug(String,Object)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/client/fs/src/main/java/alluxio/client/block/AlluxioBlockStore.java","tnLine":207,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.client.block.AlluxioBlockStore.getInStream(long,alluxio.client.file.options.InStreamOptions,java.util.Map):alluxio.client.block.stream.BlockInStream","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object `request` last assigned on line 88 could be null and is dereferenced at line 89.","tnFile":"core/server/worker/src/main/java/alluxio/worker/grpc/UfsFallbackBlockWriteHandler.java","tnLine":89,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.worker.grpc.UfsFallbackBlockWriteHandler.createRequestContext(alluxio.grpc.WriteRequest):alluxio.worker.grpc.BlockWriteRequestContext","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object ObjectUnderFileSystem$ObjectStoreOperation.apply()` of un-annotated interface `alluxio.underfs.ObjectUnderFileSystem$ObjectStoreOperation`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/underfs/ObjectUnderFileSystem.java","tnLine":398,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.ObjectUnderFileSystem.deleteExistingFile(java.lang.String):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Optional PathConfiguration.getConfiguration(AlluxioURI,PropertyKey)` of un-annotated interface `alluxio.conf.path.PathConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/conf/path/SpecificPathConfiguration.java","tnLine":143,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.conf.path.SpecificPathConfiguration.getMs(alluxio.conf.PropertyKey):long","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `BlockWorker BlockWorkerFactory.create(WorkerRegistry,UfsManager)` indirectly writes to field `dirPaths.[_]` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/server/worker/src/main/java/alluxio/worker/block/BlockWorkerFactory.java","tnLine":43,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.worker.block.BlockWorkerFactory.create(alluxio.worker.WorkerRegistry,alluxio.underfs.UfsManager):alluxio.worker.block.BlockWorker","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `void RetryHandlingBlockMasterClient.afterConnect()` reads without synchronization from `this.mChannel`. Potentially races with write in method `RetryHandlingBlockMasterClient.getBlockInfo(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"core/client/fs/src/main/java/alluxio/client/block/RetryHandlingBlockMasterClient.java","tnLine":75,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.client.block.RetryHandlingBlockMasterClient.afterConnect():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.error(String)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"underfs/gcs/src/main/java/alluxio/underfs/gcs/GCSUnderFileSystem.java","tnLine":193,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.gcs.GCSUnderFileSystem.createObject(java.lang.String):java.io.OutputStream","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void BlockWorkerClient.close()` of un-annotated interface `alluxio.client.block.stream.BlockWorkerClient`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/client/fs/src/main/java/alluxio/client/block/stream/BlockWorkerClientPool.java","tnLine":36,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.client.block.stream.BlockWorkerClientPool.closeResource(java.lang.Object):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `boolean URI.isAbsolute()` of un-annotated interface `alluxio.uri.URI`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/base/src/main/java/alluxio/AlluxioURI.java","tnLine":354,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.AlluxioURI.isAbsolute():boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object UnderFileSystemWithLogging$UfsCallable.call()` of un-annotated interface `alluxio.underfs.UnderFileSystemWithLogging$UfsCallable`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.underfs.UnderFileSystem` is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/underfs/UnderFileSystemWithLogging.java","tnLine":797,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.UnderFileSystemWithLogging.setOwner(java.lang.String,java.lang.String,java.lang.String):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `ExecutorService ExecutorServiceFactory.create()` of un-annotated interface `alluxio.util.executor.ExecutorServiceFactory`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"underfs/gcs/src/main/java/alluxio/underfs/gcs/GCSUnderFileSystemFactory.java","tnLine":35,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.gcs.GCSUnderFileSystemFactory.create(java.lang.String,alluxio.conf.AlluxioConfiguration):java.lang.Object","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `int CopyToLocalCommand.run(CommandLine)` indirectly reads with synchronization from `this.mCpCommand.mCopyFromLocalBufferSize`. Potentially races with unsynchronized write in method `CopyToLocalCommand.validateArgs(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","tnFile":"shell/src/main/java/alluxio/cli/fs/command/CopyToLocalCommand.java","tnLine":62,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.CopyToLocalCommand.run(org.apache.commons.cli.CommandLine):int","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String AlluxioConfiguration.get(PropertyKey)` of un-annotated interface `alluxio.conf.AlluxioConfiguration`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/client/fs/src/main/java/alluxio/client/block/policy/SpecificHostPolicy.java","tnLine":40,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.client.block.policy.SpecificHostPolicy.<init>(alluxio.conf.AlluxioConfiguration)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Server.stop()` of un-annotated interface `alluxio.Server`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/server/common/src/main/java/alluxio/Registry.java","tnLine":148,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.Registry.stop():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `boolean ForkJoinPool$ManagedBlocker.block()` of un-annotated interface `alluxio.concurrent.jsr.ForkJoinPool$ManagedBlocker`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.underfs.UnderFileSystem` is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/concurrent/ManagedBlockingUfsForwarder.java","tnLine":366,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.ManagedBlockingUfsForwarder.listStatus(java.lang.String):alluxio.underfs.UfsStatus[]","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String URI.getPath()` of un-annotated interface `alluxio.uri.URI`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/ChecksumCommand.java","tnLine":51,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.ChecksumCommand.runPlainPath(alluxio.AlluxioURI,org.apache.commons.cli.CommandLine):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `UserState UserStateFactory.create(Subject,AlluxioConfiguration,boolean)` of un-annotated interface `alluxio.security.user.UserStateFactory`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/LeaderCommand.java","tnLine":64,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.LeaderCommand.run(org.apache.commons.cli.CommandLine):int","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String Command.getCommandName()` of un-annotated interface `alluxio.cli.Command`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/HelpCommand.java","tnLine":80,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.HelpCommand.run(org.apache.commons.cli.CommandLine):int","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `boolean DefaultBlockMaster.processJournalEntry(Journal$JournalEntry)` writes to field `this.mJournaledNextContainerId` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"core/server/master/src/main/java/alluxio/master/block/DefaultBlockMaster.java","tnLine":277,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.block.DefaultBlockMaster.processJournalEntry(alluxio.proto.journal.Journal$JournalEntry):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String Deprecated.message()` of un-annotated interface `alluxio.conf.Deprecated`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/conf/PropertyKey.java","tnLine":4805,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.conf.PropertyKey.getDeprecationMessage(alluxio.conf.PropertyKey):java.lang.String","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `boolean ForkJoinPool$ManagedBlocker.block()` of un-annotated interface `alluxio.concurrent.jsr.ForkJoinPool$ManagedBlocker`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.underfs.UnderFileSystem` is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/concurrent/ManagedBlockingUfsForwarder.java","tnLine":396,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.concurrent.ManagedBlockingUfsForwarder.mkdirs(java.lang.String,alluxio.underfs.options.MkdirsOptions):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `void Logger.error(String)` of un-annotated interface `org.slf4j.Logger`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"underfs/cos/src/main/java/alluxio/underfs/cos/COSUnderFileSystem.java","tnLine":153,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.cos.COSUnderFileSystem.createObject(java.lang.String):java.io.OutputStream","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `String Command.getCommandName()` of un-annotated interface `alluxio.cli.Command`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fsadmin/command/UfsCommand.java","tnLine":59,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fsadmin.command.UfsCommand.validateArgs(org.apache.commons.cli.CommandLine):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"UNSAFE_GUARDED_BY_ACCESS","tnDesc":"The field `alluxio.master.file.meta.MountTable.mState` is annotated with `@GuardedBy(\"mReadLock,mWriteLock\")`, but the lock `mReadLock,mWriteLock` is not held during the access to the field at line 118. Since the current method is non-private, it can be called from outside the current class without synchronization. Consider wrapping the access in a `synchronized(mReadLock,mWriteLock)` block or making the method private.","tnFile":"core/server/master/src/main/java/alluxio/master/file/meta/MountTable.java","tnLine":118,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.master.file.meta.MountTable.add(java.util.function.Supplier,alluxio.AlluxioURI,alluxio.AlluxioURI,long,alluxio.grpc.MountPOptions):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object BaseFileSystem$RpcCallable.call(Object)` of un-annotated interface `alluxio.client.file.BaseFileSystem$RpcCallable`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"core/client/fs/src/main/java/alluxio/client/file/BaseFileSystem.java","tnLine":154,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.client.file.BaseFileSystem.createDirectory(alluxio.AlluxioURI):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object UnderFileSystemWithLogging$UfsCallable.call()` of un-annotated interface `alluxio.underfs.UnderFileSystemWithLogging$UfsCallable`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.underfs.UnderFileSystem` is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/underfs/UnderFileSystemWithLogging.java","tnLine":745,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.UnderFileSystemWithLogging.renameFile(java.lang.String,java.lang.String):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `UserState UserStateFactory.create(Subject,AlluxioConfiguration,boolean)` of un-annotated interface `alluxio.security.user.UserStateFactory`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","tnFile":"shell/src/main/java/alluxio/cli/fs/command/GetFaclCommand.java","tnLine":36,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.cli.fs.command.GetFaclCommand.<init>(alluxio.client.file.FileSystemContext)","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Read/Write race. Non-private method `AlluxioProperties ServerConfiguration.copyProperties()` reads without synchronization from `conf.ServerConfiguration.sConf`. Potentially races with write in method `ServerConfiguration.loadClusterDefaultsIfNotLoaded(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"core/server/common/src/main/java/alluxio/conf/ServerConfiguration.java","tnLine":79,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.conf.ServerConfiguration.copyProperties():alluxio.conf.AlluxioProperties","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"INTERFACE_NOT_THREAD_SAFE","tnDesc":"Unprotected call to method `Object UnderFileSystemWithLogging$UfsCallable.call()` of un-annotated interface `alluxio.underfs.UnderFileSystemWithLogging$UfsCallable`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class alluxio.underfs.UnderFileSystem` is annotated `@ThreadSafe`.","tnFile":"core/common/src/main/java/alluxio/underfs/UnderFileSystemWithLogging.java","tnLine":900,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"alluxio.underfs.UnderFileSystemWithLogging.stopSync(alluxio.AlluxioURI):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}}],null,{"analysisLOC":null,"analysisBuildSys":"Maven []","analysisLang":null}]}],[{"tag":"ErrorProne_JDK8"},{"tag":"ToolSuccess","contents":[[],null,{"analysisLOC":null,"analysisBuildSys":"Maven []","analysisLang":null}]}]],"debugLog":"core-4.4.6.jar\\\",\\\"/root/.m2/repository/io/netty/netty-handler-proxy/4.1.30.Final/netty-handler-proxy-4.1.30.Final.jar\\\",\\\"/root/.m2/repository/org/hamcrest/hamcrest/2.1-rc4/hamcrest-2.1-rc4.jar\\\",\\\"/root/.m2/repository/joda-time/joda-time/2.8.1/joda-time-2.8.1.jar\\\",\\\"/root/.m2/repository/org/javassist/javassist/3.18.2-GA/javassist-3.18.2-GA.jar\\\",\\\"/root/.m2/repository/com/google/errorprone/error_prone_annotations/2.2.0/error_prone_annotations-2.2.0.jar\\\",\\\"/root/.m2/repository/org/powermock/powermock-reflect/1.6.1/powermock-reflect-1.6.1.jar\\\",\\\"/root/.m2/repository/com/google/guava/guava-testlib/27.0.1-jre/guava-testlib-27.0.1-jre.jar\\\",\\\"/root/.m2/repository/org/powermock/powermock-api-mockito/1.6.1/powermock-api-mockito-1.6.1.jar\\\",\\\"/root/.m2/repository/org/codehaus/mojo/animal-sniffer-annotations/1.17/animal-sniffer-annotations-1.17.jar\\\",\\\"/root/.m2/repository/com/fasterxml/jackson/dataformat/jackson-dataformat-cbor/2.6.7/jackson-dataformat-cbor-2.6.7.jar\\\",\\\"/tmp/analyzing-d71915e80ed0fb48/core/base/target/alluxio-core-base-2.1.0-SNAPSHOT.jar\\\",\\\"/root/.m2/repository/io/dropwizard/metrics/metrics-json/3.1.2/metrics-json-3.1.2.jar\\\",\\\"/root/.m2/repository/org/objenesis/objenesis/2.1/objenesis-2.1.jar\\\",\\\"/root/.m2/repository/org/apache/httpcomponents/httpclient/4.5.3/httpclient-4.5.3.jar\\\",\\\"/root/.m2/repository/org/apache/curator/curator-recipes/4.0.1/curator-recipes-4.0.1.jar\\\",\\\"/root/.m2/repository/io/netty/netty-handler/4.1.30.Final/netty-handler-4.1.30.Final.jar\\\",\\\"/root/.m2/repository/org/apache/curator/curator-framework/4.0.1/curator-framework-4.0.1.jar\\\",\\\"/root/.m2/repository/software/amazon/ion/ion-java/1.0.2/ion-java-1.0.2.jar\\\",\\\"/root/.m2/repository/io/dropwizard/metrics/metrics-graphite/3.1.2/metrics-graphite-3.1.2.jar\\\",\\\"/root/.m2/repository/commons-httpclient/commons-httpclient/3.1/commons-httpclient-3.1.jar\\\",\\\"/root/.m2/repository/io/grpc/grpc-netty/1.17.1/grpc-netty-1.17.1.jar\\\",\\\"/root/.m2/repository/io/netty/netty-codec-http2/4.1.30.Final/netty-codec-http2-4.1.30.Final.jar\\\",\\\"/root/.m2/repository/org/powermock/powermock-module-junit4-rule/1.6.1/powermock-module-junit4-rule-1.6.1.jar\\\",\\\"/root/.m2/repository/org/apache/zookeeper/zookeeper/3.4.6/zookeeper-3.4.6.jar\\\",\\\"/tmp/analyzing-d71915e80ed0fb48/core/transport/target/alluxio-core-transport-2.1.0-SNAPSHOT.jar\\\",\\\"/root/.m2/repository/com/google/j2objc/j2objc-annotations/1.1/j2objc-annotations-1.1.jar\\\",\\\"/root/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.9.7/jackson-core-2.9.7.jar\\\",\\\"/root/.m2/repository/org/apache/commons/commons-lang3/3.4/commons-lang3-3.4.jar\\\",\\\"/root/.m2/repository/com/google/guava/failureaccess/1.0.1/failureaccess-1.0.1.jar\\\",\\\"/root/.m2/repository/commons-codec/commons-codec/1.10/commons-codec-1.10.jar\\\",\\\"/root/.m2/repository/org/slf4j/slf4j-api/1.7.2/slf4j-api-1.7.2.jar\\\",\\\"/root/.m2/repository/io/opencensus/opencensus-api/0.17.0/opencensus-api-0.17.0.jar\\\",\\\"/root/.m2/repository/io/netty/netty-common/4.1.30.Final/netty-common-4.1.30.Final.jar\\\",\\\"/root/.m2/repository/com/google/api/grpc/proto-google-common-protos/1.0.0/proto-google-common-protos-1.0.0.jar\\\",\\\"/root/.m2/repository/io/grpc/grpc-core/1.17.1/grpc-core-1.17.1.jar\\\",\\\"/tmp/analyzing-d71915e80ed0fb48/core/common/target/alluxio-core-common-2.1.0-SNAPSHOT-tests.jar\\\",\\\"/root/.m2/repository/net/jcip/jcip-annotations/1.0/jcip-annotations-1.0.jar\\\",\\\"/root/.m2/repository/org/mockito/mockito-all/1.10.8/mockito-all-1.10.8.jar\\\",\\\"/root/.m2/repository/com/google/code/gson/gson/2.7/gson-2.7.jar\\\",\\\"/root/.m2/repository/io/netty/netty-resolver/4.1.30.Final/netty-resolver-4.1.30.Final.jar\\\",\\\"/root/.m2/repository/org/powermock/powermock-module-junit4-common/1.6.1/powermock-module-junit4-common-1.6.1.jar\\\",\\\"/root/.m2/repository/com/amazonaws/aws-java-sdk-kms/1.11.215/aws-java-sdk-kms-1.11.215.jar\\\",\\\"/root/.m2/repository/com/amazonaws/jmespath-java/1.11.215/jmespath-java-1.11.215.jar\\\",\\\"/root/.m2/repository/commons-cli/commons-cli/1.3.1/commons-cli-1.3.1.jar\\\",\\\"/root/.m2/repository/com/fasterxml/jackson/core/jackson-annotations/2.9.7/jackson-annotations-2.9.7.jar\\\",\\\"/root/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.9.7/jackson-databind-2.9.7.jar\\\",\\\"/root/.m2/repository/io/opencensus/opencensus-contrib-grpc-metrics/0.17.0/opencensus-contrib-grpc-metrics-0.17.0.jar\\\",\\\"/root/.m2/repository/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar\\\",\\\"/root/.m2/repository/io/dropwizard/metrics/metrics-core/3.1.2/metrics-core-3.1.2.jar\\\",\\\"/root/.m2/repository/io/dropwizard/metrics/metrics-jvm/3.1.2/metrics-jvm-3.1.2.jar\\\",\\\"/root/.m2/repository/com/google/code/findbugs/annotations/3.0.1/annotations-3.0.1.jar\\\",\\\"/root/.m2/repository/io/netty/netty-all/4.1.30.Final/netty-all-4.1.30.Final.jar\\\",\\\"/root/.m2/repository/org/powermock/powermock-api-support/1.6.1/powermock-api-support-1.6.1.jar\\\",\\\"/root/.m2/repository/io/netty/netty-codec/4.1.30.Final/netty-codec-4.1.30.Final.jar\\\",\\\"/root/.m2/repository/org/reflections/reflections/0.9.10/reflections-0.9.10.jar\\\",\\\"/root/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar\\\",\\\"/root/.m2/repository/commons-io/commons-io/2.4/commons-io-2.4.jar\\\",\\\"/root/.m2/repository/io/netty/netty-transport/4.1.30.Final/netty-transport-4.1.30.Final.jar\\\",\\\"/root/.m2/repository/org/slf4j/slf4j-log4j12/1.7.2/slf4j-log4j12-1.7.2.jar\\\",\\\"/root/.m2/repository/io/netty/netty/3.7.0.Final/netty-3.7.0.Final.jar\\\",\\\"/root/.m2/repository/io/grpc/grpc-context/1.17.1/grpc-context-1.17.1.jar\\\",\\\"/root/.m2/repository/io/netty/netty-codec-socks/4.1.30.Final/netty-codec-socks-4.1.30.Final.jar\\\",\\\"/root/.m2/repository/io/swagger/swagger-annotations/1.5.22/swagger-annotations-1.5.22.jar\\\",\\\"/root/.m2/repository/io/netty/netty-codec-http/4.1.30.Final/netty-codec-http-4.1.30.Final.jar\\\",\\\"/root/.m2/repository/com/google/guava/guava/27.0.1-jre/guava-27.0.1-jre.jar\\\",\\\"/root/.m2/repository/io/netty/netty-buffer/4.1.30.Final/netty-buffer-4.1.30.Final.jar\\\",\\\"/root/.m2/repository/xmlpull/xmlpull/1.1.3.1/xmlpull-1.1.3.1.jar\\\",\\\"/root/.m2/repository/com/amazonaws/aws-java-sdk-s3/1.11.215/aws-java-sdk-s3-1.11.215.jar\\\",\\\"/root/.m2/repository/org/powermock/powermock-classloading-base/1.6.1/powermock-classloading-base-1.6.1.jar\\\",\\\"/root/.m2/repository/log4j/log4j/1.2.17/log4j-1.2.17.jar\\\",\\\"/root/.m2/repository/org/powermock/powermock-classloading-xstream/1.6.1/powermock-classloading-xstream-1.6.1.jar\\\",\\\"/root/.m2/repository/com/thoughtworks/xstream/xstream/1.4.2/xstream-1.4.2.jar\\\",\\\"/root/.m2/repository/io/grpc/grpc-protobuf/1.17.1/grpc-protobuf-1.17.1.jar\\\",\\\"/root/.m2/repository/commons-lang/commons-lang/2.6/commons-lang-2.6.jar\\\",\\\"/root/.m2/repository/com/google/protobuf/protobuf-java/3.5.1/protobuf-java-3.5.1.jar\\\",\\\"/root/.m2/repository/org/checkerframework/checker-qual/2.5.2/checker-qual-2.5.2.jar\\\",\\\"/root/.m2/repository/commons-logging/commons-logging/1.1.1/commons-logging-1.1.1.jar\\\",\\\"/root/.m2/repository/xpp3/xpp3_min/1.1.4c/xpp3_min-1.1.4c.jar\\\",\\\"/root/.m2/repository/org/powermock/powermock-module-junit4/1.6.1/powermock-module-junit4-1.6.1.jar\\\",\\\"/root/.m2/repository/com/google/guava/listenablefuture/9999.0-empty-to-avoid-conflict-with-guava/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar\\\",\\\"/root/.m2/repository/jline/jline/2.14.6/jline-2.14.6.jar\\\",\\\"/root/.m2/repository/com/amazonaws/aws-java-sdk-core/1.11.215/aws-java-sdk-core-1.11.215.jar\\\",\\\"/root/.m2/repository/junit/junit/4.12/junit-4.12.jar\\\",\\\"/root/.m2/repository/org/powermock/powermock-core/1.6.1/powermock-core-1.6.1.jar\\\",\\\"/root/.m2/repository/io/grpc/grpc-stub/1.17.1/grpc-stub-1.17.1.jar\\\",\\\"/root/.m2/repository/org/apache/curator/curator-client/4.0.1/curator-client-4.0.1.jar\\\"],\\\"output_dir\\\":\\\"/tmp/analyzing-d71915e80ed0fb48/underfs/s3a/target/classes\\\",\\\"jdk\\\":\\\"JDK1.8\\\"},{\\\"arguments\\\":[\\\"-Xlint:none\\\"],\\\"files\\\":[\\\"/tmp/analyzing-d71915e80ed0fb48/underfs/swift/src/main/java/alluxio/underfs/swift/SwiftUnderFileSystemFactory.java\\\",\\\"/tmp/analyzing-d71915e80ed0fb48/underfs/swift/src/main/java/alluxio/underfs/swift/MidPartLongRange.java\\\",\\\"/tmp/analyzing-d71915e80ed0fb48/underfs/swift/src/main/java/alluxio/underfs/swift/SwiftUnderFileSystem.java\\\",\\\"/tmp/analyzing-d71915e80ed0fb48/underfs/swift/src/main/java/alluxio/underfs/swift/SwiftOutputStream.java\\\",\\\"/tmp/analyzing-d71915e80ed0fb48/underfs/swift/src/main/java/alluxio/underfs/swift/http/SwiftDirectClient.java\\\",\\\"/tmp/analyzing-d71915e80ed0fb48/underfs/swift/src/main/java/alluxio/underfs/swift/SwiftInputStream.java\\\",\\\"/tmp/analyzing-d71915e80ed0fb48/underfs/swift/src/main/java/alluxio/underfs/swift/SwiftMockOutputStream.java\\\",\\\"/tmp/analyzing-d71915e80ed0fb48/underfs/swift/src/main/java/alluxio/underfs/swift/KeystoneV3Access.java\\\",\\\"/tmp/analyzing-d71915e80ed0fb48/underfs/swift/src/main/java/alluxio/underfs/swift/KeystoneV3AccessProvider.java\\\"],\\\"classpath\\\":[\\\"/tmp/analyzing-d71915e80ed0fb48/core/common/target/alluxio-core-common-2.1.0-SNAPSHOT.jar\\\",\\\"/root/.m2/repository/io/grpc/grpc-protobuf-lite/1.17.1/grpc-protobuf-lite-1.17.1.jar\\\",\\\"/root/.m2/repository/org/apache/httpcomponents/httpcore/4.4.6/httpcore-4.4.6.jar\\\",\\\"/root/.m2/repository/io/netty/netty-handler-proxy/4.1.30.Final/netty-handler-proxy-4.1.30.Final.jar\\\",\\\"/root/.m2/repository/org/hamcrest/hamcrest/2.1-rc4/hamcrest-2.1-rc4.jar\\\",\\\"/root/.m2/repository/org/javassist/javassist/3.18.2-GA/javassist-3.18.2-GA.jar\\\",\\\"/root/.m2/repository/com/google/errorprone/error_prone_annotations/2.2.0/error_prone_annotations-2.2.0.jar\\\",\\\"/root/.m2/repository/org/powermock/powermock-reflect/1.6.1/powermock-reflect-1.6.1.jar\\\",\\\"/root/.m2/repository/com/google/guava/guava-testlib/27.0.1-jre/guava-testlib-27.0.1-jre.jar\\\",\\\"/root/.m2/repository/org/powermock/powermock-api-mockito/1.6.1/powermock-api-mockito-1.6.1.jar\\\",\\\"/root/.m2/repository/org/codehaus/mojo/animal-sniffer-annotations/1.17/animal-sniffer-annotations-1.17.jar\\\",\\\"/tmp/analyzing-d71915e80ed0fb48/core/base/target/alluxio-core-base-2.1.0-SNAPSHOT.jar\\\",\\\"/root/.m2/repository/io/dropwizard/metrics/metrics-json/3.1.2/metrics-json-3.1.2.jar\\\",\\\"/root/.m2/repository/org/objenesis/objenesis/2.1/objenesis-2.1.jar\\\",\\\"/root/.m2/repository/org/apache/httpcomponents/httpclient/4.5.3/httpclient-4.5.3.jar\\\",\\\"/root/.m2/repository/org/apache/curator/curator-recipes/4.0.1/curator-recipes-4.0.1.jar\\\",\\\"/root/.m2/repository/io/netty/netty-handler/4.1.30.Final/netty-handler-4.1.30.Final.jar\\\",\\\"/root/.m2/repository/org/apache/curator/curator-framework/4.0.1/curator-framework-4.0.1.jar\\\",\\\"/root/.m2/repository/io/dropwizard/metrics/metrics-graphite/3.1.2/metrics-graphite-3.1.2.jar\\\",\\\"/root/.m2/repository/commons-httpclient/commons-httpclient/3.1/commons-httpclient-3.1.jar\\\",\\\"/root/.m2/repository/io/grpc/grpc-netty/1.17.1/grpc-netty-1.17.1.jar\\\",\\\"/root/.m2/repository/io/netty/netty-codec-http2/4.1.30.Final/netty-codec-http2-4.1.30.Final.jar\\\",\\\"/root/.m2/repository/org/slf4j/jcl-over-slf4j/1.7.2/jcl-over-slf4j-1.7.2.jar\\\",\\\"/root/.m2/repository/org/powermock/powermock-module-junit4-rule/1.6.1/powermock-module-junit4-rule-1.6.1.jar\\\",\\\"/root/.m2/repository/org/apache/zookeeper/zookeeper/3.4.6/zookeeper-3.4.6.jar\\\",\\\"/tmp/analyzing-d71915e80ed0fb48/core/transport/target/alluxio-core-transport-2.1.0-SNAPSHOT.jar\\\",\\\"/root/.m2/repository/com/google/j2objc/j2objc-annotations/1.1/j2objc-annotations-1.1.jar\\\",\\\"/root/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.9.7/jackson-core-2.9.7.jar\\\",\\\"/root/.m2/repository/org/apache/commons/commons-lang3/3.4/commons-lang3-3.4.jar\\\",\\\"/root/.m2/repository/com/google/guava/failureaccess/1.0.1/failureaccess-1.0.1.jar\\\",\\\"/root/.m2/repository/commons-codec/commons-codec/1.10/commons-codec-1.10.jar\\\",\\\"/root/.m2/repository/org/slf4j/slf4j-api/1.7.2/slf4j-api-1.7.2.jar\\\",\\\"/root/.m2/repository/io/opencensus/opencensus-api/0.17.0/opencensus-api-0.17.0.jar\\\",\\\"/root/.m2/repository/io/netty/netty-common/4.1.30.Final/netty-common-4.1.30.Final.jar\\\",\\\"/root/.m2/repository/com/google/api/grpc/proto-google-common-protos/1.0.0/proto-google-common-protos-1.0.0.jar\\\",\\\"/root/.m2/repository/io/grpc/grpc-core/1.17.1/grpc-core-1.17.1.jar\\\",\\\"/tmp/analyzing-d71915e80ed0fb48/core/common/target/alluxio-core-common-2.1.0-SNAPSHOT-tests.jar\\\",\\\"/root/.m2/repository/net/jcip/jcip-annotations/1.0/jcip-annotations-1.0.jar\\\",\\\"/root/.m2/repository/org/mockito/mockito-all/1.10.8/mockito-all-1.10.8.jar\\\",\\\"/root/.m2/repository/com/google/code/gson/gson/2.7/gson-2.7.jar\\\",\\\"/root/.m2/repository/io/netty/netty-resolver/4.1.30.Final/netty-resolver-4.1.30.Final.jar\\\",\\\"/root/.m2/repository/org/powermock/powermock-module-junit4-common/1.6.1/powermock-module-junit4-common-1.6.1.jar\\\",\\\"/root/.m2/repository/commons-cli/commons-cli/1.3.1/commons-cli-1.3.1.jar\\\",\\\"/root/.m2/repository/com/fasterxml/jackson/core/jackson-annotations/2.9.7/jackson-annotations-2.9.7.jar\\\",\\\"/root/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.9.7/jackson-databind-2.9.7.jar\\\",\\\"/root/.m2/repository/io/opencensus/opencensus-contrib-grpc-metrics/0.17.0/opencensus-contrib-grpc-metrics-0.17.0.jar\\\",\\\"/root/.m2/repository/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar\\\",\\\"/root/.m2/repository/io/dropwizard/metrics/metrics-core/3.1.2/metrics-core-3.1.2.jar\\\",\\\"/root/.m2/repository/io/dropwizard/metrics/metrics-jvm/3.1.2/metrics-jvm-3.1.2.jar\\\",\\\"/root/.m2/repository/com/google/code/findbugs/annotations/3.0.1/annotations-3.0.1.jar\\\",\\\"/root/.m2/repository/io/netty/netty-all/4.1.30.Final/netty-all-4.1.30.Final.jar\\\",\\\"/root/.m2/repository/org/javaswift/joss/0.9.10/joss-0.9.10.jar\\\",\\\"/root/.m2/repository/org/codehaus/jackson/jackson-core-asl/1.9.7/jackson-core-asl-1.9.7.jar\\\",\\\"/root/.m2/repository/org/powermock/powermock-api-support/1.6.1/powermock-api-support-1.6.1.jar\\\",\\\"/root/.m2/repository/io/netty/netty-codec/4.1.30.Final/netty-codec-4.1.30.Final.jar\\\",\\\"/root/.m2/repository/org/reflections/reflections/0.9.10/reflections-0.9.10.jar\\\",\\\"/root/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar\\\",\\\"/root/.m2/repository/commons-io/commons-io/2.4/commons-io-2.4.jar\\\",\\\"/root/.m2/repository/io/netty/netty-transport/4.1.30.Final/netty-transport-4.1.30.Final.jar\\\",\\\"/root/.m2/repository/org/slf4j/slf4j-log4j12/1.7.2/slf4j-log4j12-1.7.2.jar\\\",\\\"/root/.m2/repository/org/codehaus/jackson/jackson-mapper-asl/1.9.7/jackson-mapper-asl-1.9.7.jar\\\",\\\"/root/.m2/repository/io/netty/netty/3.7.0.Final/netty-3.7.0.Final.jar\\\",\\\"/root/.m2/repository/io/grpc/grpc-context/1.17.1/grpc-context-1.17.1.jar\\\",\\\"/root/.m2/repository/io/netty/netty-codec-socks/4.1.30.Final/netty-codec-socks-4.1.30.Final.jar\\\",\\\"/root/.m2/repository/io/swagger/swagger-annotations/1.5.22/swagger-annotations-1.5.22.jar\\\",\\\"/root/.m2/repository/io/netty/netty-codec-http/4.1.30.Final/netty-codec-http-4.1.30.Final.jar\\\",\\\"/root/.m2/repository/com/google/guava/guava/27.0.1-jre/guava-27.0.1-jre.jar\\\",\\\"/root/.m2/repository/io/netty/netty-buffer/4.1.30.Final/netty-buffer-4.1.30.Final.jar\\\",\\\"/root/.m2/repository/xmlpull/xmlpull/1.1.3.1/xmlpull-1.1.3.1.jar\\\",\\\"/root/.m2/repository/org/powermock/powermock-classloading-base/1.6.1/powermock-classloading-base-1.6.1.jar\\\",\\\"/root/.m2/repository/log4j/log4j/1.2.17/log4j-1.2.17.jar\\\",\\\"/root/.m2/repository/org/powermock/powermock-classloading-xstream/1.6.1/powermock-classloading-xstream-1.6.1.jar\\\",\\\"/root/.m2/repository/com/thoughtworks/xstream/xstream/1.4.2/xstream-1.4.2.jar\\\",\\\"/root/.m2/repository/io/grpc/grpc-protobuf/1.17.1/grpc-protobuf-1.17.1.jar\\\",\\\"/root/.m2/repository/commons-lang/commons-lang/2.6/commons-lang-2.6.jar\\\",\\\"/root/.m2/repository/com/google/protobuf/protobuf-java/3.5.1/protobuf-java-3.5.1.jar\\\",\\\"/root/.m2/repository/org/checkerframework/checker-qual/2.5.2/checker-qual-2.5.2.jar\\\",\\\"/root/.m2/repository/commons-logging/commons-logging/1.1.1/commons-logging-1.1.1.jar\\\",\\\"/root/.m2/repository/xpp3/xpp3_min/1.1.4c/xpp3_min-1.1.4c.jar\\\",\\\"/root/.m2/repository/org/powermock/powermock-module-junit4/1.6.1/powermock-module-junit4-1.6.1.jar\\\",\\\"/root/.m2/repository/com/google/guava/listenablefuture/9999.0-empty-to-avoid-conflict-with-guava/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar\\\",\\\"/root/.m2/repository/jline/jline/2.14.6/jline-2.14.6.jar\\\",\\\"/root/.m2/repository/junit/junit/4.12/junit-4.12.jar\\\",\\\"/root/.m2/repository/org/powermock/powermock-core/1.6.1/powermock-core-1.6.1.jar\\\",\\\"/root/.m2/repository/io/grpc/grpc-stub/1.17.1/grpc-stub-1.17.1.jar\\\",\\\"/root/.m2/repository/org/apache/curator/curator-client/4.0.1/curator-client-4.0.1.jar\\\"],\\\"output_dir\\\":\\\"/tmp/analyzing-d71915e80ed0fb48/underfs/swift/target/classes\\\",\\\"jdk\\\":\\\"JDK1.8\\\"},{\\\"arguments\\\":[\\\"-Xlint:none\\\"],\\\"files\\\":[\\\"/tmp/analyzing-d71915e80ed0fb48/underfs/wasb/src/main/java/alluxio/underfs/wasb/WasbUnderFileSystemFactory.java\\\",\\\"/tmp/analyzing-d71915e80ed0fb48/underfs/wasb/src/main/java/alluxio/underfs/wasb/WasbUnderFileSystem.java\\\"],\\\"classpath\\\":[\\\"/root/.m2/repository/com/squareup/okio/okio/1.4.0/okio-1.4.0.jar\\\",\\\"/root/.m2/repository/io/grpc/grpc-protobuf-lite/1.17.1/grpc-protobuf-lite-1.17.1.jar\\\",\\\"/root/.m2/repository/com/jcraft/jsch/0.1.54/jsch-0.1.54.jar\\\",\\\"/root/.m2/repository/org/hamcrest/hamcrest/2.1-rc4/hamcrest-2.1-rc4.jar\\\",\\\"/root/.m2/repository/org/apache/directory/api/api-asn1-api/1.0.0-M20/api-asn1-api-1.0.0-M20.jar\\\",\\\"/root/.m2/repository/org/powermock/powermock-reflect/1.6.1/powermock-reflect-1.6.1.jar\\\",\\\"/root/.m2/repository/org/mortbay/jetty/jetty-sslengine/6.1.26.hwx/jetty-sslengine-6.1.26.hwx.jar\\\",\\\"/root/.m2/repository/org/powermock/powermock-api-mockito/1.6.1/powermock-api-mockito-1.6.1.jar\\\",\\\"/root/.m2/repository/org/codehaus/mojo/animal-sniffer-annotations/1.17/animal-sniffer-annotations-1.17.jar\\\",\\\"/tmp/analyzing-d71915e80ed0fb48/core/base/target/alluxio-core-base-2.1.0-SNAPSHOT.jar\\\",\\\"/root/.m2/repository/org/codehaus/jackson/jackson-core-asl/1.9.13/jackson-core-asl-1.9.13.jar\\\",\\\"/root/.m2/repository/io/dropwizard/metrics/metrics-json/3.1.2/metrics-json-3.1.2.jar\\\",\\\"/root/.m2/repository/commons-beanutils/commons-beanutils-core/1.8.0/commons-beanutils-core-1.8.0.jar\\\",\\\"/root/.m2/repository/org/objenesis/objenesis/2.1/objenesis-2.1.jar\\\",\\\"/root/.m2/repository/io/dropwizard/metrics/metrics-graphite/3.1.2/metrics-graphite-3.1.2.jar\\\",\\\"/root/.m2/repository/org/fusesource/leveldbjni/leveldbjni-all/1.8/leveldbjni-all-1.8.jar\\\",\\\"/root/.m2/repository/commons-httpclient/commons-httpclient/3.1/commons-httpclient-3.1.jar\\\",\\\"/root/.m2/repository/org/apache/avro/avro/1.7.4/avro-1.7.4.jar\\\",\\\"/tmp/analyzing-d71915e80ed0fb48/core/transport/target/alluxio-core-transport-2.1.0-SNAPSHOT.jar\\\",\\\"/root/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.9.7/jackson-core-2.9.7.jar\\\",\\\"/root/.m2/repository/org/mortbay/jetty/jetty/6.1.26.hwx/jetty-6.1.26.hwx.jar\\\",\\\"/root/.m2/repository/commons-net/commons-net/3.1/commons-net-3.1.jar\\\",\\\"/root/.m2/repository/javax/servlet/jsp/jsp-api/2.1/jsp-api-2.1.jar\\\",\\\"/root/.m2/repository/org/slf4j/slf4j-api/1.7.2/slf4j-api-1.7.2.jar\\\",\\\"/root/.m2/repository/com/sun/xml/bind/jaxb-impl/2.2.3-1/jaxb-impl-2.2.3-1.jar\\\",\\\"/root/.m2/repository/io/netty/netty-common/4.1.30.Final/netty-common-4.1.30.Final.jar\\\",\\\"/root/.m2/repository/com/google/api/grpc/proto-google-common-protos/1.0.0/proto-google-common-protos-1.0.0.jar\\\",\\\"/root/.m2/repository/org/apache/commons/commons-math3/3.1.1/commons-math3-3.1.1.jar\\\",\\\"/root/.m2/repository/javax/activation/activation/1.1/activation-1.1.jar\\\",\\\"/root/.m2/repository/org/mockito/mockito-all/1.10.8/mockito-all-1.10.8.jar\\\",\\\"/root/.m2/repository/org/apache/directory/api/api-util/1.0.0-M20/api-util-1.0.0-M20.jar\\\",\\\"/root/.m2/repository/io/netty/netty-resolver/4.1.30.Final/netty-resolver-4.1.30.Final.jar\\\",\\\"/root/.m2/repository/org/powermock/powermock-module-junit4-common/1.6.1/powermock-module-junit4-common-1.6.1.jar\\\",\\\"/root/.m2/repository/javax/servlet/servlet-api/2.5/servlet-api-2.5.jar\\\",\\\"/root/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.9.7/jackson-databind-2.9.7.jar\\\",\\\"/root/.m2/repository/io/opencensus/opencensus-contrib-grpc-metrics/0.17.0/opencensus-contrib-grpc-metrics-0.17.0.jar\\\",\\\"/root/.m2/repository/io/dropwizard/metrics/metrics-core/3.1.2/metrics-core-3.1.2.jar\\\",\\\"/root/.m2/repository/io/netty/netty-all/4.1.30.Final/netty-all-4.1.30.Final.jar\\\",\\\"/root/.m2/repository/com/sun/jersey/jersey-server/1.9/jersey-server-1.9.jar\\\",\\\"/root/.m2/repository/io/netty/netty-codec/4.1.30.Final/netty-codec-4.1.30.Final.jar\\\",\\\"/root/.m2/repository/commons-configuration/commons-configuration/1.6/commons-configuration-1.6.jar\\\",\\\"/root/.m2/repository/net/minidev/json-smart/1.1.1/json-smart-1.1.1.jar\\\",\\\"/root/.m2/repository/org/reflections/reflections/0.9.10/reflections-0.9.10.jar\\\",\\\"/root/.m2/repository/com/google/code/gson/gson/2.2.4/gson-2.2.4.jar\\\",\\\"/root/.m2/repository/commons-io/commons-io/2.4/commons-io-2.4.jar\\\",\\\"/root/.m2/repository/org/slf4j/slf4j-log4j12/1.7.2/slf4j-log4j12-1.7.2.jar\\\",\\\"/root/.m2/repository/org/codehaus/jettison/jettison/1.1/jettison-1.1.jar\\\",\\\"/root/.m2/repository/com/jamesmurty/utils/java-xmlbuilder/0.4/java-xmlbuilder-0.4.jar\\\",\\\"/root/.m2/repository/org/apache/directory/server/apacheds-kerberos-codec/2.0.0-M15/apacheds-kerberos-codec-2.0.0-M15.jar\\\",\\\"/root/.m2/repository/commons-digester/commons-digester/1.8/commons-digester-1.8.jar\\\",\\\"/root/.m2/repository/io/swagger/swagger-annotations/1.5.22/swagger-annotations-1.5.22.jar\\\",\\\"/root/.m2/repository/io/netty/netty-codec-http/4.1.30.Final/netty-codec-http-4.1.30.Final.jar\\\",\\\"/root/.m2/repository/xmlpull/xmlpull/1.1.3.1/xmlpull-1.1.3.1.jar\\\",\\\"/root/.m2/repository/com/microsoft/azure/azure-storage/4.2.0/azure-storage-4.2.0.jar\\\",\\\"/root/.m2/repository/org/powermock/powermock-classloading-base/1.6.1/powermock-classloading-base-1.6.1.jar\\\",\\\"/root/.m2/repository/org/xerial/snappy/snappy-java/1.0.4.1/snappy-java-1.0.4.1.jar\\\",\\\"/root/.m2/repository/com/squareup/okhttp/okhttp/2.4.0/okhttp-2.4.0.jar\\\",\\\"/root/.m2/repository/javax/xml/stream/stax-api/1.0-2/stax-api-1.0-2.jar\\\",\\\"/root/.m2/repository/org/checkerframework/checker-qual/2.5.2/checker-qual-2.5.2.jar\\\",\\\"/root/.m2/repository/xpp3/xpp3_min/1.1.4c/xpp3_min-1.1.4c.jar\\\",\\\"/root/.m2/repository/org/powermock/powermock-module-junit4/1.6.1/powermock-module-junit4-1.6.1.jar\\\",\\\"/root/.m2/repository/com/google/guava/listenablefuture/9999.0-empty-to-avoid-conflict-with-guava/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar\\\",\\\"/root/.m2/repository/org/apache/hadoop/hadoop-azure/2.7.3.2.6.1.0-129/hadoop-azure-2.7.3.2.6.1.0-129.jar\\\",\\\"/root/.m2/repository/io/grpc/grpc-stub/1.17.1/grpc-stub-1.17.1.jar\\\",\\\"/root/.m2/repository/com/microsoft/azure/azure-keyvault-core/0.8.0/azure-keyvault-core-0.8.0.jar\\\",\\\"/tmp/analyzing-d71915e80ed0fb48/shaded/hadoop/target/alluxio-shaded-hadoop-2.2.0.jar\\\",\\\"/root/.m2/repository/org/apache/curator/curator-client/4.0.1/curator-client-4.0.1.jar\\\",\\\"/tmp/analyzing-d71915e80ed0fb48/core/common/target/alluxio-core-common-2.1.0-SNAPSHOT.jar\\\",\\\"/root/.m2/repository/org/apache/httpcomponents/httpcore/4.4.6/httpcore-4.4.6.jar\\\",\\\"/root/.m2/repository/io/netty/netty-handler-proxy/4.1.30.Final/netty-handler-proxy-4.1.30.Final.jar\\\",\\\"/root/.m2/repository/org/javassist/javassist/3.18.2-GA/javassist-3.18.2-GA.jar\\\",\\\"/root/.m2/repository/com/google/errorprone/error_prone_annotations/2.2.0/error_prone_annotations-2.2.0.jar\\\",\\\"/root/.m2/repository/com/google/guava/guava-testlib/27.0.1-jre/guava-testlib-27.0.1-jre.jar\\\",\\\"/tmp/analyzing-d71915e80ed0fb48/underfs/hdfs/target/alluxio-underfs-hdfs-2.1.0-SNAPSHOT.jar\\\",\\\"/root/.m2/repository/net/java/dev/jets3t/jets3t/0.8.1/jets3t-0.8.1.jar\\\",\\\"/root/.m2/repository/org/apache/hadoop/hadoop-hdfs/2.7.3.2.6.1.0-129/hadoop-hdfs-2.7.3.2.6.1.0-129.jar\\\",\\\"/root/.m2/repository/org/mortbay/jetty/jetty-util/6.1.26.hwx/jetty-util-6.1.26.hwx.jar\\\",\\\"/root/.m2/repository/javax/xml/bind/jaxb-api/2.2.2/jaxb-api-2.2.2.jar\\\",\\\"/root/.m2/repository/com/thoughtworks/paranamer/paranamer/2.3/paranamer-2.3.jar\\\",\\\"/root/.m2/repository/org/apache/hadoop/hadoop-common/2.7.3.2.6.1.0-129/hadoop-common-2.7.3.2.6.1.0-129.jar\\\",\\\"/root/.m2/repository/org/apache/httpcomponents/httpclient/4.5.3/httpclient-4.5.3.jar\\\",\\\"/root/.m2/repository/commons-collections/commons-collections/3.2.2/commons-collections-3.2.2.jar\\\",\\\"/root/.m2/repository/org/apache/curator/curator-recipes/4.0.1/curator-recipes-4.0.1.jar\\\",\\\"/root/.m2/repository/io/netty/netty-handler/4.1.30.Final/netty-handler-4.1.30.Final.jar\\\",\\\"/root/.m2/repository/org/apache/curator/curator-framework/4.0.1/curator-framework-4.0.1.jar\\\",\\\"/root/.m2/repository/org/apache/htrace/htrace-core/3.1.0-incubating/htrace-core-3.1.0-incubating.jar\\\",\\\"/root/.m2/repository/io/netty/netty/3.6.2.Final/netty-3.6.2.Final.jar\\\",\\\"/root/.m2/repository/org/apache/commons/commons-compress/1.16.1/commons-compress-1.16.1.jar\\\",\\\"/root/.m2/repository/io/grpc/grpc-netty/1.17.1/grpc-netty-1.17.1.jar\\\",\\\"/root/.m2/repository/io/netty/netty-codec-http2/4.1.30.Final/netty-codec-http2-4.1.30.Final.jar\\\",\\\"/root/.m2/repository/org/powermock/powermock-module-junit4-rule/1.6.1/powermock-module-junit4-rule-1.6.1.jar\\\",\\\"/root/.m2/repository/com/nimbusds/nimbus-jose-jwt/3.9/nimbus-jose-jwt-3.9.jar\\\",\\\"/root/.m2/repository/org/apache/zookeeper/zookeeper/3.4.6/zookeeper-3.4.6.jar\\\",\\\"/root/.m2/repository/com/google/j2objc/j2objc-annotations/1.1/j2objc-annotations-1.1.jar\\\",\\\"/root/.m2/repository/asm/asm/3.1/asm-3.1.jar\\\",\\\"/root/.m2/repository/org/apache/commons/commons-lang3/3.4/commons-lang3-3.4.jar\\\",\\\"/root/.m2/repository/com/google/guava/failureaccess/1.0.1/failureaccess-1.0.1.jar\\\",\\\"/root/.m2/repository/commons-codec/commons-codec/1.10/commons-codec-1.10.jar\\\",\\\"/root/.m2/repository/io/opencensus/opencensus-api/0.17.0/opencensus-api-0.17.0.jar\\\",\\\"/usr/lib/jvm/java-8-openjdk-amd64/jre/../lib/tools.jar\\\",\\\"/root/.m2/repository/io/grpc/grpc-core/1.17.1/grpc-core-1.17.1.jar\\\",\\\"/tmp/analyzing-d71915e80ed0fb48/core/common/target/alluxio-core-common-2.1.0-SNAPSHOT-tests.jar\\\",\\\"/root/.m2/repository/net/jcip/jcip-annotations/1.0/jcip-annotations-1.0.jar\\\",\\\"/root/.m2/repository/commons-cli/commons-cli/1.3.1/commons-cli-1.3.1.jar\\\",\\\"/root/.m2/repository/com/fasterxml/jackson/core/jackson-annotations/2.9.7/jackson-annotations-2.9.7.jar\\\",\\\"/root/.m2/repository/com/google/code/findbugs/jsr305/3.0.0/jsr305-3.0.0.jar\\\",\\\"/root/.m2/repository/io/dropwizard/metrics/metrics-jvm/3.1.2/metrics-jvm-3.1.2.jar\\\",\\\"/root/.m2/repository/com/google/code/findbugs/annotations/3.0.1/annotations-3.0.1.jar\\\",\\\"/root/.m2/repository/org/apache/directory/server/apacheds-i18n/2.0.0-M15/apacheds-i18n-2.0.0-M15.jar\\\",\\\"/root/.m2/repository/org/powermock/powermock-api-support/1.6.1/powermock-api-support-1.6.1.jar\\\",\\\"/root/.m2/repository/xml-apis/xml-apis/1.3.04/xml-apis-1.3.04.jar\\\",\\\"/root/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar\\\",\\\"/root/.m2/repository/xerces/xercesImpl/2.9.1/xercesImpl-2.9.1.jar\\\",\\\"/root/.m2/repository/io/netty/netty-transport/4.1.30.Final/netty-transport-4.1.30.Final.jar\\\",\\\"/root/.m2/repository/xmlenc/xmlenc/0.52/xmlenc-0.52.jar\\\",\\\"/root/.m2/repository/org/codehaus/jackson/jackson-jaxrs/1.8.3/jackson-jaxrs-1.8.3.jar\\\",\\\"/root/.m2/repository/com/sun/jersey/jersey-core/1.9/jersey-core-1.9.jar\\\",\\\"/root/.m2/repository/com/sun/jersey/jersey-json/1.9/jersey-json-1.9.jar\\\",\\\"/root/.m2/repository/io/grpc/grpc-context/1.17.1/grpc-context-1.17.1.jar\\\",\\\"/root/.m2/repository/io/netty/netty-codec-socks/4.1.30.Final/netty-codec-socks-4.1.30.Final.jar\\\",\\\"/root/.m2/repository/com/google/guava/guava/27.0.1-jre/guava-27.0.1-jre.jar\\\",\\\"/root/.m2/repository/io/netty/netty-buffer/4.1.30.Final/netty-buffer-4.1.30.Final.jar\\\",\\\"/root/.m2/repository/org/codehaus/jackson/jackson-xc/1.8.3/jackson-xc-1.8.3.jar\\\",\\\"/root/.m2/repository/log4j/log4j/1.2.17/log4j-1.2.17.jar\\\",\\\"/root/.m2/repository/org/powermock/powermock-classloading-xstream/1.6.1/powermock-classloading-xstream-1.6.1.jar\\\",\\\"/root/.m2/repository/com/thoughtworks/xstream/xstream/1.4.2/xstream-1.4.2.jar\\\",\\\"/root/.m2/repository/io/grpc/grpc-protobuf/1.17.1/grpc-protobuf-1.17.1.jar\\\",\\\"/root/.m2/repository/commons-lang/commons-lang/2.6/commons-lang-2.6.jar\\\",\\\"/root/.m2/repository/org/apache/hadoop/hadoop-annotations/2.7.3.2.6.1.0-129/hadoop-annotations-2.7.3.2.6.1.0-129.jar\\\",\\\"/root/.m2/repository/org/codehaus/jackson/jackson-mapper-asl/1.9.13/jackson-mapper-asl-1.9.13.jar\\\",\\\"/root/.m2/repository/commons-daemon/commons-daemon/1.0.13/commons-daemon-1.0.13.jar\\\",\\\"/root/.m2/repository/com/google/protobuf/protobuf-java/3.5.1/protobuf-java-3.5.1.jar\\\",\\\"/root/.m2/repository/commons-logging/commons-logging/1.1.1/commons-logging-1.1.1.jar\\\",\\\"/root/.m2/repository/commons-beanutils/commons-beanutils/1.7.0/commons-beanutils-1.7.0.jar\\\",\\\"/root/.m2/repository/junit/junit/4.12/junit-4.12.jar\\\",\\\"/root/.m2/repository/org/powermock/powermock-core/1.6.1/powermock-core-1.6.1.jar\\\",\\\"/root/.m2/repository/org/apache/hadoop/hadoop-auth/2.7.3.2.6.1.0-129/hadoop-auth-2.7.3.2.6.1.0-129.jar\\\"],\\\"output_dir\\\":\\\"/tmp/analyzing-d71915e80ed0fb48/underfs/wasb/target/classes\\\",\\\"jdk\\\":\\\"JDK1.8\\\"},{\\\"arguments\\\":[\\\"-Xlint:none\\\"],\\\"files\\\":[\\\"/tmp/analyzing-d71915e80ed0fb48/underfs/web/src/main/java/alluxio/underfs/web/WebUnderFileSystem.java\\\",\\\"/tmp/analyzing-d71915e80ed0fb48/underfs/web/src/main/java/alluxio/underfs/web/WebUnderFileSystemFactory.java\\\"],\\\"classpath\\\":[\\\"/tmp/analyzing-d71915e80ed0fb48/core/common/target/alluxio-core-common-2.1.0-SNAPSHOT.jar\\\",\\\"/root/.m2/repository/io/grpc/grpc-protobuf-lite/1.17.1/grpc-protobuf-lite-1.17.1.jar\\\",\\\"/root/.m2/repository/io/netty/netty-handler-proxy/4.1.30.Final/netty-handler-proxy-4.1.30.Final.jar\\\",\\\"/root/.m2/repository/org/hamcrest/hamcrest/2.1-rc4/hamcrest-2.1-rc4.jar\\\",\\\"/root/.m2/repository/org/javassist/javassist/3.18.2-GA/javassist-3.18.2-GA.jar\\\",\\\"/root/.m2/repository/com/google/errorprone/error_prone_annotations/2.2.0/error_prone_annotations-2.2.0.jar\\\",\\\"/root/.m2/repository/org/powermock/powermock-reflect/1.6.1/powermock-reflect-1.6.1.jar\\\",\\\"/root/.m2/repository/com/google/guava/guava-testlib/27.0.1-jre/guava-testlib-27.0.1-jre.jar\\\",\\\"/root/.m2/repository/org/powermock/powermock-api-mockito/1.6.1/powermock-api-mockito-1.6.1.jar\\\",\\\"/root/.m2/repository/org/codehaus/mojo/animal-sniffer-annotations/1.17/animal-sniffer-annotations-1.17.jar\\\",\\\"/tmp/analyzing-d71915e80ed0fb48/core/base/target/alluxio-core-base-2.1.0-SNAPSHOT.jar\\\",\\\"/root/.m2/repository/io/dropwizard/metrics/metrics-json/3.1.2/metrics-json-3.1.2.jar\\\",\\\"/root/.m2/repository/org/objenesis/objenesis/2.1/objenesis-2.1.jar\\\",\\\"/root/.m2/repository/org/apache/curator/curator-recipes/4.0.1/curator-recipes-4.0.1.jar\\\",\\\"/root/.m2/repository/io/netty/netty-handler/4.1.30.Final/netty-handler-4.1.30.Final.jar\\\",\\\"/root/.m2/repository/org/apache/curator/curator-framework/4.0.1/curator-framework-4.0.1.jar\\\",\\\"/root/.m2/repository/io/dropwizard/metrics/metrics-graphite/3.1.2/metrics-graphite-3.1.2.jar\\\",\\\"/root/.m2/repository/commons-httpclient/commons-httpclient/3.1/commons-httpclient-3.1.jar\\\",\\\"/root/.m2/repository/io/grpc/grpc-netty/1.17.1/grpc-netty-1.17.1.jar\\\",\\\"/root/.m2/repository/io/netty/netty-codec-http2/4.1.30.Final/netty-codec-http2-4.1.30.Final.jar\\\",\\\"/root/.m2/repository/org/powermock/powermock-module-junit4-rule/1.6.1/powermock-module-junit4-rule-1.6.1.jar\\\",\\\"/root/.m2/repository/org/apache/zookeeper/zookeeper/3.4.6/zookeeper-3.4.6.jar\\\",\\\"/tmp/analyzing-d71915e80ed0fb48/core/transport/target/alluxio-core-transport-2.1.0-SNAPSHOT.jar\\\",\\\"/root/.m2/repository/com/google/j2objc/j2objc-annotations/1.1/j2objc-annotations-1.1.jar\\\",\\\"/root/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.9.7/jackson-core-2.9.7.jar\\\",\\\"/root/.m2/repository/org/apache/commons/commons-lang3/3.4/commons-lang3-3.4.jar\\\",\\\"/root/.m2/repository/com/google/guava/failureaccess/1.0.1/failureaccess-1.0.1.jar\\\",\\\"/root/.m2/repository/commons-codec/commons-codec/1.10/commons-codec-1.10.jar\\\",\\\"/root/.m2/repository/org/slf4j/slf4j-api/1.7.2/slf4j-api-1.7.2.jar\\\",\\\"/root/.m2/repository/io/opencensus/opencensus-api/0.17.0/opencensus-api-0.17.0.jar\\\",\\\"/root/.m2/repository/io/netty/netty-common/4.1.30.Final/netty-common-4.1.30.Final.jar\\\",\\\"/root/.m2/repository/com/google/api/grpc/proto-google-common-protos/1.0.0/proto-google-common-protos-1.0.0.jar\\\",\\\"/root/.m2/repository/org/jsoup/jsoup/1.8.3/jsoup-1.8.3.jar\\\",\\\"/root/.m2/repository/io/grpc/grpc-core/1.17.1/grpc-core-1.17.1.jar\\\",\\\"/root/.m2/repository/net/jcip/jcip-annotations/1.0/jcip-annotations-1.0.jar\\\",\\\"/root/.m2/repository/org/mockito/mockito-all/1.10.8/mockito-all-1.10.8.jar\\\",\\\"/root/.m2/repository/com/google/code/gson/gson/2.7/gson-2.7.jar\\\",\\\"/root/.m2/repository/io/netty/netty-resolver/4.1.30.Final/netty-resolver-4.1.30.Final.jar\\\",\\\"/root/.m2/repository/org/powermock/powermock-module-junit4-common/1.6.1/powermock-module-junit4-common-1.6.1.jar\\\",\\\"/root/.m2/repository/commons-cli/commons-cli/1.3.1/commons-cli-1.3.1.jar\\\",\\\"/root/.m2/repository/com/fasterxml/jackson/core/jackson-annotations/2.9.7/jackson-annotations-2.9.7.jar\\\",\\\"/root/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.9.7/jackson-databind-2.9.7.jar\\\",\\\"/root/.m2/repository/io/opencensus/opencensus-contrib-grpc-metrics/0.17.0/opencensus-contrib-grpc-metrics-0.17.0.jar\\\",\\\"/root/.m2/repository/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar\\\",\\\"/root/.m2/repository/io/dropwizard/metrics/metrics-core/3.1.2/metrics-core-3.1.2.jar\\\",\\\"/root/.m2/repository/io/dropwizard/metrics/metrics-jvm/3.1.2/metrics-jvm-3.1.2.jar\\\",\\\"/root/.m2/repository/com/google/code/findbugs/annotations/3.0.1/annotations-3.0.1.jar\\\",\\\"/root/.m2/repository/io/netty/netty-all/4.1.30.Final/netty-all-4.1.30.Final.jar\\\",\\\"/root/.m2/repository/org/powermock/powermock-api-support/1.6.1/powermock-api-support-1.6.1.jar\\\",\\\"/root/.m2/repository/io/netty/netty-codec/4.1.30.Final/netty-codec-4.1.30.Final.jar\\\",\\\"/root/.m2/repository/org/reflections/reflections/0.9.10/reflections-0.9.10.jar\\\",\\\"/root/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar\\\",\\\"/root/.m2/repository/commons-io/commons-io/2.4/commons-io-2.4.jar\\\",\\\"/root/.m2/repository/io/netty/netty-transport/4.1.30.Final/netty-transport-4.1.30.Final.jar\\\",\\\"/root/.m2/repository/org/slf4j/slf4j-log4j12/1.7.2/slf4j-log4j12-1.7.2.jar\\\",\\\"/root/.m2/repository/io/netty/netty/3.7.0.Final/netty-3.7.0.Final.jar\\\",\\\"/root/.m2/repository/io/grpc/grpc-context/1.17.1/grpc-context-1.17.1.jar\\\",\\\"/root/.m2/repository/io/netty/netty-codec-socks/4.1.30.Final/netty-codec-socks-4.1.30.Final.jar\\\",\\\"/root/.m2/repository/io/swagger/swagger-annotations/1.5.22/swagger-annotations-1.5.22.jar\\\",\\\"/root/.m2/repository/io/netty/netty-codec-http/4.1.30.Final/netty-codec-http-4.1.30.Final.jar\\\",\\\"/root/.m2/repository/com/google/guava/guava/27.0.1-jre/guava-27.0.1-jre.jar\\\",\\\"/root/.m2/repository/io/netty/netty-buffer/4.1.30.Final/netty-buffer-4.1.30.Final.jar\\\",\\\"/root/.m2/repository/xmlpull/xmlpull/1.1.3.1/xmlpull-1.1.3.1.jar\\\",\\\"/root/.m2/repository/org/powermock/powermock-classloading-base/1.6.1/powermock-classloading-base-1.6.1.jar\\\",\\\"/root/.m2/repository/log4j/log4j/1.2.17/log4j-1.2.17.jar\\\",\\\"/root/.m2/repository/org/powermock/powermock-classloading-xstream/1.6.1/powermock-classloading-xstream-1.6.1.jar\\\",\\\"/root/.m2/repository/com/thoughtworks/xstream/xstream/1.4.2/xstream-1.4.2.jar\\\",\\\"/root/.m2/repository/io/grpc/grpc-protobuf/1.17.1/grpc-protobuf-1.17.1.jar\\\",\\\"/root/.m2/repository/commons-lang/commons-lang/2.6/commons-lang-2.6.jar\\\",\\\"/root/.m2/repository/com/google/protobuf/protobuf-java/3.5.1/protobuf-java-3.5.1.jar\\\",\\\"/root/.m2/repository/org/checkerframework/checker-qual/2.5.2/checker-qual-2.5.2.jar\\\",\\\"/root/.m2/repository/commons-logging/commons-logging/1.1.1/commons-logging-1.1.1.jar\\\",\\\"/root/.m2/repository/xpp3/xpp3_min/1.1.4c/xpp3_min-1.1.4c.jar\\\",\\\"/root/.m2/repository/org/powermock/powermock-module-junit4/1.6.1/powermock-module-junit4-1.6.1.jar\\\",\\\"/root/.m2/repository/com/google/guava/listenablefuture/9999.0-empty-to-avoid-conflict-with-guava/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar\\\",\\\"/root/.m2/repository/jline/jline/2.14.6/jline-2.14.6.jar\\\",\\\"/root/.m2/repository/junit/junit/4.12/junit-4.12.jar\\\",\\\"/root/.m2/repository/org/powermock/powermock-core/1.6.1/powermock-core-1.6.1.jar\\\",\\\"/root/.m2/repository/io/grpc/grpc-stub/1.17.1/grpc-stub-1.17.1.jar\\\",\\\"/root/.m2/repository/org/apache/curator/curator-client/4.0.1/curator-client-4.0.1.jar\\\"],\\\"output_dir\\\":\\\"/tmp/analyzing-d71915e80ed0fb48/underfs/web/target/classes\\\",\\\"jdk\\\":\\\"JDK1.8\\\"}]\"\n[DEBUG] [28/Jun/2019:14:18:01 +0000] [()] Done generating compilation database.\n[DEBUG] [28/Jun/2019:14:18:01 +0000] [()] Trying to autodetect the build system based on files present in the repository.\n[DEBUG] [28/Jun/2019:14:18:01 +0000] [()] Errorprone JDK1.8 and jceJDK \"JDK1.8\" are compatible.\n[DEBUG] [28/Jun/2019:14:54:09 +0000] [()] Tool completed with 1221 but only reporting up to 1200.\n[DEBUG] [28/Jun/2019:14:57:00 +0000] [()] Per file run failed on entry \n    ( JavaCompEntry\n        { jceJDK = \"JDK1.8\"\n        , jceClasspath =\n            [ \"/root/.m2/repository/io/grpc/grpc-protobuf-lite/1.17.1/grpc-protobuf-lite-1.17.1.jar\"\n            , \"/root/.m2/repository/org/glassfish/web/javax.servlet.jsp/2.3.2/javax.servlet.jsp-2.3.2.jar\"\n            , \"/root/.m2/repository/org/hamcrest/hamcrest/2.1-rc4/hamcrest-2.1-rc4.jar\"\n            , \"/root/.m2/repository/org/powermock/powermock-reflect/1.6.1/powermock-reflect-1.6.1.jar\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/common/target/alluxio-core-server-common-2.1.0-SNAPSHOT.jar\"\n            , \"/root/.m2/repository/org/ow2/asm/asm/5.0.4/asm-5.0.4.jar\"\n            , \"/root/.m2/repository/org/powermock/powermock-api-mockito/1.6.1/powermock-api-mockito-1.6.1.jar\"\n            , \"/root/.m2/repository/org/codehaus/mojo/animal-sniffer-annotations/1.17/animal-sniffer-annotations-1.17.jar\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/base/target/alluxio-core-base-2.1.0-SNAPSHOT.jar\"\n            , \"/root/.m2/repository/javax/ws/rs/javax.ws.rs-api/2.0.1/javax.ws.rs-api-2.0.1.jar\"\n            , \"/root/.m2/repository/org/eclipse/jetty/jetty-servlet/9.2.16.v20160414/jetty-servlet-9.2.16.v20160414.jar\"\n            , \"/root/.m2/repository/org/eclipse/jetty/toolchain/jetty-schemas/3.1.M0/jetty-schemas-3.1.M0.jar\"\n            , \"/root/.m2/repository/io/dropwizard/metrics/metrics-json/3.1.2/metrics-json-3.1.2.jar\"\n            , \"/root/.m2/repository/org/eclipse/jetty/jetty-util/9.2.16.v20160414/jetty-util-9.2.16.v20160414.jar\"\n            , \"/root/.m2/repository/org/objenesis/objenesis/2.1/objenesis-2.1.jar\"\n            , \"/root/.m2/repository/javax/servlet/javax.servlet-api/3.1.0/javax.servlet-api-3.1.0.jar\"\n            , \"/root/.m2/repository/org/glassfish/web/javax.servlet.jsp.jstl/1.2.2/javax.servlet.jsp.jstl-1.2.2.jar\"\n            , \"/root/.m2/repository/io/dropwizard/metrics/metrics-graphite/3.1.2/metrics-graphite-3.1.2.jar\"\n            , \"/root/.m2/repository/commons-httpclient/commons-httpclient/3.1/commons-httpclient-3.1.jar\"\n            , \"/root/.m2/repository/org/eclipse/jetty/jetty-io/9.2.16.v20160414/jetty-io-9.2.16.v20160414.jar\"\n            , \"/root/.m2/repository/com/google/protobuf/protobuf-java-util/3.3.0/protobuf-java-util-3.3.0.jar\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/transport/target/alluxio-core-transport-2.1.0-SNAPSHOT.jar\"\n            , \"/root/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.9.7/jackson-core-2.9.7.jar\"\n            , \"/root/.m2/repository/io/netty/netty-transport/4.1.5.Final/netty-transport-4.1.5.Final.jar\"\n            , \"/root/.m2/repository/org/slf4j/slf4j-api/1.7.2/slf4j-api-1.7.2.jar\"\n            , \"/root/.m2/repository/org/glassfish/hk2/hk2-utils/2.4.0-b31/hk2-utils-2.4.0-b31.jar\"\n            , \"/root/.m2/repository/com/google/api/grpc/proto-google-common-protos/1.0.0/proto-google-common-protos-1.0.0.jar\"\n            , \"/root/.m2/repository/com/hubspot/jackson/jackson-datatype-protobuf/0.9.10-jackson2.9-proto3/jackson-datatype-protobuf-0.9.10-jackson2.9-proto3.jar\"\n            , \"/root/.m2/repository/org/mockito/mockito-all/1.10.8/mockito-all-1.10.8.jar\"\n            , \"/root/.m2/repository/com/google/code/gson/gson/2.7/gson-2.7.jar\"\n            , \"/root/.m2/repository/io/prometheus/simpleclient/0.3.0/simpleclient-0.3.0.jar\"\n            , \"/root/.m2/repository/com/esotericsoftware/kryo/4.0.2/kryo-4.0.2.jar\"\n            , \"/root/.m2/repository/org/powermock/powermock-module-junit4-common/1.6.1/powermock-module-junit4-common-1.6.1.jar\"\n            , \"/root/.m2/repository/org/eclipse/jetty/jetty-http/9.2.16.v20160414/jetty-http-9.2.16.v20160414.jar\"\n            , \"/root/.m2/repository/io/netty/netty-codec/4.1.5.Final/netty-codec-4.1.5.Final.jar\"\n            , \"/root/.m2/repository/io/netty/netty-resolver/4.1.5.Final/netty-resolver-4.1.5.Final.jar\"\n            , \"/root/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.9.7/jackson-databind-2.9.7.jar\"\n            , \"/root/.m2/repository/javax/annotation/javax.annotation-api/1.2/javax.annotation-api-1.2.jar\"\n            , \"/root/.m2/repository/io/opencensus/opencensus-contrib-grpc-metrics/0.17.0/opencensus-contrib-grpc-metrics-0.17.0.jar\"\n            , \"/root/.m2/repository/io/dropwizard/metrics/metrics-core/3.1.2/metrics-core-3.1.2.jar\"\n            , \"/root/.m2/repository/org/eclipse/jetty/jetty-webapp/9.2.16.v20160414/jetty-webapp-9.2.16.v20160414.jar\"\n            , \"/root/.m2/repository/io/netty/netty-all/4.1.30.Final/netty-all-4.1.30.Final.jar\"\n            , \"/root/.m2/repository/org/glassfish/hk2/osgi-resource-locator/1.0.1/osgi-resource-locator-1.0.1.jar\"\n            , \"/root/.m2/repository/org/reflections/reflections/0.9.10/reflections-0.9.10.jar\"\n            , \"/root/.m2/repository/commons-io/commons-io/2.4/commons-io-2.4.jar\"\n            , \"/root/.m2/repository/com/beust/jcommander/1.48/jcommander-1.48.jar\"\n            , \"/root/.m2/repository/org/slf4j/slf4j-log4j12/1.7.2/slf4j-log4j12-1.7.2.jar\"\n            , \"/root/.m2/repository/io/netty/netty/3.7.0.Final/netty-3.7.0.Final.jar\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/client/fs/target/alluxio-core-client-fs-2.1.0-SNAPSHOT.jar\"\n            , \"/root/.m2/repository/io/swagger/swagger-annotations/1.5.22/swagger-annotations-1.5.22.jar\"\n            , \"/root/.m2/repository/io/netty/netty-codec-http/4.1.30.Final/netty-codec-http-4.1.30.Final.jar\"\n            , \"/root/.m2/repository/org/glassfish/jersey/bundles/repackaged/jersey-guava/2.22/jersey-guava-2.22.jar\"\n            , \"/root/.m2/repository/io/atomix/catalyst/catalyst-concurrent/1.2.1/catalyst-concurrent-1.2.1.jar\"\n            , \"/root/.m2/repository/xmlpull/xmlpull/1.1.3.1/xmlpull-1.1.3.1.jar\"\n            , \"/root/.m2/repository/io/atomix/catalyst/catalyst-common/1.2.1/catalyst-common-1.2.1.jar\"\n            , \"/root/.m2/repository/javax/servlet/jsp/javax.servlet.jsp-api/2.3.1/javax.servlet.jsp-api-2.3.1.jar\"\n            , \"/root/.m2/repository/org/powermock/powermock-classloading-base/1.6.1/powermock-classloading-base-1.6.1.jar\"\n            , \"/root/.m2/repository/org/glassfish/hk2/external/aopalliance-repackaged/2.4.0-b31/aopalliance-repackaged-2.4.0-b31.jar\"\n            , \"/root/.m2/repository/io/atomix/copycat/alluxio/copycat-client/1.2.12/copycat-client-1.2.12.jar\"\n            , \"/root/.m2/repository/org/checkerframework/checker-qual/2.5.2/checker-qual-2.5.2.jar\"\n            , \"/root/.m2/repository/xpp3/xpp3_min/1.1.4c/xpp3_min-1.1.4c.jar\"\n            , \"/root/.m2/repository/org/powermock/powermock-module-junit4/1.6.1/powermock-module-junit4-1.6.1.jar\"\n            , \"/root/.m2/repository/com/google/guava/listenablefuture/9999.0-empty-to-avoid-conflict-with-guava/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar\"\n            , \"/root/.m2/repository/jline/jline/2.14.6/jline-2.14.6.jar\"\n            , \"/root/.m2/repository/io/atomix/catalyst/catalyst-serializer/1.2.1/catalyst-serializer-1.2.1.jar\"\n            , \"/root/.m2/repository/io/prometheus/simpleclient_common/0.3.0/simpleclient_common-0.3.0.jar\"\n            , \"/root/.m2/repository/io/atomix/catalyst/catalyst-buffer/1.2.1/catalyst-buffer-1.2.1.jar\"\n            , \"/root/.m2/repository/io/grpc/grpc-stub/1.17.1/grpc-stub-1.17.1.jar\"\n            , \"/root/.m2/repository/org/glassfish/hk2/hk2-locator/2.4.0-b31/hk2-locator-2.4.0-b31.jar\"\n            , \"/root/.m2/repository/org/apache/curator/curator-client/4.0.1/curator-client-4.0.1.jar\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/common/target/alluxio-core-common-2.1.0-SNAPSHOT.jar\"\n            , \"/root/.m2/repository/io/netty/netty-handler-proxy/4.1.30.Final/netty-handler-proxy-4.1.30.Final.jar\"\n            , \"/root/.m2/repository/org/javassist/javassist/3.18.2-GA/javassist-3.18.2-GA.jar\"\n            , \"/root/.m2/repository/com/google/errorprone/error_prone_annotations/2.2.0/error_prone_annotations-2.2.0.jar\"\n            , \"/root/.m2/repository/org/eclipse/jetty/orbit/org.eclipse.jdt.core/3.8.2.v20130121/org.eclipse.jdt.core-3.8.2.v20130121.jar\"\n            , \"/root/.m2/repository/com/google/guava/guava-testlib/27.0.1-jre/guava-testlib-27.0.1-jre.jar\"\n            , \"/root/.m2/repository/com/esotericsoftware/reflectasm/1.11.3/reflectasm-1.11.3.jar\"\n            , \"/root/.m2/repository/io/netty/netty-handler/4.1.5.Final/netty-handler-4.1.5.Final.jar\"\n            , \"/root/.m2/repository/org/apache/curator/curator-recipes/4.0.1/curator-recipes-4.0.1.jar\"\n            , \"/root/.m2/repository/org/apache/curator/curator-framework/4.0.1/curator-framework-4.0.1.jar\"\n            , \"/root/.m2/repository/org/apache/commons/commons-compress/1.16.1/commons-compress-1.16.1.jar\"\n            , \"/root/.m2/repository/org/glassfish/jersey/containers/jersey-container-servlet-core/2.22/jersey-container-servlet-core-2.22.jar\"\n            , \"/root/.m2/repository/io/grpc/grpc-netty/1.17.1/grpc-netty-1.17.1.jar\"\n            , \"/root/.m2/repository/io/netty/netty-codec-http2/4.1.30.Final/netty-codec-http2-4.1.30.Final.jar\"\n            , \"/root/.m2/repository/org/powermock/powermock-module-junit4-rule/1.6.1/powermock-module-junit4-rule-1.6.1.jar\"\n            , \"/root/.m2/repository/org/apache/zookeeper/zookeeper/3.4.6/zookeeper-3.4.6.jar\"\n            , \"/root/.m2/repository/com/google/j2objc/j2objc-annotations/1.1/j2objc-annotations-1.1.jar\"\n            , \"/root/.m2/repository/org/apache/commons/commons-lang3/3.4/commons-lang3-3.4.jar\"\n            , \"/root/.m2/repository/org/eclipse/jetty/jetty-server/9.2.16.v20160414/jetty-server-9.2.16.v20160414.jar\"\n            , \"/root/.m2/repository/io/atomix/copycat/alluxio/copycat-server/1.2.12/copycat-server-1.2.12.jar\"\n            , \"/root/.m2/repository/com/google/guava/failureaccess/1.0.1/failureaccess-1.0.1.jar\"\n            , \"/root/.m2/repository/commons-codec/commons-codec/1.10/commons-codec-1.10.jar\"\n            , \"/root/.m2/repository/io/atomix/copycat/alluxio/copycat-protocol/1.2.12/copycat-protocol-1.2.12.jar\"\n            , \"/root/.m2/repository/io/opencensus/opencensus-api/0.17.0/opencensus-api-0.17.0.jar\"\n            , \"/root/.m2/repository/io/atomix/catalyst/catalyst-transport/1.2.1/catalyst-transport-1.2.1.jar\"\n            , \"/root/.m2/repository/io/grpc/grpc-core/1.17.1/grpc-core-1.17.1.jar\"\n            , \"/root/.m2/repository/org/glassfish/jersey/core/jersey-common/2.22/jersey-common-2.22.jar\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/common/target/alluxio-core-common-2.1.0-SNAPSHOT-tests.jar\"\n            , \"/root/.m2/repository/net/jcip/jcip-annotations/1.0/jcip-annotations-1.0.jar\"\n            , \"/root/.m2/repository/io/prometheus/simpleclient_servlet/0.3.0/simpleclient_servlet-0.3.0.jar\"\n            , \"/root/.m2/repository/org/glassfish/hk2/hk2-api/2.4.0-b31/hk2-api-2.4.0-b31.jar\"\n            , \"/root/.m2/repository/org/eclipse/jetty/jetty-xml/9.2.16.v20160414/jetty-xml-9.2.16.v20160414.jar\"\n            , \"/root/.m2/repository/commons-cli/commons-cli/1.3.1/commons-cli-1.3.1.jar\"\n            , \"/root/.m2/repository/com/fasterxml/jackson/core/jackson-annotations/2.9.7/jackson-annotations-2.9.7.jar\"\n            , \"/root/.m2/repository/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar\"\n            , \"/root/.m2/repository/org/glassfish/hk2/external/javax.inject/2.4.0-b31/javax.inject-2.4.0-b31.jar\"\n            , \"/root/.m2/repository/org/eclipse/jetty/jetty-security/9.2.16.v20160414/jetty-security-9.2.16.v20160414.jar\"\n            , \"/root/.m2/repository/io/dropwizard/metrics/metrics-jvm/3.1.2/metrics-jvm-3.1.2.jar\"\n            , \"/root/.m2/repository/com/google/code/findbugs/annotations/3.0.1/annotations-3.0.1.jar\"\n            , \"/root/.m2/repository/io/prometheus/simpleclient_dropwizard/0.3.0/simpleclient_dropwizard-0.3.0.jar\"\n            , \"/root/.m2/repository/org/glassfish/javax.el/3.0.0/javax.el-3.0.0.jar\"\n            , \"/root/.m2/repository/org/powermock/powermock-api-support/1.6.1/powermock-api-support-1.6.1.jar\"\n            , \"/root/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar\"\n            , \"/root/.m2/repository/io/netty/netty-buffer/4.1.5.Final/netty-buffer-4.1.5.Final.jar\"\n            , \"/root/.m2/repository/com/esotericsoftware/minlog/1.3.0/minlog-1.3.0.jar\"\n            , \"/root/.m2/repository/io/grpc/grpc-context/1.17.1/grpc-context-1.17.1.jar\"\n            , \"/root/.m2/repository/io/netty/netty-codec-socks/4.1.30.Final/netty-codec-socks-4.1.30.Final.jar\"\n            , \"/root/.m2/repository/com/google/guava/guava/27.0.1-jre/guava-27.0.1-jre.jar\"\n            , \"/root/.m2/repository/org/eclipse/jetty/orbit/javax.servlet.jsp.jstl/1.2.0.v201105211821/javax.servlet.jsp.jstl-1.2.0.v201105211821.jar\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/underfs/local/target/alluxio-underfs-local-2.1.0-SNAPSHOT.jar\"\n            , \"/root/.m2/repository/io/netty/netty-common/4.1.5.Final/netty-common-4.1.5.Final.jar\"\n            , \"/root/.m2/repository/log4j/log4j/1.2.17/log4j-1.2.17.jar\"\n            , \"/root/.m2/repository/org/powermock/powermock-classloading-xstream/1.6.1/powermock-classloading-xstream-1.6.1.jar\"\n            , \"/root/.m2/repository/com/thoughtworks/xstream/xstream/1.4.2/xstream-1.4.2.jar\"\n            , \"/root/.m2/repository/io/grpc/grpc-protobuf/1.17.1/grpc-protobuf-1.17.1.jar\"\n            , \"/root/.m2/repository/io/atomix/catalyst/catalyst-netty/1.2.1/catalyst-netty-1.2.1.jar\"\n            , \"/root/.m2/repository/commons-lang/commons-lang/2.6/commons-lang-2.6.jar\"\n            , \"/root/.m2/repository/org/eclipse/jetty/jetty-jsp/9.2.16.v20160414/jetty-jsp-9.2.16.v20160414.jar\"\n            , \"/root/.m2/repository/org/glassfish/jersey/media/jersey-media-jaxb/2.22/jersey-media-jaxb-2.22.jar\"\n            , \"/root/.m2/repository/javax/validation/validation-api/1.1.0.Final/validation-api-1.1.0.Final.jar\"\n            , \"/root/.m2/repository/com/google/protobuf/protobuf-java/3.5.1/protobuf-java-3.5.1.jar\"\n            , \"/root/.m2/repository/org/glassfish/jersey/core/jersey-server/2.22/jersey-server-2.22.jar\"\n            , \"/root/.m2/repository/commons-logging/commons-logging/1.1.1/commons-logging-1.1.1.jar\"\n            , \"/root/.m2/repository/org/glassfish/jersey/core/jersey-client/2.22/jersey-client-2.22.jar\"\n            , \"/root/.m2/repository/junit/junit/4.12/junit-4.12.jar\"\n            , \"/root/.m2/repository/org/powermock/powermock-core/1.6.1/powermock-core-1.6.1.jar\"\n            ]\n        , jceArguments = [ \"-Xlint:none\" ]\n        , jceInputFiles =\n            [ \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/block/BlockLockType.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/grpc/WriteRequestContext.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/block/UnderFileSystemBlockStore.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/block/BlockMasterClientPool.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/grpc/ReadRequest.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/block/SpaceReserver.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/grpc/UfsFileWriteRequestContext.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/file/FileSystemWorker.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/block/evictor/EvictionPlan.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/block/evictor/EvictorUtils.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/block/evictor/package-info.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/grpc/GrpcExecutors.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/block/BlockMasterSync.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/block/BlockStore.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/grpc/BlockWriteRequestContext.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/grpc/ShortCircuitBlockWriteHandler.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/DataServer.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/file/FileSystemWorkerFactory.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/grpc/UfsFileWriteRequest.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/grpc/Error.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/block/BlockLockManager.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/grpc/BlockWorkerImpl.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/grpc/BlockReadRequestContext.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/block/BlockMetadataEvictorView.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/block/evictor/PartialLRUEvictor.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/block/meta/AbstractBlockMeta.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/grpc/UfsFileWriteHandler.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/block/evictor/LRFUEvictor.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/grpc/AbstractReadHandler.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/file/FileWorkerMasterSyncExecutor.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/file/DefaultFileSystemWorker.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/block/AsyncCacheRequestManager.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/grpc/WriteRequest.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/block/meta/UnderFileSystemBlockMeta.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/block/CachedSeekableInputStream.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/block/evictor/GreedyEvictor.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/block/ClientRWLock.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/block/BlockMetadataAllocatorView.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/Sessions.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/block/RemoteBlockReader.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/block/allocator/RoundRobinAllocator.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/block/meta/TempBlockMeta.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/block/evictor/LRUEvictor.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/grpc/DataMessageServerRequestObserver.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/package-info.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/SessionCleanable.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/grpc/BlockReadHandler.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/block/DefaultBlockWorker.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/block/evictor/AbstractEvictor.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/block/AsyncBlockRemover.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/block/allocator/MaxFreeAllocator.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/AlluxioWorkerRestServiceHandler.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/block/BlockMetadataView.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/grpc/ShortCircuitBlockReadHandler.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/block/meta/StorageTierEvictorView.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/grpc/UfsFallbackBlockWriteHandler.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/block/UnderFileSystemBlockReader.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/file/FileDataManager.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/grpc/AbstractWriteHandler.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/block/BlockHeartbeatReporter.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/grpc/BlockWriteHandler.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/block/meta/StorageTierAllocatorView.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/block/evictor/BlockTransferInfo.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/block/evictor/Evictor.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/block/DefaultBlockStoreMeta.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/WorkerProcess.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/block/BlockHeartbeatReport.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/underfs/WorkerUfsManager.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/block/meta/StorageTier.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/block/meta/StorageDirAllocatorView.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/block/allocator/Allocator.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/block/meta/StorageDirView.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/block/BlockMetadataManager.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/SessionInfo.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/grpc/GrpcDataServer.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/web/WorkerWebServer.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/block/meta/BlockMeta.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/block/PinListSync.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/block/BlockMasterClient.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/block/meta/StorageDir.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/file/UnderFileSystemUtils.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/grpc/BlockReadRequest.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/AlluxioWorkerProcess.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/AlluxioWorker.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/block/BlockStoreMeta.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/file/FileSystemMasterClient.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/grpc/DataMessageServerStreamObserver.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/block/BlockWorker.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/grpc/DelegationWriteHandler.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/block/meta/StorageDirEvictorView.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/block/evictor/EvictionDirCandidates.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/block/BlockMetricsReporter.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/block/meta/StorageTierView.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/block/TieredBlockStore.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/block/BlockStoreEventListener.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/block/allocator/GreedyAllocator.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/block/BlockWorkerFactory.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/block/UfsInputStreamManager.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/SessionCleaner.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/block/AbstractBlockStoreEventListener.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/grpc/BlockWriteRequest.java\"\n            , \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/grpc/ReadRequestContext.java\"\n            ]\n        , jceOutputDir =\n            \"/tmp/analyzing-d71915e80ed0fb48/core/server/worker/target/classes\"\n        }\n    , SolverError\n        { solverName = \"error-prone\"\n        , renderError =\n            \"Capture:\\n-----\\nCall Stack: \\n------Execution Failed:\\n/tmp/analyzing-d71915e80ed0fb48/core/server/worker/src/main/java/alluxio/worker/grpc/WriteRequestContext.java:2: error: illegal character: '#'\\n * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\\n                 ^\\nNote: Some input files use or override a deprecated API.\\nNote: Recompile with -Xlint:deprecation for details.\\nNote: Some input files use unchecked or unsafe operations.\\nNote: Recompile with -Xlint:unchecked for details.\\n1 error\\n\"\n        }\n    )\n[DEBUG] [28/Jun/2019:14:58:20 +0000] [()] Tool completed with 0 but only reporting up to 1200.\n[DEBUG] [28/Jun/2019:14:58:20 +0000] [()] All tools complete for commit \"master\"\n[DEBUG] [28/Jun/2019:14:58:28 +0000] [()] Analysis has completed.\n"}}
