{"tag":"AnalysisSuccess","contents":{"requestedTools":null,"toolResults":[[{"tag":"Infer"},{"tag":"ToolSuccess","contents":[[{"tnType":"NULL_DEREFERENCE","tnDesc":"object `testedOn` last assigned on line 18 could be null and is dereferenced at line 19.","tnFile":"src/main/java/org/junit/experimental/theories/suppliers/TestedOnSupplier.java","tnLine":19,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.junit.experimental.theories.suppliers.TestedOnSupplier.getValueSources(org.junit.experimental.theories.ParameterSignature):java.util.List","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `sig.getAnnotation(org.junit.experimental.theories.FromDataPoints)` could be null and is dereferenced at line 25.","tnFile":"src/main/java/org/junit/experimental/theories/internal/SpecificDataPointsSupplier.java","tnLine":25,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.junit.experimental.theories.internal.SpecificDataPointsSupplier.getSingleDataPointFields(org.junit.experimental.theories.ParameterSignature):java.util.Collection","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object `null` is dereferenced by call to `Suite(...)` at line 33.","tnFile":"src/main/java/org/junit/runners/Suite.java","tnLine":33,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.junit.runners.Suite.emptySuite():org.junit.runner.Runner","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `sig.getAnnotation(org.junit.experimental.theories.FromDataPoints)` could be null and is dereferenced at line 42.","tnFile":"src/main/java/org/junit/experimental/theories/internal/SpecificDataPointsSupplier.java","tnLine":42,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.junit.experimental.theories.internal.SpecificDataPointsSupplier.getDataPointsFields(org.junit.experimental.theories.ParameterSignature):java.util.Collection","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `getExpectedException()` could be null and is dereferenced at line 52.","tnFile":"src/main/java/org/junit/internal/runners/TestMethod.java","tnLine":52,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.junit.internal.runners.TestMethod.isUnexpected(java.lang.Throwable):boolean","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `sig.getAnnotation(org.junit.experimental.theories.FromDataPoints)` could be null and is dereferenced at line 59.","tnFile":"src/main/java/org/junit/experimental/theories/internal/SpecificDataPointsSupplier.java","tnLine":59,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.junit.experimental.theories.internal.SpecificDataPointsSupplier.getSingleDataPointMethods(org.junit.experimental.theories.ParameterSignature):java.util.Collection","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"RESOURCE_LEAK","tnDesc":"resource of type `java.io.PrintStream` acquired by call to `new()` at line 69 is not released after line 69.","tnFile":"src/main/java/org/junit/experimental/results/PrintableResult.java","tnLine":69,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.junit.experimental.results.PrintableResult.toString():java.lang.String","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `sig.getAnnotation(org.junit.experimental.theories.FromDataPoints)` could be null and is dereferenced at line 76.","tnFile":"src/main/java/org/junit/experimental/theories/internal/SpecificDataPointsSupplier.java","tnLine":76,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.junit.experimental.theories.internal.SpecificDataPointsSupplier.getDataPointsMethods(org.junit.experimental.theories.ParameterSignature):java.util.Collection","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object returned by `MethodRoadie.testMethod.getExpectedException()` could be null and is dereferenced at line 110.","tnFile":"src/main/java/org/junit/internal/runners/MethodRoadie.java","tnLine":110,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"org.junit.internal.runners.MethodRoadie.runTestMethod():void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"NULL_DEREFERENCE","tnDesc":"object `suite` last assigned on line 182 could be null and is dereferenced by call to `doRun(...)` at line 183.","tnFile":"src/main/java/junit/textui/TestRunner.java","tnLine":183,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"junit.textui.TestRunner.start(java.lang.String[]):junit.framework.TestResult","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"RESOURCE_LEAK","tnDesc":"resource of type `java.io.PrintWriter` acquired to `pw` by call to `new()` at line 282 is not released after line 293.\n**Note**: potential exception at line 288","tnFile":"src/main/java/junit/runner/BaseTestRunner.java","tnLine":293,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"junit.runner.BaseTestRunner.getFilteredTrace(java.lang.String):java.lang.String","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void ResultPrinter.printDefect(TestFailure,int)` indirectly writes to field `runner.BaseTestRunner.fPreferences` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"src/main/java/junit/textui/ResultPrinter.java","tnLine":65,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"junit.textui.ResultPrinter.printDefect(junit.framework.TestFailure,int):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void ResultPrinter.printDefectTrace(TestFailure)` indirectly writes to field `runner.BaseTestRunner.fPreferences` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"src/main/java/junit/textui/ResultPrinter.java","tnLine":75,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"junit.textui.ResultPrinter.printDefectTrace(junit.framework.TestFailure):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void ResultPrinter.printDefects(Enumeration,int,String)` indirectly writes to field `runner.BaseTestRunner.fPreferences` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"src/main/java/junit/textui/ResultPrinter.java","tnLine":59,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"junit.textui.ResultPrinter.printDefects(java.util.Enumeration,int,java.lang.String):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void ResultPrinter.printErrors(TestResult)` indirectly writes to field `runner.BaseTestRunner.fPreferences` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"src/main/java/junit/textui/ResultPrinter.java","tnLine":44,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"junit.textui.ResultPrinter.printErrors(junit.framework.TestResult):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}},{"tnType":"THREAD_SAFETY_VIOLATION","tnDesc":"Unprotected write. Non-private method `void ResultPrinter.printFailures(TestResult)` indirectly writes to field `runner.BaseTestRunner.fPreferences` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","tnFile":"src/main/java/junit/textui/ResultPrinter.java","tnLine":48,"tnColumn":-1,"tnPatch":null,"tnCodeLine":null,"tnProcedure":"junit.textui.ResultPrinter.printFailures(junit.framework.TestResult):void","tnPhase":"PhaseUnknown","tnTool":{"tag":"Infer"}}],null,{"analysisLOC":null,"analysisBuildSys":null,"analysisLang":null}]}],[{"tag":"ErrorProne"},{"tag":"ToolSuccess","contents":[[{"tnType":"JdkObsolete","tnDesc":"Vector performs synchronization that is usually unnecessary; prefer ArrayList.","tnFile":"src/main/java/junit/framework/TestSuite.java","tnLine":103,"tnColumn":35,"tnPatch":null,"tnCodeLine":"    private Vector<Test> fTests = new Vector<Test>(10); // Cannot convert this to List because it is used directly by some test runners","tnProcedure":null,"tnPhase":"PhaseUnknown","tnTool":{"tag":"ErrorProne"}},{"tnType":"UngroupedOverloads","tnDesc":"Overloads of 'createSuiteDescription' are not grouped together; found ungrouped overloads on line(s): 44, 57","tnFile":"src/main/java/org/junit/runner/Description.java","tnLine":123,"tnColumn":31,"tnPatch":null,"tnCodeLine":"    public static Description createSuiteDescription(Class<?> testClass) {","tnProcedure":null,"tnPhase":"PhaseUnknown","tnTool":{"tag":"ErrorProne"}},{"tnType":"InconsistentOverloads","tnDesc":"The parameters of this method are inconsistent with other overloaded versions. A consistent order would be: assertEquals(Object expected, Object actual, String message)","tnFile":"src/main/java/junit/framework/Assert.java","tnLine":71,"tnColumn":24,"tnPatch":null,"tnCodeLine":"    static public void assertEquals(String message, Object expected, Object actual) {","tnProcedure":null,"tnPhase":"PhaseUnknown","tnTool":{"tag":"ErrorProne"}},{"tnType":"Var","tnDesc":"Non-constant variable missing @Var annotation","tnFile":"src/main/java/junit/framework/TestCase.java","tnLine":139,"tnColumn":19,"tnPatch":null,"tnCodeLine":"        Throwable exception = null;","tnProcedure":null,"tnPhase":"PhaseUnknown","tnTool":{"tag":"ErrorProne"}},{"tnType":"InconsistentOverloads","tnDesc":"The parameters of this method are inconsistent with other overloaded versions. A consistent order would be: assertEquals(boolean expected, boolean actual, String message)","tnFile":"src/main/java/junit/framework/TestCase.java","tnLine":316,"tnColumn":24,"tnPatch":null,"tnCodeLine":"    public static void assertEquals(String message, boolean expected, boolean actual) {","tnProcedure":null,"tnPhase":"PhaseUnknown","tnTool":{"tag":"ErrorProne"}},{"tnType":"InconsistentOverloads","tnDesc":"The parameters of this method are inconsistent with other overloaded versions. A consistent order would be: assertEquals(String expected, String actual, String message)","tnFile":"src/main/java/junit/framework/Assert.java","tnLine":92,"tnColumn":24,"tnPatch":null,"tnCodeLine":"    static public void assertEquals(String message, String expected, String actual) {","tnProcedure":null,"tnPhase":"PhaseUnknown","tnTool":{"tag":"ErrorProne"}},{"tnType":"UngroupedOverloads","tnDesc":"Constructor overloads are not grouped together; found ungrouped overloads on line(s): 108, 117, 189","tnFile":"src/main/java/junit/framework/TestSuite.java","tnLine":153,"tnColumn":12,"tnPatch":null,"tnCodeLine":"    public TestSuite(Class<? extends TestCase> theClass, String name) {","tnProcedure":null,"tnPhase":"PhaseUnknown","tnTool":{"tag":"ErrorProne"}},{"tnType":"Var","tnDesc":"Non-constant variable missing @Var annotation","tnFile":"src/main/java/junit/framework/TestCase.java","tnLine":162,"tnColumn":16,"tnPatch":null,"tnCodeLine":"        Method runMethod = null;","tnProcedure":null,"tnPhase":"PhaseUnknown","tnTool":{"tag":"ErrorProne"}},{"tnType":"InconsistentOverloads","tnDesc":"The parameters of this method are inconsistent with other overloaded versions. A consistent order would be: assertEquals(String expected, String actual, String message)","tnFile":"src/main/java/junit/framework/TestCase.java","tnLine":252,"tnColumn":24,"tnPatch":null,"tnCodeLine":"    public static void assertEquals(String message, String expected, String actual) {","tnProcedure":null,"tnPhase":"PhaseUnknown","tnTool":{"tag":"ErrorProne"}},{"tnType":"InconsistentOverloads","tnDesc":"The parameters of this method are inconsistent with other overloaded versions. A consistent order would be: assertEquals(byte expected, byte actual, String message)","tnFile":"src/main/java/junit/framework/Assert.java","tnLine":188,"tnColumn":24,"tnPatch":null,"tnCodeLine":"    static public void assertEquals(String message, byte expected, byte actual) {","tnProcedure":null,"tnPhase":"PhaseUnknown","tnTool":{"tag":"ErrorProne"}},{"tnType":"InconsistentOverloads","tnDesc":"The parameters of this method are inconsistent with other overloaded versions. A consistent order would be: assertEquals(Object expected, Object actual, String message)","tnFile":"src/main/java/junit/framework/TestCase.java","tnLine":237,"tnColumn":24,"tnPatch":null,"tnCodeLine":"    public static void assertEquals(String message, Object expected, Object actual) {","tnProcedure":null,"tnPhase":"PhaseUnknown","tnTool":{"tag":"ErrorProne"}},{"tnType":"Var","tnDesc":"Unnecessary 'final' modifier.","tnFile":"src/main/java/org/junit/internal/matchers/ThrowableCauseMatcher.java","tnLine":49,"tnColumn":78,"tnPatch":null,"tnCodeLine":"    public static <T extends Throwable> Matcher<T> hasCause(final Matcher<?> matcher) {","tnProcedure":null,"tnPhase":"PhaseUnknown","tnTool":{"tag":"ErrorProne"}},{"tnType":"ConstructorInvokesOverridable","tnDesc":"Constructors should not invoke overridable methods.","tnFile":"src/main/java/junit/framework/TestSuite.java","tnLine":172,"tnColumn":20,"tnPatch":null,"tnCodeLine":"            addTest(testCaseForClass(each));","tnProcedure":null,"tnPhase":"PhaseUnknown","tnTool":{"tag":"ErrorProne"}},{"tnType":"InconsistentOverloads","tnDesc":"The parameters of this method are inconsistent with other overloaded versions. A consistent order would be: assertEquals(boolean expected, boolean actual, String message)","tnFile":"src/main/java/junit/framework/Assert.java","tnLine":173,"tnColumn":24,"tnPatch":null,"tnCodeLine":"    static public void assertEquals(String message, boolean expected, boolean actual) {","tnProcedure":null,"tnPhase":"PhaseUnknown","tnTool":{"tag":"ErrorProne"}},{"tnType":"UngroupedOverloads","tnDesc":"Overloads of 'createSuiteDescription' are not grouped together; found ungrouped overloads on line(s): 44, 57","tnFile":"src/main/java/org/junit/runner/Description.java","tnLine":134,"tnColumn":31,"tnPatch":null,"tnCodeLine":"    public static Description createSuiteDescription(Class<?> testClass, Annotation... annotations) {","tnProcedure":null,"tnPhase":"PhaseUnknown","tnTool":{"tag":"ErrorProne"}},{"tnType":"InconsistentOverloads","tnDesc":"The parameters of this method are inconsistent with other overloaded versions. A consistent order would be: assertEquals(long expected, long actual, String message)","tnFile":"src/main/java/junit/framework/TestCase.java","tnLine":301,"tnColumn":24,"tnPatch":null,"tnCodeLine":"    public static void assertEquals(String message, long expected, long actual) {","tnProcedure":null,"tnPhase":"PhaseUnknown","tnTool":{"tag":"ErrorProne"}},{"tnType":"NullableDereference","tnDesc":"Dereferencing method/field \"getModifiers\" of possibly null receiver runMethod","tnFile":"src/main/java/junit/framework/TestCase.java","tnLine":172,"tnColumn":32,"tnPatch":null,"tnCodeLine":"        if (!Modifier.isPublic(runMethod.getModifiers())) {","tnProcedure":null,"tnPhase":"PhaseUnknown","tnTool":{"tag":"ErrorProne"}},{"tnType":"InconsistentOverloads","tnDesc":"The parameters of this method are inconsistent with other overloaded versions. A consistent order would be: assertEquals(float expected, float actual, String message, float delta)","tnFile":"src/main/java/junit/framework/TestCase.java","tnLine":285,"tnColumn":24,"tnPatch":null,"tnCodeLine":"    public static void assertEquals(String message, float expected, float actual, float delta) {","tnProcedure":null,"tnPhase":"PhaseUnknown","tnTool":{"tag":"ErrorProne"}},{"tnType":"InconsistentOverloads","tnDesc":"The parameters of this method are inconsistent with other overloaded versions. A consistent order would be: assertEquals(char expected, char actual, String message)","tnFile":"src/main/java/junit/framework/TestCase.java","tnLine":346,"tnColumn":24,"tnPatch":null,"tnCodeLine":"    public static void assertEquals(String message, char expected, char actual) {","tnProcedure":null,"tnPhase":"PhaseUnknown","tnTool":{"tag":"ErrorProne"}},{"tnType":"ConstructorInvokesOverridable","tnDesc":"Constructors should not invoke overridable methods.","tnFile":"src/main/java/junit/framework/TestSuite.java","tnLine":155,"tnColumn":16,"tnPatch":null,"tnCodeLine":"        setName(name);","tnProcedure":null,"tnPhase":"PhaseUnknown","tnTool":{"tag":"ErrorProne"}},{"tnType":"InconsistentOverloads","tnDesc":"The parameters of this method are inconsistent with other overloaded versions. A consistent order would be: assertEquals(short expected, short actual, String message)","tnFile":"src/main/java/junit/framework/Assert.java","tnLine":218,"tnColumn":24,"tnPatch":null,"tnCodeLine":"    static public void assertEquals(String message, short expected, short actual) {","tnProcedure":null,"tnPhase":"PhaseUnknown","tnTool":{"tag":"ErrorProne"}},{"tnType":"InconsistentOverloads","tnDesc":"The parameters of this method are inconsistent with other overloaded versions. A consistent order would be: assertNotSame(Object expected, Object actual, String message)","tnFile":"src/main/java/junit/framework/TestCase.java","tnLine":442,"tnColumn":24,"tnPatch":null,"tnCodeLine":"    public static void assertNotSame(String message, Object expected, Object actual) {","tnProcedure":null,"tnPhase":"PhaseUnknown","tnTool":{"tag":"ErrorProne"}},{"tnType":"MissingSummary","tnDesc":"A summary fragment is required; consider using the value of the @return block as a summary fragment instead.","tnFile":"src/main/java/org/junit/runner/Runner.java","tnLine":38,"tnColumn":8,"tnPatch":null,"tnCodeLine":"     * @return the number of tests to be run by the receiver","tnProcedure":null,"tnPhase":"PhaseUnknown","tnTool":{"tag":"ErrorProne"}},{"tnType":"InconsistentOverloads","tnDesc":"The parameters of this method are inconsistent with other overloaded versions. A consistent order would be: assertEquals(char expected, char actual, String message)","tnFile":"src/main/java/junit/framework/Assert.java","tnLine":203,"tnColumn":24,"tnPatch":null,"tnCodeLine":"    static public void assertEquals(String message, char expected, char actual) {","tnProcedure":null,"tnPhase":"PhaseUnknown","tnTool":{"tag":"ErrorProne"}},{"tnType":"UngroupedOverloads","tnDesc":"Constructor overloads are not grouped together; found ungrouped overloads on line(s): 108, 117, 189","tnFile":"src/main/java/junit/framework/TestSuite.java","tnLine":170,"tnColumn":12,"tnPatch":null,"tnCodeLine":"    public TestSuite(Class<?>... classes) {","tnProcedure":null,"tnPhase":"PhaseUnknown","tnTool":{"tag":"ErrorProne"}},{"tnType":"MissingOverride","tnDesc":"run implements method in Test; expected @Override","tnFile":"src/main/java/junit/framework/TestCase.java","tnLine":129,"tnColumn":17,"tnPatch":null,"tnCodeLine":"    public void run(TestResult result) {","tnProcedure":null,"tnPhase":"PhaseUnknown","tnTool":{"tag":"ErrorProne"}},{"tnType":"InconsistentOverloads","tnDesc":"The parameters of this method are inconsistent with other overloaded versions. A consistent order would be: assertEquals(byte expected, byte actual, String message)","tnFile":"src/main/java/junit/framework/TestCase.java","tnLine":331,"tnColumn":24,"tnPatch":null,"tnCodeLine":"    public static void assertEquals(String message, byte expected, byte actual) {","tnProcedure":null,"tnPhase":"PhaseUnknown","tnTool":{"tag":"ErrorProne"}},{"tnType":"FieldCanBeFinal","tnDesc":"This field is only assigned during initialization; consider making it final","tnFile":"src/main/java/junit/framework/TestSuite.java","tnLine":103,"tnColumn":26,"tnPatch":null,"tnCodeLine":"    private Vector<Test> fTests = new Vector<Test>(10); // Cannot convert this to List because it is used directly by some test runners","tnProcedure":null,"tnPhase":"PhaseUnknown","tnTool":{"tag":"ErrorProne"}},{"tnType":"BoxedPrimitiveConstructor","tnDesc":"valueOf or autoboxing provides better time and space performance","tnFile":"src/main/java/junit/framework/Assert.java","tnLine":142,"tnColumn":57,"tnPatch":null,"tnCodeLine":"            failNotEquals(message, new Float(expected), new Float(actual));","tnProcedure":null,"tnPhase":"PhaseUnknown","tnTool":{"tag":"ErrorProne"}},{"tnType":"InconsistentOverloads","tnDesc":"The parameters of this method are inconsistent with other overloaded versions. A consistent order would be: assertFalse(boolean condition, String message)","tnFile":"src/main/java/junit/framework/TestCase.java","tnLine":207,"tnColumn":24,"tnPatch":null,"tnCodeLine":"    public static void assertFalse(String message, boolean condition) {","tnProcedure":null,"tnPhase":"PhaseUnknown","tnTool":{"tag":"ErrorProne"}},{"tnType":"FieldMissingNullable","tnDesc":"Assigning null literal to field","tnFile":"src/main/java/junit/framework/TestCase.java","tnLine":88,"tnColumn":15,"tnPatch":null,"tnCodeLine":"        fName = null;","tnProcedure":null,"tnPhase":"PhaseUnknown","tnTool":{"tag":"ErrorProne"}},{"tnType":"Var","tnDesc":"Unnecessary 'final' modifier.","tnFile":"src/main/java/org/junit/runner/manipulation/Filter.java","tnLine":108,"tnColumn":22,"tnPatch":null,"tnCodeLine":"        final Filter first = this;","tnProcedure":null,"tnPhase":"PhaseUnknown","tnTool":{"tag":"ErrorProne"}},{"tnType":"MissingOverride","tnDesc":"protect implements method in Protectable; expected @Override","tnFile":"src/main/java/junit/framework/TestResult.java","tnLine":121,"tnColumn":25,"tnPatch":null,"tnCodeLine":"            public void protect() throws Throwable {","tnProcedure":null,"tnPhase":"PhaseUnknown","tnTool":{"tag":"ErrorProne"}},{"tnType":"Var","tnDesc":"Unnecessary 'final' modifier.","tnFile":"src/main/java/junit/framework/TestResult.java","tnLine":118,"tnColumn":39,"tnPatch":null,"tnCodeLine":"    protected void run(final TestCase test) {","tnProcedure":null,"tnPhase":"PhaseUnknown","tnTool":{"tag":"ErrorProne"}},{"tnType":"unchecked","tnDesc":"Possible heap pollution from parameterized vararg type T","tnFile":"src/main/java/org/junit/matchers/JUnitMatchers.java","tnLine":41,"tnColumn":58,"tnPatch":null,"tnCodeLine":"    public static <T> Matcher<Iterable<T>> hasItems(T... elements) {","tnProcedure":null,"tnPhase":"PhaseUnknown","tnTool":{"tag":"ErrorProne"}},{"tnType":"Var","tnDesc":"Unnecessary 'final' modifier.","tnFile":"src/main/java/junit/framework/TestResult.java","tnLine":140,"tnColumn":41,"tnPatch":null,"tnCodeLine":"    public void runProtected(final Test test, Protectable p) {","tnProcedure":null,"tnPhase":"PhaseUnknown","tnTool":{"tag":"ErrorProne"}},{"tnType":"UngroupedOverloads","tnDesc":"Overloads of 'createSuiteDescription' are not grouped together; found ungrouped overloads on line(s): 123, 134","tnFile":"src/main/java/org/junit/runner/Description.java","tnLine":44,"tnColumn":31,"tnPatch":null,"tnCodeLine":"    public static Description createSuiteDescription(String name, Annotation... annotations) {","tnProcedure":null,"tnPhase":"PhaseUnknown","tnTool":{"tag":"ErrorProne"}},{"tnType":"InconsistentOverloads","tnDesc":"The parameters of this method are inconsistent with other overloaded versions. A consistent order would be: assertEquals(double expected, double actual, String message, double delta)","tnFile":"src/main/java/junit/framework/TestCase.java","tnLine":268,"tnColumn":24,"tnPatch":null,"tnCodeLine":"    public static void assertEquals(String message, double expected, double actual, double delta) {","tnProcedure":null,"tnPhase":"PhaseUnknown","tnTool":{"tag":"ErrorProne"}},{"tnType":"InconsistentOverloads","tnDesc":"The parameters of this method are inconsistent with other overloaded versions. A consistent order would be: assertSame(Object expected, Object actual, String message)","tnFile":"src/main/java/junit/framework/Assert.java","tnLine":284,"tnColumn":24,"tnPatch":null,"tnCodeLine":"    static public void assertSame(String message, Object expected, Object actual) {","tnProcedure":null,"tnPhase":"PhaseUnknown","tnTool":{"tag":"ErrorProne"}},{"tnType":"MissingSummary","tnDesc":"A summary fragment is required; consider using the value of the @return block as a summary fragment instead.","tnFile":"src/main/java/org/junit/runner/manipulation/Filter.java","tnLine":73,"tnColumn":8,"tnPatch":null,"tnCodeLine":"     * @param description the description of the test to be run","tnProcedure":null,"tnPhase":"PhaseUnknown","tnTool":{"tag":"ErrorProne"}},{"tnType":"Var","tnDesc":"Unnecessary 'final' modifier.","tnFile":"src/main/java/junit/extensions/ActiveTestSuite.java","tnLine":40,"tnColumn":59,"tnPatch":null,"tnCodeLine":"    public void runTest(final Test test, final TestResult result) {","tnProcedure":null,"tnPhase":"PhaseUnknown","tnTool":{"tag":"ErrorProne"}},{"tnType":"InconsistentOverloads","tnDesc":"The parameters of this method are inconsistent with other overloaded versions. A consistent order would be: assertNotSame(Object expected, Object actual, String message)","tnFile":"src/main/java/junit/framework/Assert.java","tnLine":304,"tnColumn":24,"tnPatch":null,"tnCodeLine":"    static public void assertNotSame(String message, Object expected, Object actual) {","tnProcedure":null,"tnPhase":"PhaseUnknown","tnTool":{"tag":"ErrorProne"}},{"tnType":"UngroupedOverloads","tnDesc":"Constructor overloads are not grouped together; found ungrouped overloads on line(s): 108, 117, 189","tnFile":"src/main/java/junit/framework/TestSuite.java","tnLine":161,"tnColumn":12,"tnPatch":null,"tnCodeLine":"    public TestSuite(String name) {","tnProcedure":null,"tnPhase":"PhaseUnknown","tnTool":{"tag":"ErrorProne"}},{"tnType":"MissingOverride","tnDesc":"countTestCases implements method in Test; expected @Override","tnFile":"src/main/java/junit/framework/TestCase.java","tnLine":101,"tnColumn":16,"tnPatch":null,"tnCodeLine":"    public int countTestCases() {","tnProcedure":null,"tnPhase":"PhaseUnknown","tnTool":{"tag":"ErrorProne"}},{"tnType":"Var","tnDesc":"Unnecessary 'final' modifier.","tnFile":"src/main/java/junit/framework/TestResult.java","tnLine":163,"tnColumn":19,"tnPatch":null,"tnCodeLine":"        final int count = test.countTestCases();","tnProcedure":null,"tnPhase":"PhaseUnknown","tnTool":{"tag":"ErrorProne"}},{"tnType":"unchecked","tnDesc":"unchecked cast","tnFile":"src/main/java/org/junit/runners/model/FrameworkMember.java","tnLine":33,"tnColumn":20,"tnPatch":null,"tnCodeLine":"        return (T) this;","tnProcedure":null,"tnPhase":"PhaseUnknown","tnTool":{"tag":"ErrorProne"}},{"tnType":"UngroupedOverloads","tnDesc":"Constructor overloads are not grouped together; found ungrouped overloads on line(s): 153, 161, 170, 189","tnFile":"src/main/java/junit/framework/TestSuite.java","tnLine":108,"tnColumn":12,"tnPatch":null,"tnCodeLine":"    public TestSuite() {","tnProcedure":null,"tnPhase":"PhaseUnknown","tnTool":{"tag":"ErrorProne"}},{"tnType":"Var","tnDesc":"Unnecessary 'final' modifier.","tnFile":"src/main/java/junit/framework/TestSuite.java","tnLine":121,"tnColumn":54,"tnPatch":null,"tnCodeLine":"    private void addTestsFromTestCase(final Class<?> theClass) {","tnProcedure":null,"tnPhase":"PhaseUnknown","tnTool":{"tag":"ErrorProne"}},{"tnType":"MissingSummary","tnDesc":"A summary fragment is required; consider using the value of the @return block as a summary fragment instead.","tnFile":"src/main/java/org/junit/runner/Request.java","tnLine":105,"tnColumn":8,"tnPatch":null,"tnCodeLine":"     * @param runner the runner to return","tnProcedure":null,"tnPhase":"PhaseUnknown","tnTool":{"tag":"ErrorProne"}},{"tnType":"InconsistentOverloads","tnDesc":"The parameters of this method are inconsistent with other overloaded versions. A consistent order would be: assertEquals(long expected, long actual, String message)","tnFile":"src/main/java/junit/framework/Assert.java","tnLine":158,"tnColumn":24,"tnPatch":null,"tnCodeLine":"    static public void assertEquals(String message, long expected, long actual) {","tnProcedure":null,"tnPhase":"PhaseUnknown","tnTool":{"tag":"ErrorProne"}},{"tnType":"Var","tnDesc":"Unnecessary 'final' modifier.","tnFile":"src/main/java/org/junit/runner/Request.java","tnLine":108,"tnColumn":47,"tnPatch":null,"tnCodeLine":"    public static Request runner(final Runner runner) {","tnProcedure":null,"tnPhase":"PhaseUnknown","tnTool":{"tag":"ErrorProne"}},{"tnType":"NullableDereference","tnDesc":"Dereferencing method/field \"this\" of possibly null receiver ActiveTestSuite","tnFile":"src/main/java/junit/extensions/ActiveTestSuite.java","tnLine":49,"tnColumn":21,"tnPatch":null,"tnCodeLine":"                    ActiveTestSuite.this.runFinished();","tnProcedure":null,"tnPhase":"PhaseUnknown","tnTool":{"tag":"ErrorProne"}},{"tnType":"UngroupedOverloads","tnDesc":"Constructor overloads are not grouped together; found ungrouped overloads on line(s): 108, 117, 153, 161, 170","tnFile":"src/main/java/junit/framework/TestSuite.java","tnLine":189,"tnColumn":12,"tnPatch":null,"tnCodeLine":"    public TestSuite(Class<? extends TestCase>[] classes, String name) {","tnProcedure":null,"tnPhase":"PhaseUnknown","tnTool":{"tag":"ErrorProne"}},{"tnType":"FieldCanBeFinal","tnDesc":"This field is only assigned during initialization; consider making it final","tnFile":"src/main/java/junit/framework/ComparisonFailure.java","tnLine":13,"tnColumn":20,"tnPatch":null,"tnCodeLine":"    private String fActual;","tnProcedure":null,"tnPhase":"PhaseUnknown","tnTool":{"tag":"ErrorProne"}},{"tnType":"ConstructorInvokesOverridable","tnDesc":"Constructors should not invoke overridable methods.","tnFile":"src/main/java/junit/framework/TestSuite.java","tnLine":191,"tnColumn":16,"tnPatch":null,"tnCodeLine":"        setName(name);","tnProcedure":null,"tnPhase":"PhaseUnknown","tnTool":{"tag":"ErrorProne"}},{"tnType":"InconsistentOverloads","tnDesc":"The parameters of this method are inconsistent with other overloaded versions. A consistent order would be: assertNotNull(Object object, String message)","tnFile":"src/main/java/junit/framework/TestCase.java","tnLine":398,"tnColumn":24,"tnPatch":null,"tnCodeLine":"    public static void assertNotNull(String message, Object object) {","tnProcedure":null,"tnPhase":"PhaseUnknown","tnTool":{"tag":"ErrorProne"}},{"tnType":"InconsistentOverloads","tnDesc":"The parameters of this method are inconsistent with other overloaded versions. A consistent order would be: assertFalse(boolean condition, String message)","tnFile":"src/main/java/junit/framework/Assert.java","tnLine":38,"tnColumn":24,"tnPatch":null,"tnCodeLine":"    static public void assertFalse(String message, boolean condition) {","tnProcedure":null,"tnPhase":"PhaseUnknown","tnTool":{"tag":"ErrorProne"}},{"tnType":"FieldCanBeFinal","tnDesc":"This field is only assigned during initialization; consider making it final","tnFile":"src/main/java/junit/framework/ComparisonFailure.java","tnLine":12,"tnColumn":20,"tnPatch":null,"tnCodeLine":"    private String fExpected;","tnProcedure":null,"tnPhase":"PhaseUnknown","tnTool":{"tag":"ErrorProne"}},{"tnType":"MissingOverride","tnDesc":"run implements method in Test; expected @Override","tnFile":"src/main/java/junit/framework/TestSuite.java","tnLine":231,"tnColumn":17,"tnPatch":null,"tnCodeLine":"    public void run(TestResult result) {","tnProcedure":null,"tnPhase":"PhaseUnknown","tnTool":{"tag":"ErrorProne"}},{"tnType":"InconsistentOverloads","tnDesc":"The parameters of this method are inconsistent with other overloaded versions. A consistent order would be: assertTrue(boolean condition, String message)","tnFile":"src/main/java/junit/framework/TestCase.java","tnLine":191,"tnColumn":24,"tnPatch":null,"tnCodeLine":"    public static void assertTrue(String message, boolean condition) {","tnProcedure":null,"tnPhase":"PhaseUnknown","tnTool":{"tag":"ErrorProne"}},{"tnType":"InconsistentOverloads","tnDesc":"The parameters of this method are inconsistent with other overloaded versions. A consistent order would be: assertEquals(double expected, double actual, String message, double delta)","tnFile":"src/main/java/junit/framework/Assert.java","tnLine":115,"tnColumn":24,"tnPatch":null,"tnCodeLine":"    static public void assertEquals(String message, double expected, double actual, double delta) {","tnProcedure":null,"tnPhase":"PhaseUnknown","tnTool":{"tag":"ErrorProne"}},{"tnType":"CatchFail","tnDesc":"Ignoring exceptions and calling fail() is unnecessary, and makes test output less useful","tnFile":"src/main/java/junit/framework/TestCase.java","tnLine":163,"tnColumn":9,"tnPatch":null,"tnCodeLine":"        try {","tnProcedure":null,"tnPhase":"PhaseUnknown","tnTool":{"tag":"ErrorProne"}},{"tnType":"Var","tnDesc":"Unnecessary 'final' modifier.","tnFile":"src/main/java/org/junit/runner/manipulation/Filter.java","tnLine":47,"tnColumn":67,"tnPatch":null,"tnCodeLine":"    public static Filter matchMethodDescription(final Description desiredDescription) {","tnProcedure":null,"tnPhase":"PhaseUnknown","tnTool":{"tag":"ErrorProne"}},{"tnType":"MissingOverride","tnDesc":"getDescription implements method in Describable; expected @Override","tnFile":"src/main/java/org/junit/runner/Runner.java","tnLine":27,"tnColumn":33,"tnPatch":null,"tnCodeLine":"    public abstract Description getDescription();","tnProcedure":null,"tnPhase":"PhaseUnknown","tnTool":{"tag":"ErrorProne"}},{"tnType":"MissingOverride","tnDesc":"describeTo implements method in SelfDescribing; expected @Override","tnFile":"src/main/java/org/junit/internal/matchers/ThrowableCauseMatcher.java","tnLine":25,"tnColumn":17,"tnPatch":null,"tnCodeLine":"    public void describeTo(Description description) {","tnProcedure":null,"tnPhase":"PhaseUnknown","tnTool":{"tag":"ErrorProne"}},{"tnType":"InconsistentOverloads","tnDesc":"The parameters of this method are inconsistent with other overloaded versions. A consistent order would be: assertNull(Object object, String message)","tnFile":"src/main/java/junit/framework/Assert.java","tnLine":276,"tnColumn":24,"tnPatch":null,"tnCodeLine":"    static public void assertNull(String message, Object object) {","tnProcedure":null,"tnPhase":"PhaseUnknown","tnTool":{"tag":"ErrorProne"}},{"tnType":"BoxedPrimitiveConstructor","tnDesc":"valueOf or autoboxing provides better time and space performance","tnFile":"src/main/java/junit/framework/Assert.java","tnLine":120,"tnColumn":36,"tnPatch":null,"tnCodeLine":"            failNotEquals(message, new Double(expected), new Double(actual));","tnProcedure":null,"tnPhase":"PhaseUnknown","tnTool":{"tag":"ErrorProne"}},{"tnType":"Var","tnDesc":"Unnecessary 'final' modifier.","tnFile":"src/main/java/org/junit/runner/manipulation/Filter.java","tnLine":104,"tnColumn":42,"tnPatch":null,"tnCodeLine":"    public Filter intersect(final Filter second) {","tnProcedure":null,"tnPhase":"PhaseUnknown","tnTool":{"tag":"ErrorProne"}},{"tnType":"Var","tnDesc":"Non-constant variable missing @Var annotation","tnFile":"src/main/java/junit/framework/Assert.java","tnLine":333,"tnColumn":16,"tnPatch":null,"tnCodeLine":"        String formatted = \"\";","tnProcedure":null,"tnPhase":"PhaseUnknown","tnTool":{"tag":"ErrorProne"}},{"tnType":"unchecked","tnDesc":"Possible heap pollution from parameterized vararg type Matcher<? super T>","tnFile":"src/main/java/org/junit/matchers/JUnitMatchers.java","tnLine":52,"tnColumn":75,"tnPatch":null,"tnCodeLine":"    public static <T> Matcher<Iterable<T>> hasItems(Matcher<? super T>... elementMatchers) {","tnProcedure":null,"tnPhase":"PhaseUnknown","tnTool":{"tag":"ErrorProne"}},{"tnType":"BooleanParameter","tnDesc":"Use parameter comments to document ambiguous literals","tnFile":"src/main/java/org/junit/runner/Request.java","tnLine":63,"tnColumn":40,"tnPatch":null,"tnCodeLine":"        return new ClassRequest(clazz, false);","tnProcedure":null,"tnPhase":"PhaseUnknown","tnTool":{"tag":"ErrorProne"}},{"tnType":"Var","tnDesc":"Unnecessary 'final' modifier.","tnFile":"src/main/java/junit/framework/TestSuite.java","tnLine":117,"tnColumn":37,"tnPatch":null,"tnCodeLine":"    public TestSuite(final Class<?> theClass) {","tnProcedure":null,"tnPhase":"PhaseUnknown","tnTool":{"tag":"ErrorProne"}},{"tnType":"MethodCanBeStatic","tnDesc":"A private method that does not reference the enclosing instance can be static","tnFile":"src/main/java/junit/framework/TestSuite.java","tnLine":176,"tnColumn":5,"tnPatch":null,"tnCodeLine":"    private Test testCaseForClass(Class<?> each) {","tnProcedure":null,"tnPhase":"PhaseUnknown","tnTool":{"tag":"ErrorProne"}},{"tnType":"BoxedPrimitiveConstructor","tnDesc":"valueOf or autoboxing provides better time and space performance","tnFile":"src/main/java/junit/framework/Assert.java","tnLine":120,"tnColumn":58,"tnPatch":null,"tnCodeLine":"            failNotEquals(message, new Double(expected), new Double(actual));","tnProcedure":null,"tnPhase":"PhaseUnknown","tnTool":{"tag":"ErrorProne"}},{"tnType":"Var","tnDesc":"Non-constant variable missing @Var annotation","tnFile":"src/main/java/junit/framework/TestSuite.java","tnLine":135,"tnColumn":18,"tnPatch":null,"tnCodeLine":"        Class<?> superClass = theClass;","tnProcedure":null,"tnPhase":"PhaseUnknown","tnTool":{"tag":"ErrorProne"}},{"tnType":"ConstructorInvokesOverridable","tnDesc":"Constructors should not invoke overridable methods.","tnFile":"src/main/java/junit/framework/TestSuite.java","tnLine":162,"tnColumn":16,"tnPatch":null,"tnCodeLine":"        setName(name);","tnProcedure":null,"tnPhase":"PhaseUnknown","tnTool":{"tag":"ErrorProne"}},{"tnType":"InconsistentOverloads","tnDesc":"The parameters of this method are inconsistent with other overloaded versions. A consistent order would be: <init>(String name, Class<? extends TestCase>[] classes)","tnFile":"src/main/java/junit/framework/TestSuite.java","tnLine":189,"tnColumn":12,"tnPatch":null,"tnCodeLine":"    public TestSuite(Class<? extends TestCase>[] classes, String name) {","tnProcedure":null,"tnPhase":"PhaseUnknown","tnTool":{"tag":"ErrorProne"}},{"tnType":"Var","tnDesc":"Non-constant variable missing @Var annotation","tnFile":"src/main/java/junit/framework/TestSuite.java","tnLine":212,"tnColumn":13,"tnPatch":null,"tnCodeLine":"        int count = 0;","tnProcedure":null,"tnPhase":"PhaseUnknown","tnTool":{"tag":"ErrorProne"}},{"tnType":"InconsistentOverloads","tnDesc":"The parameters of this method are inconsistent with other overloaded versions. A consistent order would be: assertNotNull(Object object, String message)","tnFile":"src/main/java/junit/framework/Assert.java","tnLine":255,"tnColumn":24,"tnPatch":null,"tnCodeLine":"    static public void assertNotNull(String message, Object object) {","tnProcedure":null,"tnPhase":"PhaseUnknown","tnTool":{"tag":"ErrorProne"}},{"tnType":"Var","tnDesc":"Unnecessary 'final' modifier.","tnFile":"src/main/java/junit/extensions/ActiveTestSuite.java","tnLine":40,"tnColumn":36,"tnPatch":null,"tnCodeLine":"    public void runTest(final Test test, final TestResult result) {","tnProcedure":null,"tnPhase":"PhaseUnknown","tnTool":{"tag":"ErrorProne"}},{"tnType":"InconsistentOverloads","tnDesc":"The parameters of this method are inconsistent with other overloaded versions. A consistent order would be: assertEquals(int expected, int actual, String message)","tnFile":"src/main/java/junit/framework/TestCase.java","tnLine":376,"tnColumn":24,"tnPatch":null,"tnCodeLine":"    public static void assertEquals(String message, int expected, int actual) {","tnProcedure":null,"tnPhase":"PhaseUnknown","tnTool":{"tag":"ErrorProne"}},{"tnType":"UngroupedOverloads","tnDesc":"Overloads of 'createSuiteDescription' are not grouped together; found ungrouped overloads on line(s): 123, 134","tnFile":"src/main/java/org/junit/runner/Description.java","tnLine":57,"tnColumn":31,"tnPatch":null,"tnCodeLine":"    public static Description createSuiteDescription(String name, Serializable uniqueId, Annotation... annotations) {","tnProcedure":null,"tnPhase":"PhaseUnknown","tnTool":{"tag":"ErrorProne"}},{"tnType":"InconsistentOverloads","tnDesc":"The parameters of this method are inconsistent with other overloaded versions. A consistent order would be: assertTrue(boolean condition, String message)","tnFile":"src/main/java/junit/framework/Assert.java","tnLine":20,"tnColumn":24,"tnPatch":null,"tnCodeLine":"    static public void assertTrue(String message, boolean condition) {","tnProcedure":null,"tnPhase":"PhaseUnknown","tnTool":{"tag":"ErrorProne"}},{"tnType":"MissingSummary","tnDesc":"A summary fragment is required; consider using the value of the @return block as a summary fragment instead.","tnFile":"src/main/java/org/junit/runner/Description.java","tnLine":181,"tnColumn":8,"tnPatch":null,"tnCodeLine":"     * @return a user-understandable label","tnProcedure":null,"tnPhase":"PhaseUnknown","tnTool":{"tag":"ErrorProne"}},{"tnType":"UngroupedOverloads","tnDesc":"Constructor overloads are not grouped together; found ungrouped overloads on line(s): 153, 161, 170, 189","tnFile":"src/main/java/junit/framework/TestSuite.java","tnLine":117,"tnColumn":12,"tnPatch":null,"tnCodeLine":"    public TestSuite(final Class<?> theClass) {","tnProcedure":null,"tnPhase":"PhaseUnknown","tnTool":{"tag":"ErrorProne"}},{"tnType":"MissingOverride","tnDesc":"countTestCases implements method in Test; expected @Override","tnFile":"src/main/java/junit/framework/TestSuite.java","tnLine":211,"tnColumn":16,"tnPatch":null,"tnCodeLine":"    public int countTestCases() {","tnProcedure":null,"tnPhase":"PhaseUnknown","tnTool":{"tag":"ErrorProne"}},{"tnType":"MissingSummary","tnDesc":"A summary fragment is required; consider using the value of the @return block as a summary fragment instead.","tnFile":"src/main/java/org/junit/runner/Describable.java","tnLine":11,"tnColumn":8,"tnPatch":null,"tnCodeLine":"     * @return a {@link Description} showing the tests to be run by the receiver","tnProcedure":null,"tnPhase":"PhaseUnknown","tnTool":{"tag":"ErrorProne"}},{"tnType":"InconsistentOverloads","tnDesc":"The parameters of this method are inconsistent with other overloaded versions. A consistent order would be: assertEquals(short expected, short actual, String message)","tnFile":"src/main/java/junit/framework/TestCase.java","tnLine":361,"tnColumn":24,"tnPatch":null,"tnCodeLine":"    public static void assertEquals(String message, short expected, short actual) {","tnProcedure":null,"tnPhase":"PhaseUnknown","tnTool":{"tag":"ErrorProne"}},{"tnType":"Var","tnDesc":"Unnecessary 'final' modifier.","tnFile":"src/main/java/junit/framework/TestSuite.java","tnLine":92,"tnColumn":45,"tnPatch":null,"tnCodeLine":"    public static Test warning(final String message) {","tnProcedure":null,"tnPhase":"PhaseUnknown","tnTool":{"tag":"ErrorProne"}},{"tnType":"InconsistentOverloads","tnDesc":"The parameters of this method are inconsistent with other overloaded versions. A consistent order would be: assertNull(Object object, String message)","tnFile":"src/main/java/junit/framework/TestCase.java","tnLine":417,"tnColumn":24,"tnPatch":null,"tnCodeLine":"    public static void assertNull(String message, Object object) {","tnProcedure":null,"tnPhase":"PhaseUnknown","tnTool":{"tag":"ErrorProne"}},{"tnType":"InconsistentOverloads","tnDesc":"The parameters of this method are inconsistent with other overloaded versions. A consistent order would be: assertSame(Object expected, Object actual, String message)","tnFile":"src/main/java/junit/framework/TestCase.java","tnLine":425,"tnColumn":24,"tnPatch":null,"tnCodeLine":"    public static void assertSame(String message, Object expected, Object actual) {","tnProcedure":null,"tnPhase":"PhaseUnknown","tnTool":{"tag":"ErrorProne"}},{"tnType":"InconsistentOverloads","tnDesc":"The parameters of this method are inconsistent with other overloaded versions. A consistent order would be: assertEquals(int expected, int actual, String message)","tnFile":"src/main/java/junit/framework/Assert.java","tnLine":233,"tnColumn":24,"tnPatch":null,"tnCodeLine":"    static public void assertEquals(String message, int expected, int actual) {","tnProcedure":null,"tnPhase":"PhaseUnknown","tnTool":{"tag":"ErrorProne"}},{"tnType":"InconsistentOverloads","tnDesc":"The parameters of this method are inconsistent with other overloaded versions. A consistent order would be: assertEquals(float expected, float actual, String message, float delta)","tnFile":"src/main/java/junit/framework/Assert.java","tnLine":137,"tnColumn":24,"tnPatch":null,"tnCodeLine":"    static public void assertEquals(String message, float expected, float actual, float delta) {","tnProcedure":null,"tnPhase":"PhaseUnknown","tnTool":{"tag":"ErrorProne"}},{"tnType":"BoxedPrimitiveConstructor","tnDesc":"valueOf or autoboxing provides better time and space performance","tnFile":"src/main/java/junit/framework/Assert.java","tnLine":142,"tnColumn":36,"tnPatch":null,"tnCodeLine":"            failNotEquals(message, new Float(expected), new Float(actual));","tnProcedure":null,"tnPhase":"PhaseUnknown","tnTool":{"tag":"ErrorProne"}}],null,{"analysisLOC":null,"analysisBuildSys":"Maven []","analysisLang":null}]}]]}}
