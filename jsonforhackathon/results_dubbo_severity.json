{
  "tag": "AnalysisSuccess",
  "contents": {
    "requestedTools": null,
    "toolResults": [
      [
        {
          "tag": "Infer"
        },
        {
          "tag": "ToolSuccess",
          "contents": [
            [
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void RestProtocol$ConnectionMonitor.shutdown()` mutates container `this.connectionManagers` via call to `clear` outside of synchronization.\n Reporting because this access may occur on a background thread.",
                "tnFile": "dubbo-rpc/dubbo-rpc-rest/src/main/java/org/apache/dubbo/rpc/protocol/rest/RestProtocol.java",
                "tnLine": 289,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.rpc.protocol.rest.RestProtocol$ConnectionMonitor.shutdown():void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "RESOURCE_LEAK",
                "tnDesc": "resource of type `java.io.FileOutputStream` acquired by call to `FileOutputStream(...)` at line 222 is not released after line 222.",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/utils/IOUtils.java",
                "tnLine": 222,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.common.utils.IOUtils.appendLines(java.io.File,java.lang.String[]):void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `List TagRouter.route(List,URL,Invocation)` reads without synchronization from `this.tagRouterRule`. Potentially races with write in method `TagRouter.notify(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/tag/TagRouter.java",
                "tnLine": 94,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.rpc.cluster.router.tag.TagRouter.route(java.util.List,org.apache.dubbo.common.URL,org.apache.dubbo.rpc.Invocation):java.util.List",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `ZookeeperClient AbstractZookeeperTransporter.fetchAndUpdateZookeeperClientCache(List)` indirectly mutates container `this.zookeeperClientMap` via call to `put` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-remoting/dubbo-remoting-zookeeper/src/main/java/org/apache/dubbo/remoting/zookeeper/support/AbstractZookeeperTransporter.java",
                "tnLine": 100,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.remoting.zookeeper.support.AbstractZookeeperTransporter.fetchAndUpdateZookeeperClientCache(java.util.List):org.apache.dubbo.remoting.zookeeper.ZookeeperClient",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "NULL_DEREFERENCE",
                "tnDesc": "object returned by `getDubboProtocol()` could be null and is dereferenced at line 282.",
                "tnFile": "dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/CallbackServiceCodec.java",
                "tnLine": 282,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec.decodeInvocationArgument(org.apache.dubbo.remoting.Channel,org.apache.dubbo.rpc.protocol.dubbo.DecodeableRpcInvocation,java.lang.Class[],int,java.util.Map):java.lang.Object",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `int StreamUtils$2.read()` reads without synchronization from `this.mCount`. Potentially races with write in method `StreamUtils$2.mark(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/io/StreamUtils.java",
                "tnLine": 132,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.common.io.StreamUtils$2.read():int",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `Proxy Proxy.getProxy(ClassLoader,java.lang.Class[])` indirectly mutates container `bytecode.ClassGenerator.POOL_MAP` via call to `put` outside of synchronization.\n Reporting because this access may occur on a background thread.",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/bytecode/Proxy.java",
                "tnLine": 138,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.common.bytecode.Proxy.getProxy(java.lang.ClassLoader,java.lang.Class[]):org.apache.dubbo.common.bytecode.Proxy",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `List ExtensionLoader.getActivateExtension(URL,java.lang.String[])` indirectly reads without synchronization from `this.cachedDefaultName`. Potentially races with write in method `ExtensionLoader.getAdaptiveExtension()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/extension/ExtensionLoader.java",
                "tnLine": 182,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.common.extension.ExtensionLoader.getActivateExtension(org.apache.dubbo.common.URL,java.lang.String[]):java.util.List",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "NULL_DEREFERENCE",
                "tnDesc": "object returned by `ctx.getChannel()` could be null and is dereferenced at line 79.",
                "tnFile": "dubbo-remoting/dubbo-remoting-netty/src/main/java/org/apache/dubbo/remoting/transport/netty/NettyHandler.java",
                "tnLine": 79,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.remoting.transport.netty.NettyHandler.channelDisconnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent):void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void JEtcdClient$EtcdWatcher.recreateWatchRequest()` writes to field `this.throwable` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-remoting/dubbo-remoting-etcd3/src/main/java/org/apache/dubbo/remoting/etcd/jetcd/JEtcdClient.java",
                "tnLine": 442,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher.recreateWatchRequest():void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void ServiceConfig.checkAndUpdateSubConfigs()` writes to field `this.interfaceClass` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ServiceConfig.java",
                "tnLine": 312,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.config.ServiceConfig.checkAndUpdateSubConfigs():void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "NULL_DEREFERENCE",
                "tnDesc": "object `commandContext` last assigned on line 47 could be null and is dereferenced at line 48.",
                "tnFile": "dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/server/handler/TelnetProcessHandler.java",
                "tnLine": 48,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.qos.server.handler.TelnetProcessHandler.channelRead0(io.netty.channel.ChannelHandlerContext,java.lang.String):void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "NULL_DEREFERENCE",
                "tnDesc": "object returned by `getDubboProtocol()` could be null and is dereferenced at line 47.",
                "tnFile": "dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/telnet/ChangeTelnetHandler.java",
                "tnLine": 47,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.rpc.protocol.dubbo.telnet.ChangeTelnetHandler.telnet(org.apache.dubbo.remoting.Channel,java.lang.String):java.lang.String",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `Collection AbstractRegistryFactory.getRegistries()` reads without synchronization from container `support.AbstractRegistryFactory.REGISTRIES` via call to `values`. Potentially races with write in method `AbstractRegistryFactory.getRegistry(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/support/AbstractRegistryFactory.java",
                "tnLine": 59,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.registry.support.AbstractRegistryFactory.getRegistries():java.util.Collection",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "NULL_DEREFERENCE",
                "tnDesc": "object `m` last assigned on line 71 could be null and is dereferenced at line 72.",
                "tnFile": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/merger/MergerFactory.java",
                "tnLine": 72,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.rpc.cluster.merger.MergerFactory.loadMergers():void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `void JEtcdClient$EtcdWatcher.reconnect()` indirectly reads with synchronization from `this.path`. Potentially races with unsynchronized write in method `JEtcdClient$EtcdWatcher.forPath(...)`.\n Reporting because this access may occur on a background thread.",
                "tnFile": "dubbo-remoting/dubbo-remoting-etcd3/src/main/java/org/apache/dubbo/remoting/etcd/jetcd/JEtcdClient.java",
                "tnLine": 433,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher.reconnect():void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void JEtcdClient$EtcdWatcher.recreateWatchRequest()` writes to field `this.watchStub` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-remoting/dubbo-remoting-etcd3/src/main/java/org/apache/dubbo/remoting/etcd/jetcd/JEtcdClient.java",
                "tnLine": 438,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher.recreateWatchRequest():void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "NULL_DEREFERENCE",
                "tnDesc": "object `factories` last assigned on line 313 could be null and is dereferenced at line 314.",
                "tnFile": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractInterfaceConfig.java",
                "tnLine": 314,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.config.AbstractInterfaceConfig.getDynamicConfiguration(org.apache.dubbo.common.URL):org.apache.dubbo.configcenter.DynamicConfiguration",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "NULL_DEREFERENCE",
                "tnDesc": "object `dataStore` last assigned on line 180 could be null and is dereferenced at line 181.",
                "tnFile": "dubbo-monitor/dubbo-monitor-default/src/main/java/org/apache/dubbo/monitor/dubbo/MetricsFilter.java",
                "tnLine": 181,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.monitor.dubbo.MetricsFilter.getThreadPoolMessage():java.util.List",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "NULL_DEREFERENCE",
                "tnDesc": "object `clazz` last assigned on line 51 could be null and is dereferenced at line 53.",
                "tnFile": "dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/impl/Help.java",
                "tnLine": 53,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.qos.command.impl.Help.commandHelp(java.lang.String):java.lang.String",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "NULL_DEREFERENCE",
                "tnDesc": "object returned by `getChannel()` could be null and is dereferenced at line 213.",
                "tnFile": "dubbo-remoting/dubbo-remoting-etcd3/src/main/java/org/apache/dubbo/remoting/etcd/jetcd/JEtcdClientWrapper.java",
                "tnLine": 213,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper.isConnected():boolean",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `List JEtcdClient$EtcdWatcher.forPath(String)` writes to field `this.path` outside of synchronization.\n Reporting because this access may occur on a background thread.",
                "tnFile": "dubbo-remoting/dubbo-remoting-etcd3/src/main/java/org/apache/dubbo/remoting/etcd/jetcd/JEtcdClient.java",
                "tnLine": 310,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher.forPath(java.lang.String):java.util.List",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "RESOURCE_LEAK",
                "tnDesc": "resource of type `java.io.OutputStreamWriter` acquired by call to `new()` at line 39 is not released after line 39.",
                "tnFile": "dubbo-serialization/dubbo-serialization-fastjson/src/main/java/org/apache/dubbo/common/serialize/fastjson/FastJsonObjectOutput.java",
                "tnLine": 39,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.common.serialize.fastjson.FastJsonObjectOutput.<init>(java.io.OutputStream)",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void JEtcdClient$EtcdWatcher.tryReconnect(Throwable)` writes to field `this.throwable` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-remoting/dubbo-remoting-etcd3/src/main/java/org/apache/dubbo/remoting/etcd/jetcd/JEtcdClient.java",
                "tnLine": 411,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher.tryReconnect(java.lang.Throwable):void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void ReferenceConfig.setUrl(String)` writes to field `this.url` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ReferenceConfig.java",
                "tnLine": 591,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.config.ReferenceConfig.setUrl(java.lang.String):void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `Class ReferenceConfig.getInterfaceClass()` indirectly reads without synchronization from `this.consumer`. Potentially races with write in method `ReferenceConfig.get()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ReferenceConfig.java",
                "tnLine": 534,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.config.ReferenceConfig.getInterfaceClass():java.lang.Class",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `int StreamUtils$2.available()` reads without synchronization from `this.mInMarked`. Potentially races with write in method `StreamUtils$2.mark(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/io/StreamUtils.java",
                "tnLine": 208,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.common.io.StreamUtils$2.available():int",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "NULL_DEREFERENCE",
                "tnDesc": "object `interfaceClass` last assigned on line 323 could be null and is dereferenced at line 352.",
                "tnFile": "dubbo-compatible/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/CompatibleServiceAnnotationBeanPostProcessor.java",
                "tnLine": 352,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.config.spring.beans.factory.annotation.CompatibleServiceAnnotationBeanPostProcessor.resolveServiceInterfaceClass(java.lang.Class,com.alibaba.dubbo.config.annotation.Service):java.lang.Class",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `ConsumerConfig ReferenceConfig.getConsumer()` reads without synchronization from `this.consumer`. Potentially races with write in method `ReferenceConfig.get()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ReferenceConfig.java",
                "tnLine": 604,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.config.ReferenceConfig.getConsumer():org.apache.dubbo.config.ConsumerConfig",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "NULL_DEREFERENCE",
                "tnDesc": "object returned by `getExtensionLoader(org.apache.dubbo.rpc.Protocol).getExtension(name)` could be null and is dereferenced at line 751.",
                "tnFile": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ServiceConfig.java",
                "tnLine": 751,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.config.ServiceConfig.findConfigedPorts(org.apache.dubbo.config.ProtocolConfig,java.lang.String,java.util.Map):java.lang.Integer",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void ServiceConfig.checkAndUpdateSubConfigs()` indirectly writes to field `this.provider` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ServiceConfig.java",
                "tnLine": 297,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.config.ServiceConfig.checkAndUpdateSubConfigs():void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void ServiceConfig.checkAndUpdateSubConfigs()` indirectly writes to field `this.metadataReportConfig` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ServiceConfig.java",
                "tnLine": 305,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.config.ServiceConfig.checkAndUpdateSubConfigs():void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `List ExtensionLoader.getActivateExtension(URL,java.lang.String[],String)` indirectly reads without synchronization from `this.cachedDefaultName`. Potentially races with write in method `ExtensionLoader.getAdaptiveExtension()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/extension/ExtensionLoader.java",
                "tnLine": 250,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.common.extension.ExtensionLoader.getActivateExtension(org.apache.dubbo.common.URL,java.lang.String[],java.lang.String):java.util.List",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void ServiceConfig.checkAndUpdateSubConfigs()` writes to field `this.stub` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ServiceConfig.java",
                "tnLine": 343,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.config.ServiceConfig.checkAndUpdateSubConfigs():void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `ProviderConfig ServiceConfig.getProvider()` reads without synchronization from `this.provider`. Potentially races with write in method `ServiceConfig.export()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ServiceConfig.java",
                "tnLine": 987,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.config.ServiceConfig.getProvider():org.apache.dubbo.config.ProviderConfig",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `boolean LRUCache.removeEldestEntry(Map$Entry)` reads without synchronization from container `this` via call to `size`. Potentially races with write in method `LRUCache.clear()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/utils/LRUCache.java",
                "tnLine": 44,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.common.utils.LRUCache.removeEldestEntry(java.util.Map$Entry):boolean",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `void JEtcdClient$EtcdWatcher.onNext(WatchResponse)` indirectly reads without synchronization from `this.path`. Potentially races with write in method `JEtcdClient$EtcdWatcher.forPath(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-remoting/dubbo-remoting-etcd3/src/main/java/org/apache/dubbo/remoting/etcd/jetcd/JEtcdClient.java",
                "tnLine": 244,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher.onNext(io.etcd.jetcd.api.WatchResponse):void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void ReferenceConfig.checkAndUpdateSubConfigs()` indirectly writes to field `this.metadataReportConfig` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ReferenceConfig.java",
                "tnLine": 240,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.config.ReferenceConfig.checkAndUpdateSubConfigs():void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `Class ReferenceConfig.getInterfaceClass()` writes to field `this.interfaceClass` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ReferenceConfig.java",
                "tnLine": 539,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.config.ReferenceConfig.getInterfaceClass():java.lang.Class",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "NULL_DEREFERENCE",
                "tnDesc": "object returned by `groupMap.get(group)` could be null and is dereferenced at line 317.",
                "tnFile": "dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/RegistryDirectory.java",
                "tnLine": 317,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.registry.integration.RegistryDirectory.toMergeInvokerList(java.util.List):java.util.List",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void MulticastRegistry.unregister(URL)` indirectly mutates container `categoryList` via call to `add` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-registry/dubbo-registry-multicast/src/main/java/org/apache/dubbo/registry/multicast/MulticastRegistry.java",
                "tnLine": 384,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.registry.multicast.MulticastRegistry.unregister(org.apache.dubbo.common.URL):void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `void JEtcdClient$EtcdWatcher.unwatch()` reads without synchronization from `this.watchRequest`. Potentially races with write in method `JEtcdClient$EtcdWatcher.reconnect()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-remoting/dubbo-remoting-etcd3/src/main/java/org/apache/dubbo/remoting/etcd/jetcd/JEtcdClient.java",
                "tnLine": 289,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher.unwatch():void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `void JEtcdClient$EtcdWatcher.tryReconnect(Throwable)` reads without synchronization from `this.path`. Potentially races with write in method `JEtcdClient$EtcdWatcher.forPath(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-remoting/dubbo-remoting-etcd3/src/main/java/org/apache/dubbo/remoting/etcd/jetcd/JEtcdClient.java",
                "tnLine": 413,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher.tryReconnect(java.lang.Throwable):void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void JEtcdClient$EtcdWatcher.recreateWatchRequest()` writes to field `this.watchRequest` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-remoting/dubbo-remoting-etcd3/src/main/java/org/apache/dubbo/remoting/etcd/jetcd/JEtcdClient.java",
                "tnLine": 439,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher.recreateWatchRequest():void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "NULL_DEREFERENCE",
                "tnDesc": "object `invoker` last assigned on line 100 could be null and is dereferenced at line 101.",
                "tnFile": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/FailbackClusterInvoker.java",
                "tnLine": 101,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance):org.apache.dubbo.rpc.Result",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "NULL_DEREFERENCE",
                "tnDesc": "object `urls` last assigned on line 344 could be null and is dereferenced at line 346.",
                "tnFile": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractInterfaceConfig.java",
                "tnLine": 346,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.config.AbstractInterfaceConfig.loadRegistries(boolean):java.util.List",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "NULL_DEREFERENCE",
                "tnDesc": "object returned by `ctx.channel()` could be null and is dereferenced at line 83.",
                "tnFile": "dubbo-remoting/dubbo-remoting-netty4/src/main/java/org/apache/dubbo/remoting/transport/netty4/NettyServerHandler.java",
                "tnLine": 83,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler.channelInactive(io.netty.channel.ChannelHandlerContext):void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "NULL_DEREFERENCE",
                "tnDesc": "object `retryInvoker` last assigned on line 142 could be null and is dereferenced at line 144.",
                "tnFile": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/FailbackClusterInvoker.java",
                "tnLine": 144,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker$RetryTimerTask.run(org.apache.dubbo.common.timer.Timeout):void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `Class ServiceConfig.getInterfaceClass()` writes to field `this.interfaceClass` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ServiceConfig.java",
                "tnLine": 920,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.config.ServiceConfig.getInterfaceClass():java.lang.Class",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void ServiceConfig.checkAndUpdateSubConfigs()` indirectly writes to field `this.application` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ServiceConfig.java",
                "tnLine": 294,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.config.ServiceConfig.checkAndUpdateSubConfigs():void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `void ServiceConfig.checkAndUpdateSubConfigs()` reads without synchronization from `this.local`. Potentially races with write in method `ServiceConfig.export()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ServiceConfig.java",
                "tnLine": 327,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.config.ServiceConfig.checkAndUpdateSubConfigs():void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "NULL_DEREFERENCE",
                "tnDesc": "object returned by `getInjvmProtocol()` could be null and is dereferenced at line 453.",
                "tnFile": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ReferenceConfig.java",
                "tnLine": 453,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.config.ReferenceConfig.shouldJvmRefer(java.util.Map):boolean",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "NULL_DEREFERENCE",
                "tnDesc": "object `channel` last assigned on line 119 could be null and is dereferenced at line 127.",
                "tnFile": "dubbo-remoting/dubbo-remoting-netty4/src/main/java/org/apache/dubbo/remoting/transport/netty4/NettyClientHandler.java",
                "tnLine": 127,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler.userEventTriggered(io.netty.channel.ChannelHandlerContext,java.lang.Object):void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void RestProtocol$ConnectionMonitor.addConnectionManager(PoolingHttpClientConnectionManager)` mutates container `this.connectionManagers` via call to `add` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-rpc/dubbo-rpc-rest/src/main/java/org/apache/dubbo/rpc/protocol/rest/RestProtocol.java",
                "tnLine": 267,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.rpc.protocol.rest.RestProtocol$ConnectionMonitor.addConnectionManager(org.apache.http.impl.conn.PoolingHttpClientConnectionManager):void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `boolean TagRouter.isRuntime()` reads without synchronization from `this.tagRouterRule`. Potentially races with write in method `TagRouter.notify(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/tag/TagRouter.java",
                "tnLine": 182,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.rpc.cluster.router.tag.TagRouter.isRuntime():boolean",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `List ListenableRouter.route(List,URL,Invocation)` reads without synchronization from `this.conditionRouters`. Potentially races with write in method `ListenableRouter.process(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/condition/config/ListenableRouter.java",
                "tnLine": 81,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.rpc.cluster.router.condition.config.ListenableRouter.route(java.util.List,org.apache.dubbo.common.URL,org.apache.dubbo.rpc.Invocation):java.util.List",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `Boolean ServiceConfig.getExport()` reads without synchronization from `this.provider`. Potentially races with write in method `ServiceConfig.export()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ServiceConfig.java",
                "tnLine": 390,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.config.ServiceConfig.getExport():java.lang.Boolean",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `void RestProtocol$ConnectionMonitor.run()` reads with synchronization from container `this.connectionManagers` via call to `iterator`. Potentially races with unsynchronized write in method `RestProtocol$ConnectionMonitor.shutdown()`.\n Reporting because this access may occur on a background thread.",
                "tnFile": "dubbo-rpc/dubbo-rpc-rest/src/main/java/org/apache/dubbo/rpc/protocol/rest/RestProtocol.java",
                "tnLine": 276,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.rpc.protocol.rest.RestProtocol$ConnectionMonitor.run():void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "NULL_DEREFERENCE",
                "tnDesc": "object returned by `provider.getProtocol()` could be null and is dereferenced at line 232.",
                "tnFile": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ServiceConfig.java",
                "tnLine": 232,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.config.ServiceConfig.convertProviderToProtocol(org.apache.dubbo.config.ProviderConfig):org.apache.dubbo.config.ProtocolConfig",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `int StreamUtils$2.read()` writes to field `this.mPosition` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/io/StreamUtils.java",
                "tnLine": 155,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.common.io.StreamUtils$2.read():int",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void ServiceConfig.checkAndUpdateSubConfigs()` indirectly writes to field `model.ApplicationModel.application` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ServiceConfig.java",
                "tnLine": 299,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.config.ServiceConfig.checkAndUpdateSubConfigs():void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "NULL_DEREFERENCE",
                "tnDesc": "object returned by `getExtensionLoader(org.apache.dubbo.rpc.protocol.thrift.ClassNameGenerator).getExtension(channel.getUrl().getParameter(\"class.name.generator\",\"thrift\"))` could be null and is dereferenced at line 548.",
                "tnFile": "dubbo-rpc/dubbo-rpc-thrift/src/main/java/org/apache/dubbo/rpc/protocol/thrift/ThriftCodec.java",
                "tnLine": 548,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.rpc.protocol.thrift.ThriftCodec.encodeResponse(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,org.apache.dubbo.remoting.exchange.Response):void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "RESOURCE_LEAK",
                "tnDesc": "resource of type `java.util.Scanner` acquired by call to `new()` at line 81 is not released after line 96.",
                "tnFile": "dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/textui/TTree.java",
                "tnLine": 96,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.qos.textui.TTree$1.callback(int,boolean,java.lang.String,org.apache.dubbo.qos.textui.TTree$Node):void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void ReferenceConfig.checkAndUpdateSubConfigs()` indirectly writes to field `this.application` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ReferenceConfig.java",
                "tnLine": 219,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.config.ReferenceConfig.checkAndUpdateSubConfigs():void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `int StreamUtils$2.read()` writes to field `this.mInMarked` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/io/StreamUtils.java",
                "tnLine": 161,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.common.io.StreamUtils$2.read():int",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void ServiceConfig.setInterfaceClass(Class)` indirectly writes to field `this.interfaceClass` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ServiceConfig.java",
                "tnLine": 935,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.config.ServiceConfig.setInterfaceClass(java.lang.Class):void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void MulticastRegistry.subscribe(URL,NotifyListener)` indirectly mutates container `categoryList` via call to `add` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-registry/dubbo-registry-multicast/src/main/java/org/apache/dubbo/registry/multicast/MulticastRegistry.java",
                "tnLine": 390,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.registry.multicast.MulticastRegistry.subscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener):void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void ServiceConfig.setProviders(List)` writes to field `this.protocols` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ServiceConfig.java",
                "tnLine": 1046,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.config.ServiceConfig.setProviders(java.util.List):void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void WebServiceProtocol$WebServiceHandler.handle(HttpServletRequest,HttpServletResponse)` indirectly writes to field `newArray.[_]` outside of synchronization.\n Reporting because this access may occur on a background thread.",
                "tnFile": "dubbo-rpc/dubbo-rpc-webservice/src/main/java/org/apache/dubbo/rpc/protocol/webservice/WebServiceProtocol.java",
                "tnLine": 159,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.rpc.protocol.webservice.WebServiceProtocol$WebServiceHandler.handle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse):void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `int StreamUtils$2.read()` reads without synchronization from `this.mInReset`. Potentially races with write in method `StreamUtils$2.mark(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/io/StreamUtils.java",
                "tnLine": 137,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.common.io.StreamUtils$2.read():int",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `Proxy Proxy.getProxy(java.lang.Class[])` indirectly mutates container `bytecode.ClassGenerator.POOL_MAP` via call to `put` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/bytecode/Proxy.java",
                "tnLine": 66,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.common.bytecode.Proxy.getProxy(java.lang.Class[]):org.apache.dubbo.common.bytecode.Proxy",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "NULL_DEREFERENCE",
                "tnDesc": "object `channel` last assigned on line 116 could be null and is dereferenced at line 119.",
                "tnFile": "dubbo-remoting/dubbo-remoting-netty4/src/main/java/org/apache/dubbo/remoting/transport/netty4/NettyServerHandler.java",
                "tnLine": 119,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler.userEventTriggered(io.netty.channel.ChannelHandlerContext,java.lang.Object):void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void ReferenceConfig.setConsumer(ConsumerConfig)` writes to field `this.consumer` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ReferenceConfig.java",
                "tnLine": 609,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.config.ReferenceConfig.setConsumer(org.apache.dubbo.config.ConsumerConfig):void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `ZookeeperClient AbstractZookeeperTransporter.connect(URL)` indirectly mutates container `this.zookeeperClientMap` via call to `put` outside of synchronization.\n Reporting because this access may occur on a background thread.",
                "tnFile": "dubbo-remoting/dubbo-remoting-zookeeper/src/main/java/org/apache/dubbo/remoting/zookeeper/support/AbstractZookeeperTransporter.java",
                "tnLine": 57,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.remoting.zookeeper.support.AbstractZookeeperTransporter.connect(org.apache.dubbo.common.URL):org.apache.dubbo.remoting.zookeeper.ZookeeperClient",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "NULL_DEREFERENCE",
                "tnDesc": "object `dataStore` last assigned on line 38 could be null and is dereferenced at line 39.",
                "tnFile": "dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/status/ThreadPoolStatusChecker.java",
                "tnLine": 39,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.rpc.protocol.dubbo.status.ThreadPoolStatusChecker.check():org.apache.dubbo.common.status.Status",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void ReferenceConfig.checkAndUpdateSubConfigs()` indirectly writes to field `methodBean.service` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ReferenceConfig.java",
                "tnLine": 236,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.config.ReferenceConfig.checkAndUpdateSubConfigs():void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void AbstractZookeeperTransporter.writeToClientMap(List,ZookeeperClient)` mutates container `this.zookeeperClientMap` via call to `put` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-remoting/dubbo-remoting-zookeeper/src/main/java/org/apache/dubbo/remoting/zookeeper/support/AbstractZookeeperTransporter.java",
                "tnLine": 127,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.remoting.zookeeper.support.AbstractZookeeperTransporter.writeToClientMap(java.util.List,org.apache.dubbo.remoting.zookeeper.ZookeeperClient):void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `void JEtcdClient$EtcdWatcher.onNext(Object)` indirectly reads without synchronization from `this.path`. Potentially races with write in method `JEtcdClient$EtcdWatcher.forPath(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-remoting/dubbo-remoting-etcd3/src/main/java/org/apache/dubbo/remoting/etcd/jetcd/JEtcdClient.java",
                "tnLine": 210,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher.onNext(java.lang.Object):void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `ZookeeperClient AbstractZookeeperTransporter.fetchAndUpdateZookeeperClientCache(List)` reads without synchronization from container `this.zookeeperClientMap` via call to `get`. Potentially races with write in method `AbstractZookeeperTransporter.connect(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-remoting/dubbo-remoting-zookeeper/src/main/java/org/apache/dubbo/remoting/zookeeper/support/AbstractZookeeperTransporter.java",
                "tnLine": 95,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.remoting.zookeeper.support.AbstractZookeeperTransporter.fetchAndUpdateZookeeperClientCache(java.util.List):org.apache.dubbo.remoting.zookeeper.ZookeeperClient",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `int StreamUtils$2.read()` reads without synchronization from `this.mInMarked`. Potentially races with write in method `StreamUtils$2.mark(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/io/StreamUtils.java",
                "tnLine": 129,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.common.io.StreamUtils$2.read():int",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "RESOURCE_LEAK",
                "tnDesc": "resource of type `org.springframework.context.support.ClassPathXmlApplicationContext` acquired by call to `new()` at line 29 is not released after line 31.",
                "tnFile": "dubbo-demo/dubbo-demo-xml/dubbo-demo-xml-consumer/src/main/java/org/apache/dubbo/demo/consumer/Application.java",
                "tnLine": 31,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.demo.consumer.Application.main(java.lang.String[]):void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void ReferenceConfig.checkAndUpdateSubConfigs()` indirectly writes to field `this.configCenter.address` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ReferenceConfig.java",
                "tnLine": 220,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.config.ReferenceConfig.checkAndUpdateSubConfigs():void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `Class ReferenceConfig.getInterfaceClass()` indirectly reads without synchronization from `this.generic`. Potentially races with write in method `ReferenceConfig.get()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ReferenceConfig.java",
                "tnLine": 533,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.config.ReferenceConfig.getInterfaceClass():java.lang.Class",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void ReferenceConfig.checkAndUpdateSubConfigs()` indirectly writes to field `this.url` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ReferenceConfig.java",
                "tnLine": 238,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.config.ReferenceConfig.checkAndUpdateSubConfigs():void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `boolean ListenableRouter.isForce()` reads without synchronization from `this.routerRule`. Potentially races with write in method `ListenableRouter.process(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/condition/config/ListenableRouter.java",
                "tnLine": 100,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.rpc.cluster.router.condition.config.ListenableRouter.isForce():boolean",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `void JEtcdClient$EtcdWatcher.onError(Throwable)` indirectly reads without synchronization from `this.path`. Potentially races with write in method `JEtcdClient$EtcdWatcher.forPath(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-remoting/dubbo-remoting-etcd3/src/main/java/org/apache/dubbo/remoting/etcd/jetcd/JEtcdClient.java",
                "tnLine": 270,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher.onError(java.lang.Throwable):void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "NULL_DEREFERENCE",
                "tnDesc": "object `networker` last assigned on line 44 could be null and is dereferenced at line 45.",
                "tnFile": "dubbo-remoting/dubbo-remoting-p2p/src/main/java/org/apache/dubbo/remoting/p2p/Networkers.java",
                "tnLine": 45,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.remoting.p2p.Networkers.lookup(org.apache.dubbo.common.URL):org.apache.dubbo.remoting.p2p.Group",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "RESOURCE_LEAK",
                "tnDesc": "resource of type `java.io.FileOutputStream` acquired by call to `FileOutputStream(...)` at line 208 is not released after line 208.",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/utils/IOUtils.java",
                "tnLine": 208,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.common.utils.IOUtils.writeLines(java.io.File,java.lang.String[]):void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "NULL_DEREFERENCE",
                "tnDesc": "object returned by `directory.getUrl()` could be null and is dereferenced at line 404.",
                "tnFile": "dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/RegistryProtocol.java",
                "tnLine": 404,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.registry.integration.RegistryProtocol.doRefer(org.apache.dubbo.rpc.cluster.Cluster,org.apache.dubbo.registry.Registry,java.lang.Class,org.apache.dubbo.common.URL):org.apache.dubbo.rpc.Invoker",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `Monitor AbstractMonitorFactory.getMonitor(URL)` reads without synchronization from container `support.AbstractMonitorFactory.FUTURES` via call to `get`. Potentially races with write in method `AbstractMonitorFactory.getMonitor(...)`.\n Reporting because this access may occur on a background thread.",
                "tnFile": "dubbo-monitor/dubbo-monitor-api/src/main/java/org/apache/dubbo/monitor/support/AbstractMonitorFactory.java",
                "tnLine": 74,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.monitor.support.AbstractMonitorFactory.getMonitor(org.apache.dubbo.common.URL):org.apache.dubbo.monitor.Monitor",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void ReferenceConfig.checkAndUpdateSubConfigs()` indirectly writes to field `this.generic` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ReferenceConfig.java",
                "tnLine": 225,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.config.ReferenceConfig.checkAndUpdateSubConfigs():void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `boolean TagRouter.isForce()` reads without synchronization from `this.tagRouterRule`. Potentially races with write in method `TagRouter.notify(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/tag/TagRouter.java",
                "tnLine": 188,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.rpc.cluster.router.tag.TagRouter.isForce():boolean",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void ServiceConfig.setPath(String)` writes to field `this.path` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ServiceConfig.java",
                "tnLine": 972,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.config.ServiceConfig.setPath(java.lang.String):void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `String ExtensionLoader.getDefaultExtensionName()` reads without synchronization from `this.cachedDefaultName`. Potentially races with write in method `ExtensionLoader.getAdaptiveExtension()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/extension/ExtensionLoader.java",
                "tnLine": 388,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.common.extension.ExtensionLoader.getDefaultExtensionName():java.lang.String",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `void Main.main(java.lang.String[])` indirectly reads without synchronization from `container.Main.loader.cachedDefaultName`. Potentially races with write in method `Main.main(...)`.\n Reporting because this access may occur on a background thread.",
                "tnFile": "dubbo-container/dubbo-container-api/src/main/java/org/apache/dubbo/container/Main.java",
                "tnLine": 63,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.container.Main.main(java.lang.String[]):void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void ServiceConfig.setProvider(ProviderConfig)` writes to field `this.provider` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ServiceConfig.java",
                "tnLine": 992,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.config.ServiceConfig.setProvider(org.apache.dubbo.config.ProviderConfig):void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "NULL_DEREFERENCE",
                "tnDesc": "object `invoker` last assigned on line 46 could be null and is dereferenced at line 48.",
                "tnFile": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/FailfastClusterInvoker.java",
                "tnLine": 48,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.rpc.cluster.support.FailfastClusterInvoker.doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance):org.apache.dubbo.rpc.Result",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `List JEtcdClient$EtcdWatcher.forPath(String)` indirectly reads without synchronization from `this.watchId`. Potentially races with write in method `JEtcdClient$EtcdWatcher.onNext(...)`.\n Reporting because this access may occur on a background thread.",
                "tnFile": "dubbo-remoting/dubbo-remoting-etcd3/src/main/java/org/apache/dubbo/remoting/etcd/jetcd/JEtcdClient.java",
                "tnLine": 307,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher.forPath(java.lang.String):java.util.List",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void ServiceConfig.checkAndUpdateSubConfigs()` writes to field `this.local` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ServiceConfig.java",
                "tnLine": 329,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.config.ServiceConfig.checkAndUpdateSubConfigs():void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void ServiceConfig.checkAndUpdateSubConfigs()` indirectly writes to field `this.registryIds` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ServiceConfig.java",
                "tnLine": 302,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.config.ServiceConfig.checkAndUpdateSubConfigs():void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `List ServiceConfig.getProviders()` reads without synchronization from `this.protocols`. Potentially races with write in method `ServiceConfig.export()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ServiceConfig.java",
                "tnLine": 1038,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.config.ServiceConfig.getProviders():java.util.List",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `Object ExtensionLoader.getExtension(String)` indirectly reads without synchronization from `this.cachedDefaultName`. Potentially races with write in method `ExtensionLoader.getActivateExtension(...)`.\n Reporting because this access may occur on a background thread.",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/extension/ExtensionLoader.java",
                "tnLine": 343,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.common.extension.ExtensionLoader.getExtension(java.lang.String):java.lang.Object",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "NULL_DEREFERENCE",
                "tnDesc": "object returned by `parseURLs(address,defaults)` could be null and is dereferenced at line 37.",
                "tnFile": "dubbo-compatible/src/main/java/com/alibaba/dubbo/common/utils/UrlUtils.java",
                "tnLine": 37,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.alibaba.dubbo.common.utils.UrlUtils.parseURLs(java.lang.String,java.util.Map):java.util.List",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void ServiceConfig.checkAndUpdateSubConfigs()` indirectly mutates container `support.MockInvoker.THROWABLE_MAP` via call to `put` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ServiceConfig.java",
                "tnLine": 356,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.config.ServiceConfig.checkAndUpdateSubConfigs():void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "RESOURCE_LEAK",
                "tnDesc": "resource of type `java.io.OutputStreamWriter` acquired by call to `new()` at line 36 is not released after line 36.",
                "tnFile": "dubbo-serialization/dubbo-serialization-gson/src/main/java/org/apache/dubbo/common/serialize/gson/GsonJsonObjectOutput.java",
                "tnLine": 36,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.common.serialize.gson.GsonJsonObjectOutput.<init>(java.io.OutputStream)",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void ServiceConfig.checkAndUpdateSubConfigs()` indirectly writes to field `methodBean.service` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ServiceConfig.java",
                "tnLine": 323,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.config.ServiceConfig.checkAndUpdateSubConfigs():void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void MulticastRegistry.subscribed(URL,NotifyListener)` indirectly mutates container `categoryList` via call to `add` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-registry/dubbo-registry-multicast/src/main/java/org/apache/dubbo/registry/multicast/MulticastRegistry.java",
                "tnLine": 362,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.registry.multicast.MulticastRegistry.subscribed(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener):void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `ZookeeperClient AbstractZookeeperTransporter.connect(URL)` indirectly reads with synchronization from container `this.zookeeperClientMap` via call to `get`. Potentially races with unsynchronized write in method `AbstractZookeeperTransporter.connect(...)`.\n Reporting because this access may occur on a background thread.",
                "tnFile": "dubbo-remoting/dubbo-remoting-zookeeper/src/main/java/org/apache/dubbo/remoting/zookeeper/support/AbstractZookeeperTransporter.java",
                "tnLine": 63,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.remoting.zookeeper.support.AbstractZookeeperTransporter.connect(org.apache.dubbo.common.URL):org.apache.dubbo.remoting.zookeeper.ZookeeperClient",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "NULL_DEREFERENCE",
                "tnDesc": "object `networker` last assigned on line 42 could be null and is dereferenced at line 43.",
                "tnFile": "dubbo-remoting/dubbo-remoting-p2p/src/main/java/org/apache/dubbo/remoting/p2p/exchange/ExchangeNetworkers.java",
                "tnLine": 43,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.remoting.p2p.exchange.ExchangeNetworkers.lookup(org.apache.dubbo.common.URL):org.apache.dubbo.remoting.p2p.exchange.ExchangeGroup",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `boolean ReferenceConfig.shouldInit()` indirectly reads without synchronization from `this.consumer`. Potentially races with write in method `ReferenceConfig.get()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ReferenceConfig.java",
                "tnLine": 475,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.config.ReferenceConfig.shouldInit():boolean",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "NULL_DEREFERENCE",
                "tnDesc": "object `dataStore` last assigned on line 59 could be null and is dereferenced at line 60.",
                "tnFile": "dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/transport/dispatcher/WrappedChannelHandler.java",
                "tnLine": 60,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.<init>(org.apache.dubbo.remoting.ChannelHandler,org.apache.dubbo.common.URL)",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "NULL_DEREFERENCE",
                "tnDesc": "object `compiler` last assigned on line 43 could be null and is dereferenced at line 45.",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/compiler/support/AdaptiveCompiler.java",
                "tnLine": 45,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.common.compiler.support.AdaptiveCompiler.compile(java.lang.String,java.lang.ClassLoader):java.lang.Class",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `void JEtcdClient$EtcdWatcher.recreateWatchRequest()` indirectly reads without synchronization from `this.path`. Potentially races with write in method `JEtcdClient$EtcdWatcher.forPath(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-remoting/dubbo-remoting-etcd3/src/main/java/org/apache/dubbo/remoting/etcd/jetcd/JEtcdClient.java",
                "tnLine": 441,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher.recreateWatchRequest():void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "NULL_DEREFERENCE",
                "tnDesc": "object `handler` last assigned on line 87 could be null and is dereferenced at line 90.",
                "tnFile": "dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/telnet/support/command/StatusTelnetHandler.java",
                "tnLine": 90,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.remoting.telnet.support.command.StatusTelnetHandler.telnet(org.apache.dubbo.remoting.Channel,java.lang.String):java.lang.String",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void ServiceConfig.checkAndUpdateSubConfigs()` indirectly writes to field `this.protocolIds` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ServiceConfig.java",
                "tnLine": 298,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.config.ServiceConfig.checkAndUpdateSubConfigs():void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void MulticastRegistry.doUnsubscribe(URL,NotifyListener)` indirectly mutates container `categoryList` via call to `add` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-registry/dubbo-registry-multicast/src/main/java/org/apache/dubbo/registry/multicast/MulticastRegistry.java",
                "tnLine": 282,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.registry.multicast.MulticastRegistry.doUnsubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener):void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void ReferenceConfig.checkAndUpdateSubConfigs()` indirectly writes to field `this.consumer` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ReferenceConfig.java",
                "tnLine": 222,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.config.ReferenceConfig.checkAndUpdateSubConfigs():void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void TagRouter.setApplication(String)` writes to field `this.application` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/tag/TagRouter.java",
                "tnLine": 225,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.rpc.cluster.router.tag.TagRouter.setApplication(java.lang.String):void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void MulticastRegistry.registered(URL)` indirectly mutates container `categoryList` via call to `add` outside of synchronization.\n Reporting because this access may occur on a background thread.",
                "tnFile": "dubbo-registry/dubbo-registry-multicast/src/main/java/org/apache/dubbo/registry/multicast/MulticastRegistry.java",
                "tnLine": 328,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.registry.multicast.MulticastRegistry.registered(org.apache.dubbo.common.URL):void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "NULL_DEREFERENCE",
                "tnDesc": "object returned by `getExtensionLoader(org.apache.dubbo.qos.command.BaseCommand).getExtension(commandName)` could be null and is dereferenced at line 55.",
                "tnFile": "dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/util/CommandHelper.java",
                "tnLine": 55,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.qos.command.util.CommandHelper.getCommandClass(java.lang.String):java.lang.Class",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void MulticastRegistry.register(URL)` indirectly mutates container `categoryList` via call to `add` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-registry/dubbo-registry-multicast/src/main/java/org/apache/dubbo/registry/multicast/MulticastRegistry.java",
                "tnLine": 378,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.registry.multicast.MulticastRegistry.register(org.apache.dubbo.common.URL):void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `void ServiceConfig.checkAndUpdateSubConfigs()` reads without synchronization from `this.stub`. Potentially races with write in method `ServiceConfig.export()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ServiceConfig.java",
                "tnLine": 341,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.config.ServiceConfig.checkAndUpdateSubConfigs():void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `WatchRequest JEtcdClient$EtcdWatcher.nextRequest()` reads without synchronization from `this.path`. Potentially races with write in method `JEtcdClient$EtcdWatcher.forPath(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-remoting/dubbo-remoting-etcd3/src/main/java/org/apache/dubbo/remoting/etcd/jetcd/JEtcdClient.java",
                "tnLine": 401,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher.nextRequest():io.etcd.jetcd.api.WatchRequest",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "RESOURCE_LEAK",
                "tnDesc": "resource of type `org.apache.dubbo.common.io.UnsafeByteArrayOutputStream` acquired to `os` by call to `new()` at line 183 is not released after line 188.\n**Note**: potential exception at line 184",
                "tnFile": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/GenericFilter.java",
                "tnLine": 188,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.rpc.filter.GenericFilter$GenericListener.onResponse(org.apache.dubbo.rpc.Result,org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation):void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "NULL_DEREFERENCE",
                "tnDesc": "object `invoker` last assigned on line 49 could be null and is dereferenced at line 50.",
                "tnFile": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/FailsafeClusterInvoker.java",
                "tnLine": 50,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker.doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance):org.apache.dubbo.rpc.Result",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "RESOURCE_LEAK",
                "tnDesc": "resource of type `org.apache.http.impl.conn.PoolingHttpClientConnectionManager` acquired by call to `new()` at line 143 is not released after line 152.",
                "tnFile": "dubbo-rpc/dubbo-rpc-rest/src/main/java/org/apache/dubbo/rpc/protocol/rest/RestProtocol.java",
                "tnLine": 152,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.rpc.protocol.rest.RestProtocol.doRefer(java.lang.Class,org.apache.dubbo.common.URL):java.lang.Object",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "NULL_DEREFERENCE",
                "tnDesc": "object `AbstractServiceConfig.protocols` last assigned on line 298 could be null and is dereferenced by call to `isOnlyInJvm()` at line 301.",
                "tnFile": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ServiceConfig.java",
                "tnLine": 301,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.config.ServiceConfig.checkAndUpdateSubConfigs():void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void ReferenceConfig.setInterfaceClass(Class)` indirectly writes to field `this.interfaceClass` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ReferenceConfig.java",
                "tnLine": 554,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.config.ReferenceConfig.setInterfaceClass(java.lang.Class):void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "NULL_DEREFERENCE",
                "tnDesc": "object returned by `getExtensionLoader(org.apache.dubbo.rpc.protocol.thrift.ClassNameGenerator).getExtension(\"thrift\")` could be null and is dereferenced at line 305.",
                "tnFile": "dubbo-rpc/dubbo-rpc-thrift/src/main/java/org/apache/dubbo/rpc/protocol/thrift/ThriftCodec.java",
                "tnLine": 305,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.rpc.protocol.thrift.ThriftCodec.decode(org.apache.thrift.protocol.TProtocol):java.lang.Object",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "NULL_DEREFERENCE",
                "tnDesc": "object returned by `getDubboProtocol()` could be null and is dereferenced at line 65.",
                "tnFile": "dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/telnet/TraceTelnetHandler.java",
                "tnLine": 65,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.rpc.protocol.dubbo.telnet.TraceTelnetHandler.telnet(org.apache.dubbo.remoting.Channel,java.lang.String):java.lang.String",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `boolean ReferenceConfig.shouldJvmRefer(Map)` reads without synchronization from `this.url`. Potentially races with write in method `ReferenceConfig.get()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ReferenceConfig.java",
                "tnLine": 449,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.config.ReferenceConfig.shouldJvmRefer(java.util.Map):boolean",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "RESOURCE_LEAK",
                "tnDesc": "resource of type `java.io.FileInputStream` acquired by call to `FileInputStream(...)` at line 154 is not released after line 154.\n**Note**: potential exception at line 154",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/utils/IOUtils.java",
                "tnLine": 154,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.common.utils.IOUtils.readLines(java.io.File):java.lang.String[]",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "NULL_DEREFERENCE",
                "tnDesc": "object returned by `getExtensionLoader(org.apache.dubbo.rpc.protocol.thrift.ClassNameGenerator).getExtension(channel.getUrl().getParameter(\"class.name.generator\",\"thrift\"))` could be null and is dereferenced at line 421.",
                "tnFile": "dubbo-rpc/dubbo-rpc-thrift/src/main/java/org/apache/dubbo/rpc/protocol/thrift/ThriftCodec.java",
                "tnLine": 421,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.rpc.protocol.thrift.ThriftCodec.encodeRequest(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,org.apache.dubbo.remoting.exchange.Request):void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `void ReferenceConfig.checkAndUpdateSubConfigs()` indirectly reads without synchronization from `this.generic`. Potentially races with write in method `ReferenceConfig.get()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ReferenceConfig.java",
                "tnLine": 224,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.config.ReferenceConfig.checkAndUpdateSubConfigs():void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `List ExtensionLoader.getActivateExtension(URL,java.lang.String[],String)` reads without synchronization from container `this.cachedActivates` via call to `entrySet`. Potentially races with write in method `ExtensionLoader.getAdaptiveExtension()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/extension/ExtensionLoader.java",
                "tnLine": 213,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.common.extension.ExtensionLoader.getActivateExtension(org.apache.dubbo.common.URL,java.lang.String[],java.lang.String):java.util.List",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "RESOURCE_LEAK",
                "tnDesc": "resource of type `org.springframework.context.support.ClassPathXmlApplicationContext` acquired by call to `new()` at line 27 is not released after line 28.",
                "tnFile": "dubbo-demo/dubbo-demo-xml/dubbo-demo-xml-provider/src/main/java/org/apache/dubbo/demo/provider/Application.java",
                "tnLine": 28,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.demo.provider.Application.main(java.lang.String[]):void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `Integer ServiceConfig.getDelay()` reads without synchronization from `this.provider`. Potentially races with write in method `ServiceConfig.export()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ServiceConfig.java",
                "tnLine": 400,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.config.ServiceConfig.getDelay():java.lang.Integer",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "NULL_DEREFERENCE",
                "tnDesc": "object returned by `getExtensionLoader(org.apache.dubbo.rpc.Protocol).getExtension(ProtocolConfig.name)` could be null and is dereferenced at line 539.",
                "tnFile": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ProtocolConfig.java",
                "tnLine": 539,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.config.ProtocolConfig.destroy():void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `List JEtcdClient$EtcdWatcher.forPath(String)` indirectly reads with synchronization from `this.path`. Potentially races with unsynchronized write in method `JEtcdClient$EtcdWatcher.forPath(...)`.\n Reporting because this access may occur on a background thread.",
                "tnFile": "dubbo-remoting/dubbo-remoting-etcd3/src/main/java/org/apache/dubbo/remoting/etcd/jetcd/JEtcdClient.java",
                "tnLine": 317,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher.forPath(java.lang.String):java.util.List",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `void JEtcdClient$EtcdWatcher.recreateWatchRequest()` reads without synchronization from `this.watchRequest`. Potentially races with write in method `JEtcdClient$EtcdWatcher.reconnect()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-remoting/dubbo-remoting-etcd3/src/main/java/org/apache/dubbo/remoting/etcd/jetcd/JEtcdClient.java",
                "tnLine": 437,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher.recreateWatchRequest():void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "NULL_DEREFERENCE",
                "tnDesc": "object returned by `getDubboProtocol()` could be null and is dereferenced at line 74.",
                "tnFile": "dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/telnet/CountTelnetHandler.java",
                "tnLine": 74,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.rpc.protocol.dubbo.telnet.CountTelnetHandler.telnet(org.apache.dubbo.remoting.Channel,java.lang.String):java.lang.String",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "RESOURCE_LEAK",
                "tnDesc": "resource of type `java.util.Scanner` acquired by call to `new()` at line 62 is not released after line 74.",
                "tnFile": "dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/textui/TKv.java",
                "tnLine": 74,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.qos.textui.TKv.filterEmptyLine(java.lang.String):java.lang.String",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `int StreamUtils$2.read()` writes to field `this.mInReset` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/io/StreamUtils.java",
                "tnLine": 162,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.common.io.StreamUtils$2.read():int",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `int StreamUtils$2.available()` reads without synchronization from `this.mCount`. Potentially races with write in method `StreamUtils$2.mark(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/io/StreamUtils.java",
                "tnLine": 209,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.common.io.StreamUtils$2.available():int",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void JEtcdClient$EtcdWatcher.closeWatchRequest()` writes to field `this.watchRequest` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-remoting/dubbo-remoting-etcd3/src/main/java/org/apache/dubbo/remoting/etcd/jetcd/JEtcdClient.java",
                "tnLine": 451,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher.closeWatchRequest():void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `void JEtcdClient$EtcdWatcher.closeWatchRequest()` reads without synchronization from `this.watchRequest`. Potentially races with write in method `JEtcdClient$EtcdWatcher.reconnect()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-remoting/dubbo-remoting-etcd3/src/main/java/org/apache/dubbo/remoting/etcd/jetcd/JEtcdClient.java",
                "tnLine": 447,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher.closeWatchRequest():void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `URL ReferenceConfig.toUrl()` reads without synchronization from container `this.urls` via call to `iterator`. Potentially races with write in method `ReferenceConfig.get()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ReferenceConfig.java",
                "tnLine": 204,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.config.ReferenceConfig.toUrl():org.apache.dubbo.common.URL",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "RESOURCE_LEAK",
                "tnDesc": "resource of type `java.util.Scanner` acquired by call to `new()` at line 422 is not released after line 426.",
                "tnFile": "dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/textui/TTable.java",
                "tnLine": 426,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.qos.textui.TTable.width(java.lang.String):int",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void ServiceConfig.checkAndUpdateSubConfigs()` indirectly writes to field `this.configCenter.address` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ServiceConfig.java",
                "tnLine": 296,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.config.ServiceConfig.checkAndUpdateSubConfigs():void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "NULL_DEREFERENCE",
                "tnDesc": "object returned by `getDubboProtocol()` could be null and is dereferenced at line 35.",
                "tnFile": "dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/status/ServerStatusChecker.java",
                "tnLine": 35,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.rpc.protocol.dubbo.status.ServerStatusChecker.check():org.apache.dubbo.common.status.Status",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `URL ServiceConfig.toUrl()` reads without synchronization from container `this.urls` via call to `iterator`. Potentially races with write in method `ServiceConfig.export()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ServiceConfig.java",
                "tnLine": 275,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.config.ServiceConfig.toUrl():org.apache.dubbo.common.URL",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `String ServiceConfig.getPath()` reads without synchronization from `this.path`. Potentially races with write in method `ServiceConfig.export()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ServiceConfig.java",
                "tnLine": 967,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.config.ServiceConfig.getPath():java.lang.String",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `void AbstractRegistryFactory.destroyAll()` indirectly reads without synchronization from container `support.AbstractRegistryFactory.REGISTRIES` via call to `values`. Potentially races with write in method `AbstractRegistryFactory.getRegistry(...)`.\n Reporting because this access may occur on a background thread.",
                "tnFile": "dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/support/AbstractRegistryFactory.java",
                "tnLine": 68,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.registry.support.AbstractRegistryFactory.destroyAll():void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `boolean ReferenceConfig.shouldCheck()` indirectly reads without synchronization from `this.consumer`. Potentially races with write in method `ReferenceConfig.get()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ReferenceConfig.java",
                "tnLine": 463,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.config.ReferenceConfig.shouldCheck():boolean",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `String ReferenceConfig.getUrl()` reads without synchronization from `this.url`. Potentially races with write in method `ReferenceConfig.get()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ReferenceConfig.java",
                "tnLine": 587,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.config.ReferenceConfig.getUrl():java.lang.String",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void ServiceConfig.setInterface(Class)` writes to field `this.interfaceClass` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ServiceConfig.java",
                "tnLine": 946,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.config.ServiceConfig.setInterface(java.lang.Class):void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `Object ExtensionLoader.getDefaultExtension()` reads without synchronization from `this.cachedDefaultName`. Potentially races with write in method `ExtensionLoader.getAdaptiveExtension()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/extension/ExtensionLoader.java",
                "tnLine": 364,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.common.extension.ExtensionLoader.getDefaultExtension():java.lang.Object",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void ReferenceConfig.checkAndUpdateSubConfigs()` writes to field `this.interfaceClass` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ReferenceConfig.java",
                "tnLine": 228,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.config.ReferenceConfig.checkAndUpdateSubConfigs():void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `int StreamUtils$2.read()` writes to field `this.mCount` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/io/StreamUtils.java",
                "tnLine": 156,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.common.io.StreamUtils$2.read():int",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "NULL_DEREFERENCE",
                "tnDesc": "object `command` last assigned on line 45 could be null and is dereferenced at line 46.",
                "tnFile": "dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/util/CommandHelper.java",
                "tnLine": 46,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.qos.command.util.CommandHelper.getAllCommandClass():java.util.List",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "RESOURCE_LEAK",
                "tnDesc": "resource of type `java.io.FileReader` acquired by call to `new()` at line 59 is not released after line 59.\n**Note**: potential exception at line 59",
                "tnFile": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/file/FileRouterFactory.java",
                "tnLine": 59,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.rpc.cluster.router.file.FileRouterFactory.getRouter(org.apache.dubbo.common.URL):org.apache.dubbo.rpc.cluster.Router",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void ReferenceConfig.setInterface(Class)` writes to field `this.interfaceClass` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ReferenceConfig.java",
                "tnLine": 572,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.config.ReferenceConfig.setInterface(java.lang.Class):void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "NULL_DEREFERENCE",
                "tnDesc": "object returned by `getDubboProtocol()` could be null and is dereferenced at line 56.",
                "tnFile": "dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/telnet/PortTelnetHandler.java",
                "tnLine": 56,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.rpc.protocol.dubbo.telnet.PortTelnetHandler.telnet(org.apache.dubbo.remoting.Channel,java.lang.String):java.lang.String",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `MulticastRegistry.<init>(URL)` indirectly mutates container `categoryList` via call to `add` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-registry/dubbo-registry-multicast/src/main/java/org/apache/dubbo/registry/multicast/MulticastRegistry.java",
                "tnLine": 94,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.registry.multicast.MulticastRegistry.<init>(org.apache.dubbo.common.URL)",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `Class ReferenceConfig.getInterfaceClass()` reads without synchronization from `this.interfaceClass`. Potentially races with write in method `ReferenceConfig.get()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ReferenceConfig.java",
                "tnLine": 530,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.config.ReferenceConfig.getInterfaceClass():java.lang.Class",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "NULL_DEREFERENCE",
                "tnDesc": "object `interfaceClass` last assigned on line 301 could be null and is dereferenced at line 331.",
                "tnFile": "dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/ServiceAnnotationBeanPostProcessor.java",
                "tnLine": 331,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.resolveServiceInterfaceClass(java.lang.Class,org.apache.dubbo.config.annotation.Service):java.lang.Class",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "NULL_DEREFERENCE",
                "tnDesc": "object returned by `getProperty(\"os.name\")` could be null and is dereferenced at line 100.",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/threadpool/support/AbortPolicyWithReport.java",
                "tnLine": 100,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport.lambda$dumpJStack$0():void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `Class ServiceConfig.getInterfaceClass()` reads without synchronization from `this.interfaceClass`. Potentially races with write in method `ServiceConfig.export()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ServiceConfig.java",
                "tnLine": 912,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.config.ServiceConfig.getInterfaceClass():java.lang.Class",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void ReferenceConfig.checkAndUpdateSubConfigs()` indirectly writes to field `model.ApplicationModel.application` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ReferenceConfig.java",
                "tnLine": 239,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.config.ReferenceConfig.checkAndUpdateSubConfigs():void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void MulticastRegistry.unregistered(URL)` indirectly mutates container `categoryList` via call to `add` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "dubbo-registry/dubbo-registry-multicast/src/main/java/org/apache/dubbo/registry/multicast/MulticastRegistry.java",
                "tnLine": 354,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.apache.dubbo.registry.multicast.MulticastRegistry.unregistered(org.apache.dubbo.common.URL):void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              }
            ],
            null,
            {
              "analysisLOC": null,
              "analysisBuildSys": "Maven []",
              "analysisLang": null
            }
          ]
        }
      ],
      [
        {
          "tag": "ErrorProne_JDK8"
        },
        {
          "tag": "ToolSuccess",
          "contents": [
            [
              {
                "tnType": "ThreadLocalUsage",
                "tnDesc": "ThreadLocals should be stored in static fields",
                "tnFile": "dubbo-serialization/dubbo-serialization-kryo/src/main/java/org/apache/dubbo/common/serialize/kryo/utils/ThreadLocalKryoFactory.java",
                "tnLine": 23,
                "tnColumn": 46,
                "tnPatch": null,
                "tnCodeLine": "    private final ThreadLocal<Kryo> holder = new ThreadLocal<Kryo>() {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, com.alibaba.dubbo.rpc.Result",
                "tnFile": "dubbo-compatible/src/main/java/com/alibaba/dubbo/rpc/Filter.java",
                "tnLine": 29,
                "tnColumn": 74,
                "tnPatch": null,
                "tnCodeLine": "        Result.CompatibleResult result = (Result.CompatibleResult) invoke(new Invoker.CompatibleInvoker<>(invoker),",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "DefaultCharset",
                "tnDesc": "Implicit use of the platform default charset, which can result in differing behaviour between JVM executions or incorrect behavior if the encoding of the data source doesn't match expectations.",
                "tnFile": "dubbo-serialization/dubbo-serialization-protostuff/src/main/java/org/apache/dubbo/common/serialize/protostuff/ProtostuffObjectInput.java",
                "tnLine": 126,
                "tnColumn": 16,
                "tnPatch": null,
                "tnCodeLine": "        return new String(bytes);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JdkObsolete",
                "tnDesc": "StringBuffer performs synchronization that is usually unnecessary; prefer StringBuilder.",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/json/Yylex.java",
                "tnLine": 733,
                "tnColumn": 26,
                "tnPatch": null,
                "tnCodeLine": "                    sb = new StringBuffer();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "LockNotBeforeTry",
                "tnDesc": "Prefer obtaining the lock for LOCK outside the try block. That way, if #lock throws, the lock is not erroneously released.",
                "tnFile": "dubbo-container/dubbo-container-api/src/main/java/org/apache/dubbo/container/Main.java",
                "tnLine": 79,
                "tnColumn": 42,
                "tnPatch": null,
                "tnCodeLine": "                                LOCK.lock();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Return value of methods returning Future must be checked. Ignoring returned Futures suppresses exceptions thrown from the code that completes the Future.",
                "tnFile": "dubbo-metadata-report/dubbo-metadata-report-api/src/main/java/org/apache/dubbo/metadata/support/AbstractMetadataReport.java",
                "tnLine": 117,
                "tnColumn": 42,
                "tnPatch": null,
                "tnCodeLine": "            scheduler.scheduleAtFixedRate(this::publishAll, calculateStartTime(), ONE_DAY_IN_MIll, TimeUnit.MILLISECONDS);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.Result",
                "tnFile": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/wrapper/MockClusterInvoker.java",
                "tnLine": 84,
                "tnColumn": 34,
                "tnPatch": null,
                "tnCodeLine": "            result = doMockInvoke(invocation, null);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "DefaultCharset",
                "tnDesc": "Implicit use of the platform default charset, which can result in differing behaviour between JVM executions or incorrect behavior if the encoding of the data source doesn't match expectations.",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/io/Bytes.java",
                "tnLine": 815,
                "tnColumn": 35,
                "tnPatch": null,
                "tnCodeLine": "        return getMD5(str.getBytes());",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.Result",
                "tnFile": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/TimeoutFilter.java",
                "tnLine": 48,
                "tnColumn": 30,
                "tnPatch": null,
                "tnCodeLine": "        return invoker.invoke(invocation);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "DefaultCharset",
                "tnDesc": "Implicit use of the platform default charset, which can result in differing behaviour between JVM executions or incorrect behavior if the encoding of the data source doesn't match expectations.",
                "tnFile": "dubbo-remoting/dubbo-remoting-p2p/src/main/java/org/apache/dubbo/remoting/p2p/exchange/support/MulticastExchangeGroup.java",
                "tnLine": 89,
                "tnColumn": 60,
                "tnPatch": null,
                "tnCodeLine": "        DatagramPacket hi = new DatagramPacket(msg.getBytes(), msg.length(), mutilcastAddress, mutilcastSocket.getLocalPort());",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "DefaultCharset",
                "tnDesc": "Implicit use of the platform default charset, which can result in differing behaviour between JVM executions or incorrect behavior if the encoding of the data source doesn't match expectations.",
                "tnFile": "dubbo-registry/dubbo-registry-multicast/src/main/java/org/apache/dubbo/registry/multicast/MulticastRegistry.java",
                "tnLine": 113,
                "tnColumn": 42,
                "tnPatch": null,
                "tnCodeLine": "                            String msg = new String(recv.getData()).trim();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.AsyncRpcResult",
                "tnFile": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncRpcResult.java",
                "tnLine": 237,
                "tnColumn": 37,
                "tnPatch": null,
                "tnCodeLine": "        return newDefaultAsyncResult(null, t, invocation);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.Result",
                "tnFile": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/FailoverClusterInvoker.java",
                "tnLine": 82,
                "tnColumn": 47,
                "tnPatch": null,
                "tnCodeLine": "                Result result = invoker.invoke(invocation);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JdkObsolete",
                "tnDesc": "It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.",
                "tnFile": "dubbo-registry/dubbo-registry-nacos/src/main/java/org/apache/dubbo/registry/nacos/NacosRegistry.java",
                "tnLine": 245,
                "tnColumn": 43,
                "tnPatch": null,
                "tnCodeLine": "        final List<String> serviceNames = new LinkedList<>();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.Result",
                "tnFile": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/CompatibleFilter.java",
                "tnLine": 59,
                "tnColumn": 30,
                "tnPatch": null,
                "tnCodeLine": "        return invoker.invoke(invocation);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FallThrough",
                "tnDesc": "Execution may fall through from the previous case; add a `// fall through` comment before this line if it was deliberate",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/json/Yylex.java",
                "tnLine": 736,
                "tnColumn": 17,
                "tnPatch": null,
                "tnCodeLine": "                case 38:",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.Result",
                "tnFile": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/protocol/AsyncToSyncInvoker.java",
                "tnLine": 54,
                "tnColumn": 32,
                "tnPatch": null,
                "tnCodeLine": "                asyncResult.get();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "BoxedPrimitiveConstructor",
                "tnDesc": "valueOf or autoboxing provides better time and space performance",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/utils/CompatibleTypeUtils.java",
                "tnLine": 75,
                "tnColumn": 24,
                "tnPatch": null,
                "tnCodeLine": "                return new Double(string);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UnusedVariable",
                "tnDesc": "The field 'GROUP_AND_VERION' is never read.",
                "tnFile": "dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/schema/DubboBeanDefinitionParser.java",
                "tnLine": 64,
                "tnColumn": 34,
                "tnPatch": null,
                "tnCodeLine": "    private static final Pattern GROUP_AND_VERION = Pattern.compile(\"^[\\\\-.0-9_a-zA-Z]+(\\\\:[\\\\-.0-9_a-zA-Z]+)?$\");",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "OperatorPrecedence",
                "tnDesc": "Use grouping parenthesis to make the operator precedence explicit",
                "tnFile": "dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/schema/DubboBeanDefinitionParser.java",
                "tnLine": 184,
                "tnColumn": 75,
                "tnPatch": null,
                "tnCodeLine": "                                            || \"timeout\".equals(property) && \"0\".equals(value)",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "TypeParameterUnusedInFormals",
                "tnDesc": "Declaring a type parameter that is only used in the return type is a misuse of generics: operations on the type parameter are unchecked, it hides unsafe casts at invocations of the method, and it interacts badly with method overload resolution.",
                "tnFile": "dubbo-remoting/dubbo-remoting-etcd3/src/main/java/org/apache/dubbo/remoting/etcd/EtcdClient.java",
                "tnLine": 97,
                "tnColumn": 11,
                "tnPatch": null,
                "tnCodeLine": "    <T> T getChildListener(String path, ChildListener listener);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "StringSplitter",
                "tnDesc": "String.split(String) has surprising behavior",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/utils/NetUtils.java",
                "tnLine": 435,
                "tnColumn": 40,
                "tnPatch": null,
                "tnCodeLine": "        String[] ipAddress = host.split(splitCharacter);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Return value of methods returning Future must be checked. Ignoring returned Futures suppresses exceptions thrown from the code that completes the Future.",
                "tnFile": "dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/server/handler/TelnetProcessHandler.java",
                "tnLine": 63,
                "tnColumn": 34,
                "tnPatch": null,
                "tnCodeLine": "                ctx.writeAndFlush(QosConstants.BR_STR + QosProcessHandler.prompt);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "DefaultCharset",
                "tnDesc": "Implicit use of the platform default charset, which can result in differing behaviour between JVM executions or incorrect behavior if the encoding of the data source doesn't match expectations.",
                "tnFile": "dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/telnet/LogTelnetHandler.java",
                "tnLine": 71,
                "tnColumn": 42,
                "tnPatch": null,
                "tnCodeLine": "                        String content = new String(bb.array()).replace(\"<\", \"&lt;\")",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UnusedVariable",
                "tnDesc": "The assignment to this local variable 'offset' is never read.",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/json/Yylex.java",
                "tnLine": 332,
                "tnColumn": 16,
                "tnPatch": null,
                "tnCodeLine": "        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "BadImport",
                "tnDesc": "Importing nested classes/static methods/static fields with commonly-used names can make code harder to read, because it may not be clear from the context exactly which type is being referred to. Qualifying the name with that of the containing class can make the code clearer.",
                "tnFile": "dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/ReferenceBeanBuilder.java",
                "tnLine": 49,
                "tnColumn": 48,
                "tnPatch": null,
                "tnCodeLine": "    static final String[] IGNORE_FIELD_NAMES = of(\"application\", \"module\", \"consumer\", \"monitor\", \"registry\");",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.Result",
                "tnFile": "dubbo-filter/dubbo-filter-cache/src/main/java/org/apache/dubbo/cache/filter/CacheFilter.java",
                "tnLine": 106,
                "tnColumn": 47,
                "tnPatch": null,
                "tnCodeLine": "                Result result = invoker.invoke(invocation);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ClassNewInstance",
                "tnDesc": "Class.newInstance() bypasses exception checking; prefer getDeclaredConstructor().newInstance()",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/logger/LoggerFactory.java",
                "tnLine": 71,
                "tnColumn": 59,
                "tnPatch": null,
                "tnCodeLine": "                        setLoggerAdapter(clazz.newInstance());",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.Result",
                "tnFile": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncRpcResult.java",
                "tnLine": 159,
                "tnColumn": 30,
                "tnPatch": null,
                "tnCodeLine": "        return getAppResponse().getAttachments();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.Result",
                "tnFile": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncRpcResult.java",
                "tnLine": 169,
                "tnColumn": 23,
                "tnPatch": null,
                "tnCodeLine": "        getAppResponse().addAttachments(map);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UnnecessaryParentheses",
                "tnDesc": "Unnecessary use of grouping parentheses",
                "tnFile": "dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/telnet/LogTelnetHandler.java",
                "tnLine": 75,
                "tnColumn": 54,
                "tnPatch": null,
                "tnCodeLine": "                        buf.append(\"\\r\\nmodified:\" + (new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\")",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UnusedMethod",
                "tnDesc": "Private method 'convertLegacyValue' is never used.",
                "tnFile": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractConfig.java",
                "tnLine": 128,
                "tnColumn": 27,
                "tnPatch": null,
                "tnCodeLine": "    private static String convertLegacyValue(String key, String value) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.Result",
                "tnFile": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncRpcResult.java",
                "tnLine": 102,
                "tnColumn": 32,
                "tnPatch": null,
                "tnCodeLine": "                return this.get();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UnnecessaryParentheses",
                "tnDesc": "Unnecessary use of grouping parentheses",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/utils/CIDRUtils.java",
                "tnLine": 83,
                "tnColumn": 27,
                "tnPatch": null,
                "tnCodeLine": "        BigInteger mask = (new BigInteger(1, maskBuffer.array())).not().shiftRight(prefixLength);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.Result",
                "tnFile": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/proxy/InvokerInvocationHandler.java",
                "tnLine": 55,
                "tnColumn": 30,
                "tnPatch": null,
                "tnCodeLine": "        return invoker.invoke(new RpcInvocation(method, args)).recreate();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.AsyncRpcResult",
                "tnFile": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/protocol/AbstractInvoker.java",
                "tnLine": 164,
                "tnColumn": 60,
                "tnPatch": null,
                "tnCodeLine": "                return AsyncRpcResult.newDefaultAsyncResult(null, te, invocation);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ClassCanBeStatic",
                "tnDesc": "Inner class is non-static but does not reference enclosing class",
                "tnFile": "dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/RegistryProtocol.java",
                "tnLine": 588,
                "tnColumn": 13,
                "tnPatch": null,
                "tnCodeLine": "    private class ServiceConfigurationListener extends AbstractConfiguratorListener {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Return value of methods returning Future must be checked. Ignoring returned Futures suppresses exceptions thrown from the code that completes the Future.",
                "tnFile": "dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/server/handler/TelnetProcessHandler.java",
                "tnLine": 45,
                "tnColumn": 30,
                "tnPatch": null,
                "tnCodeLine": "            ctx.writeAndFlush(QosProcessHandler.prompt);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.Result",
                "tnFile": "dubbo-compatible/src/main/java/com/alibaba/dubbo/rpc/Filter.java",
                "tnLine": 31,
                "tnColumn": 34,
                "tnPatch": null,
                "tnCodeLine": "        return result.getDelegate();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UnusedVariable",
                "tnDesc": "The local variable 'methodsToExport' is never read.",
                "tnFile": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/model/ProviderModel.java",
                "tnLine": 81,
                "tnColumn": 18,
                "tnPatch": null,
                "tnCodeLine": "        Method[] methodsToExport = null;",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UnusedVariable",
                "tnDesc": "The parameter 'remoteAddress' is never read.",
                "tnFile": "dubbo-remoting/dubbo-remoting-p2p/src/main/java/org/apache/dubbo/remoting/p2p/support/MulticastGroup.java",
                "tnLine": 97,
                "tnColumn": 56,
                "tnPatch": null,
                "tnCodeLine": "    private void receive(String msg, InetSocketAddress remoteAddress) throws RemotingException {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UnusedMethod",
                "tnDesc": "Private method 'toLog4j2Level' is never used.",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/logger/log4j2/Log4j2LoggerAdapter.java",
                "tnLine": 35,
                "tnColumn": 51,
                "tnPatch": null,
                "tnCodeLine": "    private static org.apache.logging.log4j.Level toLog4j2Level(Level level) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.AsyncRpcResult",
                "tnFile": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/protocol/AbstractInvoker.java",
                "tnLine": 159,
                "tnColumn": 60,
                "tnPatch": null,
                "tnCodeLine": "                return AsyncRpcResult.newDefaultAsyncResult(null, e, invocation);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UnusedVariable",
                "tnDesc": "The local variable 'isCallBackServiceInvoke' is never read.",
                "tnFile": "dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DubboProtocol.java",
                "tnLine": 243,
                "tnColumn": 17,
                "tnPatch": null,
                "tnCodeLine": "        boolean isCallBackServiceInvoke = false;",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "DefaultCharset",
                "tnDesc": "Implicit use of the platform default charset, which can result in differing behaviour between JVM executions or incorrect behavior if the encoding of the data source doesn't match expectations.",
                "tnFile": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/GenericFilter.java",
                "tnLine": 124,
                "tnColumn": 96,
                "tnPatch": null,
                "tnCodeLine": "                                     new UnsafeByteArrayInputStream(((String) args[0]).getBytes())) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UnusedVariable",
                "tnDesc": "The assignment to this local variable 'offset' is never read.",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/json/Yylex.java",
                "tnLine": 387,
                "tnColumn": 16,
                "tnPatch": null,
                "tnCodeLine": "        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JdkObsolete",
                "tnDesc": "It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.",
                "tnFile": "dubbo-compatible/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/CompatibleReferenceAnnotationBeanPostProcessor.java",
                "tnLine": 113,
                "tnColumn": 54,
                "tnPatch": null,
                "tnCodeLine": "        final List<ReferenceFieldElement> elements = new LinkedList<ReferenceFieldElement>();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "OperatorPrecedence",
                "tnDesc": "Use grouping parenthesis to make the operator precedence explicit",
                "tnFile": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/support/MockInvoker.java",
                "tnLine": 77,
                "tnColumn": 42,
                "tnPatch": null,
                "tnCodeLine": "                || mock.startsWith(\"\\'\") && mock.endsWith(\"\\'\"))) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.AsyncRpcResult",
                "tnFile": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/EchoFilter.java",
                "tnLine": 39,
                "tnColumn": 56,
                "tnPatch": null,
                "tnCodeLine": "            return AsyncRpcResult.newDefaultAsyncResult(inv.getArguments()[0], inv);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, java.util.concurrent.CompletableFuture<org.apache.dubbo.rpc.Result>",
                "tnFile": "dubbo-rpc/dubbo-rpc-thrift/src/main/java/org/apache/dubbo/rpc/protocol/thrift/ThriftProtocol.java",
                "tnLine": 94,
                "tnColumn": 47,
                "tnPatch": null,
                "tnCodeLine": "                return result.completionFuture().thenApply(Function.identity());",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.Result",
                "tnFile": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/wrapper/MockClusterInvoker.java",
                "tnLine": 78,
                "tnColumn": 41,
                "tnPatch": null,
                "tnCodeLine": "            result = this.invoker.invoke(invocation);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.Result",
                "tnFile": "dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/support/ProviderInvokerWrapper.java",
                "tnLine": 59,
                "tnColumn": 30,
                "tnPatch": null,
                "tnCodeLine": "        return invoker.invoke(invocation);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JdkObsolete",
                "tnDesc": "It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/bytecode/ClassGenerator.java",
                "tnLine": 232,
                "tnColumn": 29,
                "tnPatch": null,
                "tnCodeLine": "            mConstructors = new LinkedList<String>();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Return value of methods returning Future must be checked. Ignoring returned Futures suppresses exceptions thrown from the code that completes the Future.",
                "tnFile": "dubbo-remoting/dubbo-remoting-netty4/src/main/java/org/apache/dubbo/remoting/transport/netty4/NettyClient.java",
                "tnLine": 144,
                "tnColumn": 45,
                "tnPatch": null,
                "tnCodeLine": "                            oldChannel.close();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "OperatorPrecedence",
                "tnDesc": "Use grouping parenthesis to make the operator precedence explicit",
                "tnFile": "dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/schema/DubboBeanDefinitionParser.java",
                "tnLine": 188,
                "tnColumn": 76,
                "tnPatch": null,
                "tnCodeLine": "                                            || \"reliable\".equals(property) && \"false\".equals(value)) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "BadImport",
                "tnDesc": "Importing nested classes/static methods/static fields with commonly-used names can make code harder to read, because it may not be clear from the context exactly which type is being referred to. Qualifying the name with that of the containing class can make the code clearer.",
                "tnFile": "dubbo-compatible/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/CompatibleServiceAnnotationBeanPostProcessor.java",
                "tnLine": 394,
                "tnColumn": 41,
                "tnPatch": null,
                "tnCodeLine": "        String[] ignoreAttributeNames = of(\"provider\", \"monitor\", \"application\", \"module\", \"registry\", \"protocol\",",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JdkObsolete",
                "tnDesc": "It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.",
                "tnFile": "dubbo-compatible/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/CompatibleReferenceAnnotationBeanPostProcessor.java",
                "tnLine": 148,
                "tnColumn": 55,
                "tnPatch": null,
                "tnCodeLine": "        final List<ReferenceMethodElement> elements = new LinkedList<ReferenceMethodElement>();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FallThrough",
                "tnDesc": "Execution may fall through from the previous case; add a `// fall through` comment before this line if it was deliberate",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/json/Yylex.java",
                "tnLine": 817,
                "tnColumn": 17,
                "tnPatch": null,
                "tnCodeLine": "                case 53:",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "StringSplitter",
                "tnDesc": "String.split(String) has surprising behavior",
                "tnFile": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractConfig.java",
                "tnLine": 318,
                "tnColumn": 42,
                "tnPatch": null,
                "tnCodeLine": "            String[] values = value.split(\"\\\\s*[,]+\\\\s*\");",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UnnecessaryParentheses",
                "tnDesc": "Unnecessary use of grouping parentheses",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/utils/NetUtils.java",
                "tnLine": 118,
                "tnColumn": 20,
                "tnPatch": null,
                "tnCodeLine": "                || (LOCAL_IP_PATTERN.matcher(host).matches());",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JdkObsolete",
                "tnDesc": "It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.",
                "tnFile": "dubbo-rpc/dubbo-rpc-rest/src/main/java/org/apache/dubbo/rpc/protocol/rest/ViolationReport.java",
                "tnLine": 44,
                "tnColumn": 36,
                "tnPatch": null,
                "tnCodeLine": "            constraintViolations = new LinkedList<RestConstraintViolation>();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Return value of methods returning Future must be checked. Ignoring returned Futures suppresses exceptions thrown from the code that completes the Future.",
                "tnFile": "dubbo-registry/dubbo-registry-nacos/src/main/java/org/apache/dubbo/registry/nacos/NacosRegistry.java",
                "tnLine": 213,
                "tnColumn": 57,
                "tnPatch": null,
                "tnCodeLine": "            scheduledExecutorService.scheduleAtFixedRate(() -> {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "MixedMutabilityReturnType",
                "tnDesc": "This method returns both mutable and immutable collections or maps from different paths. This may be confusing for users of the method.",
                "tnFile": "dubbo-registry/dubbo-registry-nacos/src/main/java/org/apache/dubbo/registry/nacos/NacosRegistry.java",
                "tnLine": 335,
                "tnColumn": 23,
                "tnPatch": null,
                "tnCodeLine": "    private List<URL> buildURLs(URL consumerURL, Collection<Instance> instances) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "StringSplitter",
                "tnDesc": "String.split(String) has surprising behavior",
                "tnFile": "dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/telnet/PortTelnetHandler.java",
                "tnLine": 43,
                "tnColumn": 43,
                "tnPatch": null,
                "tnCodeLine": "            String[] parts = message.split(\"\\\\s+\");",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JdkObsolete",
                "tnDesc": "It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.",
                "tnFile": "dubbo-registry/dubbo-registry-nacos/src/main/java/org/apache/dubbo/registry/nacos/NacosRegistry.java",
                "tnLine": 371,
                "tnColumn": 43,
                "tnPatch": null,
                "tnCodeLine": "        List<Instance> healthyInstances = new LinkedList<>(instances);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UnusedVariable",
                "tnDesc": "The parameter 'channel' is never read.",
                "tnFile": "dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DubboProtocol.java",
                "tnLine": 190,
                "tnColumn": 53,
                "tnPatch": null,
                "tnCodeLine": "        private Invocation createInvocation(Channel channel, URL url, String methodKey) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "DefaultCharset",
                "tnDesc": "Implicit use of the platform default charset, which can result in differing behaviour between JVM executions or incorrect behavior if the encoding of the data source doesn't match expectations.",
                "tnFile": "dubbo-serialization/dubbo-serialization-protobuf-json/src/main/java/org/apache/dubbo/common/serialize/protobuf/support/GenericProtobufObjectOutput.java",
                "tnLine": 34,
                "tnColumn": 39,
                "tnPatch": null,
                "tnCodeLine": "        this.writer = new PrintWriter(new OutputStreamWriter(out));",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "BadImport",
                "tnDesc": "Importing nested classes/static methods/static fields with commonly-used names can make code harder to read, because it may not be clear from the context exactly which type is being referred to. Qualifying the name with that of the containing class can make the code clearer.",
                "tnFile": "dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/config/NamePropertyDefaultValueDubboConfigBeanCustomizer.java",
                "tnLine": 71,
                "tnColumn": 35,
                "tnPatch": null,
                "tnCodeLine": "                if (Arrays.equals(of(String.class), setNameMethod.getParameterTypes())) { // the param type is String",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ClassCanBeStatic",
                "tnDesc": "Inner class is non-static but does not reference enclosing class",
                "tnFile": "dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/AnnotationInjectedBeanPostProcessor.java",
                "tnLine": 441,
                "tnColumn": 13,
                "tnPatch": null,
                "tnCodeLine": "    private class AnnotatedInjectionMetadata extends InjectionMetadata {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ClassNewInstance",
                "tnDesc": "Class.newInstance() bypasses exception checking; prefer getDeclaredConstructor().newInstance()",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/extension/ExtensionLoader.java",
                "tnLine": 532,
                "tnColumn": 73,
                "tnPatch": null,
                "tnCodeLine": "                EXTENSION_INSTANCES.putIfAbsent(clazz, clazz.newInstance());",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ClassCanBeStatic",
                "tnDesc": "Inner class is non-static but does not reference enclosing class",
                "tnFile": "dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/textui/TTable.java",
                "tnLine": 442,
                "tnColumn": 12,
                "tnPatch": null,
                "tnCodeLine": "    public class Border {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Return value of methods returning Future must be checked. Ignoring returned Futures suppresses exceptions thrown from the code that completes the Future.",
                "tnFile": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/AccessLogFilter.java",
                "tnLine": 91,
                "tnColumn": 45,
                "tnPatch": null,
                "tnCodeLine": "        LOG_SCHEDULED.scheduleWithFixedDelay(this::writeLogToFile, LOG_OUTPUT_INTERVAL, LOG_OUTPUT_INTERVAL, TimeUnit.MILLISECONDS);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UnusedVariable",
                "tnDesc": "The field 'logger' is never read.",
                "tnFile": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/RegistryAwareClusterInvoker.java",
                "tnLine": 38,
                "tnColumn": 33,
                "tnPatch": null,
                "tnCodeLine": "    private static final Logger logger = LoggerFactory.getLogger(RegistryAwareClusterInvoker.class);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "StringSplitter",
                "tnDesc": "String.split(String) has surprising behavior",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/utils/NetUtils.java",
                "tnLine": 452,
                "tnColumn": 54,
                "tnPatch": null,
                "tnCodeLine": "                String[] rangeNumStrs = mask[i].split(\"-\");",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UnusedVariable",
                "tnDesc": "The assignment to this local variable 'json' is never read.",
                "tnFile": "dubbo-serialization/dubbo-serialization-gson/src/main/java/org/apache/dubbo/common/serialize/gson/GsonJsonObjectOutput.java",
                "tnLine": 100,
                "tnColumn": 14,
                "tnPatch": null,
                "tnCodeLine": "        json = null;",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.Result",
                "tnFile": "dubbo-monitor/dubbo-monitor-api/src/main/java/org/apache/dubbo/monitor/support/MonitorFilter.java",
                "tnLine": 92,
                "tnColumn": 30,
                "tnPatch": null,
                "tnCodeLine": "        return invoker.invoke(invocation); // proceed invocation chain",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UnnecessaryParentheses",
                "tnDesc": "Unnecessary use of grouping parentheses",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/io/Bytes.java",
                "tnLine": 318,
                "tnColumn": 18,
                "tnPatch": null,
                "tnCodeLine": "                ((b[off + 0]) << 24);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ReferenceEquality",
                "tnDesc": "Comparison using reference equality instead of value equality",
                "tnFile": "dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/decoder/HttpCommandDecoder.java",
                "tnLine": 55,
                "tnColumn": 48,
                "tnPatch": null,
                "tnCodeLine": "                } else if (request.getMethod() == HttpMethod.POST) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.AsyncRpcResult",
                "tnFile": "dubbo-filter/dubbo-filter-cache/src/main/java/org/apache/dubbo/cache/filter/CacheFilter.java",
                "tnLine": 101,
                "tnColumn": 68,
                "tnPatch": null,
                "tnCodeLine": "                        return AsyncRpcResult.newDefaultAsyncResult(((ValueWrapper) value).get(), invocation);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Return value of methods returning Future must be checked. Ignoring returned Futures suppresses exceptions thrown from the code that completes the Future.",
                "tnFile": "dubbo-registry/dubbo-registry-consul/src/main/java/org/apache/dubbo/registry/consul/ConsulRegistry.java",
                "tnLine": 149,
                "tnColumn": 32,
                "tnPatch": null,
                "tnCodeLine": "        notifierExecutor.submit(notifier);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JdkObsolete",
                "tnDesc": "It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/json/J2oVisitor.java",
                "tnLine": 354,
                "tnColumn": 29,
                "tnPatch": null,
                "tnCodeLine": "                    items = new LinkedList<Object>();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FallThrough",
                "tnDesc": "Execution may fall through from the previous case; add a `// fall through` comment before this line if it was deliberate",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/json/Yylex.java",
                "tnLine": 694,
                "tnColumn": 17,
                "tnPatch": null,
                "tnCodeLine": "                case 30:",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "InconsistentCapitalization",
                "tnDesc": "Found the field 'threadpool' with the same name as the parameter 'threadPool' but with different capitalization.",
                "tnFile": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/builders/ProviderBuilder.java",
                "tnLine": 158,
                "tnColumn": 46,
                "tnPatch": null,
                "tnCodeLine": "    public ProviderBuilder threadPool(String threadPool) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ClassCanBeStatic",
                "tnDesc": "Inner class is non-static but does not reference enclosing class",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/compiler/support/JdkCompiler.java",
                "tnLine": 243,
                "tnColumn": 19,
                "tnPatch": null,
                "tnCodeLine": "    private final class ClassLoaderImpl extends ClassLoader {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JdkObsolete",
                "tnDesc": "StringBuffer performs synchronization that is usually unnecessary; prefer StringBuilder.",
                "tnFile": "dubbo-rpc/dubbo-rpc-thrift/src/main/java/org/apache/dubbo/rpc/protocol/thrift/ThriftUtils.java",
                "tnLine": 47,
                "tnColumn": 20,
                "tnPatch": null,
                "tnCodeLine": "            return new StringBuffer(32)",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "StringSplitter",
                "tnDesc": "String.split(String) has surprising behavior",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/utils/StringUtils.java",
                "tnLine": 690,
                "tnColumn": 33,
                "tnPatch": null,
                "tnCodeLine": "        String[] tmp = str.split(itemSeparator);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FallThrough",
                "tnDesc": "Execution may fall through from the previous case; add a `// fall through` comment before this line if it was deliberate",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/json/Yylex.java",
                "tnLine": 775,
                "tnColumn": 17,
                "tnPatch": null,
                "tnCodeLine": "                case 45:",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "OperatorPrecedence",
                "tnDesc": "Use grouping parenthesis to make the operator precedence explicit",
                "tnFile": "dubbo-serialization/dubbo-serialization-protobuf-json/src/main/java/org/apache/dubbo/common/serialize/protobuf/support/ProtobufTypeBuilder.java",
                "tnLine": 230,
                "tnColumn": 43,
                "tnPatch": null,
                "tnCodeLine": "        if (methodName.equals(\"setField\") && types[0].equals(Descriptors.FieldDescriptor.class)",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UnusedVariable",
                "tnDesc": "The parameter 'group' is never read.",
                "tnFile": "dubbo-configcenter/dubbo-configcenter-apollo/src/main/java/org/apache/dubbo/configcenter/support/apollo/ApolloDynamicConfiguration.java",
                "tnLine": 188,
                "tnColumn": 68,
                "tnPatch": null,
                "tnCodeLine": "    private ApolloListener createTargetListener(String key, String group) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "DefaultCharset",
                "tnDesc": "Implicit use of the platform default charset, which can result in differing behaviour between JVM executions or incorrect behavior if the encoding of the data source doesn't match expectations.",
                "tnFile": "dubbo-serialization/dubbo-serialization-protobuf-json/src/main/java/org/apache/dubbo/common/serialize/protobuf/support/GenericProtobufObjectOutput.java",
                "tnLine": 79,
                "tnColumn": 24,
                "tnPatch": null,
                "tnCodeLine": "        writer.println(new String(b));",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "EqualsGetClass",
                "tnDesc": "Overriding Object#equals in a non-final class by using getClass rather than instanceof breaks substitutability of subclasses.",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/utils/Log.java",
                "tnLine": 74,
                "tnColumn": 20,
                "tnPatch": null,
                "tnCodeLine": "    public boolean equals(Object obj) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JdkObsolete",
                "tnDesc": "StringBuffer performs synchronization that is usually unnecessary; prefer StringBuilder.",
                "tnFile": "dubbo-remoting/dubbo-remoting-netty4/src/main/java/org/apache/dubbo/remoting/transport/netty4/logging/MessageFormatter.java",
                "tnLine": 181,
                "tnColumn": 29,
                "tnPatch": null,
                "tnCodeLine": "        StringBuffer sbuf = new StringBuffer(messagePattern.length() + 50);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.Result",
                "tnFile": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/protocol/ProtocolFilterWrapper.java",
                "tnLine": 150,
                "tnColumn": 54,
                "tnPatch": null,
                "tnCodeLine": "            Result asyncResult = filterInvoker.invoke(invocation);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UnnecessaryParentheses",
                "tnDesc": "Unnecessary use of grouping parentheses",
                "tnFile": "dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/RegistryProtocol.java",
                "tnLine": 388,
                "tnColumn": 17,
                "tnPatch": null,
                "tnCodeLine": "            if ((COMMA_SPLIT_PATTERN.split(group)).length > 1 || \"*\".equals(group)) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "NarrowingCompoundAssignment",
                "tnDesc": "Compound assignments from long to int hide lossy casts",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/io/StreamUtils.java",
                "tnLine": 80,
                "tnColumn": 27,
                "tnPatch": null,
                "tnCodeLine": "                mPosition += len;",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.Result",
                "tnFile": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncRpcResult.java",
                "tnLine": 174,
                "tnColumn": 30,
                "tnPatch": null,
                "tnCodeLine": "        return getAppResponse().getAttachment(key);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ClassCanBeStatic",
                "tnDesc": "Inner class is non-static but does not reference enclosing class",
                "tnFile": "dubbo-configcenter/dubbo-configcenter-apollo/src/main/java/org/apache/dubbo/configcenter/support/apollo/ApolloDynamicConfiguration.java",
                "tnLine": 192,
                "tnColumn": 12,
                "tnPatch": null,
                "tnCodeLine": "    public class ApolloListener implements ConfigChangeListener {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ReferenceEquality",
                "tnDesc": "Comparison using reference equality instead of value equality",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/logger/log4j2/Log4j2LoggerAdapter.java",
                "tnLine": 70,
                "tnColumn": 19,
                "tnPatch": null,
                "tnCodeLine": "        if (level == org.apache.logging.log4j.Level.WARN) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ChainingConstructorIgnoresParameter",
                "tnDesc": "The called constructor accepts a parameter with the same name and type as one of its caller's parameters, but its caller doesn't pass that parameter to it.  It's likely that it was intended to.",
                "tnFile": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/RpcInvocation.java",
                "tnLine": 63,
                "tnColumn": 13,
                "tnPatch": null,
                "tnCodeLine": "        this(invocation.getMethodName(), invocation.getParameterTypes(),",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.AsyncRpcResult",
                "tnFile": "dubbo-rpc/dubbo-rpc-redis/src/main/java/org/apache/dubbo/rpc/protocol/redis/RedisProtocol.java",
                "tnLine": 125,
                "tnColumn": 76,
                "tnPatch": null,
                "tnCodeLine": "                                return AsyncRpcResult.newDefaultAsyncResult(invocation);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.AsyncRpcResult",
                "tnFile": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncRpcResult.java",
                "tnLine": 233,
                "tnColumn": 37,
                "tnPatch": null,
                "tnCodeLine": "        return newDefaultAsyncResult(value, null, invocation);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.Result",
                "tnFile": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/RegistryAwareClusterInvoker.java",
                "tnLine": 56,
                "tnColumn": 38,
                "tnPatch": null,
                "tnCodeLine": "                return invoker.invoke(invocation);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "DefaultCharset",
                "tnDesc": "Implicit use of the platform default charset, which can result in differing behaviour between JVM executions or incorrect behavior if the encoding of the data source doesn't match expectations.",
                "tnFile": "dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/server/handler/HttpProcessHandler.java",
                "tnLine": 83,
                "tnColumn": 55,
                "tnPatch": null,
                "tnCodeLine": "                Unpooled.wrappedBuffer(result.getBytes()));",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "OperatorPrecedence",
                "tnDesc": "Use grouping parenthesis to make the operator precedence explicit",
                "tnFile": "dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/schema/DubboBeanDefinitionParser.java",
                "tnLine": 185,
                "tnColumn": 73,
                "tnPatch": null,
                "tnCodeLine": "                                            || \"delay\".equals(property) && \"0\".equals(value)",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UnnecessaryParentheses",
                "tnDesc": "Unnecessary use of grouping parentheses",
                "tnFile": "dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/telnet/support/command/LogTelnetHandler.java",
                "tnLine": 76,
                "tnColumn": 62,
                "tnPatch": null,
                "tnCodeLine": "                                buf.append(\"\\r\\nmodified:\" + (new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\")",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.Result",
                "tnFile": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/TokenFilter.java",
                "tnLine": 54,
                "tnColumn": 30,
                "tnPatch": null,
                "tnCodeLine": "        return invoker.invoke(inv);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.Result",
                "tnFile": "dubbo-rpc/dubbo-rpc-injvm/src/main/java/org/apache/dubbo/rpc/protocol/injvm/InjvmInvoker.java",
                "tnLine": 63,
                "tnColumn": 44,
                "tnPatch": null,
                "tnCodeLine": "        return exporter.getInvoker().invoke(invocation);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ClassNewInstance",
                "tnDesc": "Class.newInstance() bypasses exception checking; prefer getDeclaredConstructor().newInstance()",
                "tnFile": "dubbo-rpc/dubbo-rpc-thrift/src/main/java/org/apache/dubbo/rpc/protocol/thrift/ThriftCodec.java",
                "tnLine": 216,
                "tnColumn": 49,
                "tnPatch": null,
                "tnCodeLine": "                args = (TBase) clazz.newInstance();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UnusedVariable",
                "tnDesc": "The assignment to this local variable 'offset' is never read.",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/json/Yylex.java",
                "tnLine": 369,
                "tnColumn": 16,
                "tnPatch": null,
                "tnCodeLine": "        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Return value of methods returning Future must be checked. Ignoring returned Futures suppresses exceptions thrown from the code that completes the Future.",
                "tnFile": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/proxy/AbstractProxyInvoker.java",
                "tnLine": 87,
                "tnColumn": 32,
                "tnPatch": null,
                "tnCodeLine": "            future.whenComplete((obj, t) -> {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JdkObsolete",
                "tnDesc": "It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.",
                "tnFile": "dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/telnet/codec/TelnetCodec.java",
                "tnLine": 282,
                "tnColumn": 27,
                "tnPatch": null,
                "tnCodeLine": "                history = new LinkedList<String>();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.Result",
                "tnFile": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncRpcResult.java",
                "tnLine": 179,
                "tnColumn": 30,
                "tnPatch": null,
                "tnCodeLine": "        return getAppResponse().getAttachment(key, defaultValue);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UnusedVariable",
                "tnDesc": "The field 'logger' is never read.",
                "tnFile": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncContextImpl.java",
                "tnLine": 26,
                "tnColumn": 33,
                "tnPatch": null,
                "tnCodeLine": "    private static final Logger logger = LoggerFactory.getLogger(AsyncContextImpl.class);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.Result",
                "tnFile": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncRpcResult.java",
                "tnLine": 84,
                "tnColumn": 30,
                "tnPatch": null,
                "tnCodeLine": "        return getAppResponse().getException();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "NarrowingCompoundAssignment",
                "tnDesc": "Compound assignments from double to int hide lossy casts",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/Version.java",
                "tnLine": 133,
                "tnColumn": 15,
                "tnPatch": null,
                "tnCodeLine": "            v += Integer.parseInt(getPrefixDigits(vArr[i])) * Math.pow(10, (len - i - 1) * 2);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.Result",
                "tnFile": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/ConsumerContextFilter.java",
                "tnLine": 58,
                "tnColumn": 34,
                "tnPatch": null,
                "tnCodeLine": "            return invoker.invoke(invocation);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "Finally",
                "tnDesc": "If you return or throw from a finally, then values returned or thrown from the try-catch block will be ignored. Consider using try-with-resources instead.",
                "tnFile": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/listener/ListenerExporterWrapper.java",
                "tnLine": 86,
                "tnColumn": 21,
                "tnPatch": null,
                "tnCodeLine": "                    throw exception;",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ClassCanBeStatic",
                "tnDesc": "Inner class is non-static but does not reference enclosing class",
                "tnFile": "dubbo-rpc/dubbo-rpc-rest/src/main/java/org/apache/dubbo/rpc/protocol/rest/RestProtocol.java",
                "tnLine": 262,
                "tnColumn": 15,
                "tnPatch": null,
                "tnCodeLine": "    protected class ConnectionMonitor extends Thread {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.Result",
                "tnFile": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncRpcResult.java",
                "tnLine": 164,
                "tnColumn": 23,
                "tnPatch": null,
                "tnCodeLine": "        getAppResponse().setAttachments(map);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FallThrough",
                "tnDesc": "Execution may fall through from the previous case; add a `// fall through` comment before this line if it was deliberate",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/json/Yylex.java",
                "tnLine": 699,
                "tnColumn": 17,
                "tnPatch": null,
                "tnCodeLine": "                case 31:",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UnusedVariable",
                "tnDesc": "The field 'logger' is never read.",
                "tnFile": "dubbo-metadata-report/dubbo-metadata-report-zookeeper/src/main/java/org/apache/dubbo/metadata/store/zookeeper/ZookeeperMetadataReport.java",
                "tnLine": 35,
                "tnColumn": 33,
                "tnPatch": null,
                "tnCodeLine": "    private final static Logger logger = LoggerFactory.getLogger(ZookeeperMetadataReport.class);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JdkObsolete",
                "tnDesc": "It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.",
                "tnFile": "dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/AnnotationInjectedBeanPostProcessor.java",
                "tnLine": 149,
                "tnColumn": 90,
                "tnPatch": null,
                "tnCodeLine": "        final List<AnnotationInjectedBeanPostProcessor.AnnotatedFieldElement> elements = new LinkedList<AnnotationInjectedBeanPostProcessor.AnnotatedFieldElement>();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "StringSplitter",
                "tnDesc": "String.split(String) has surprising behavior",
                "tnFile": "dubbo-rpc/dubbo-rpc-rest/src/main/java/org/apache/dubbo/rpc/protocol/rest/RpcContextFilter.java",
                "tnLine": 56,
                "tnColumn": 47,
                "tnPatch": null,
                "tnCodeLine": "            for (String header : headers.split(\",\")) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.Result",
                "tnFile": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/MergeableClusterInvoker.java",
                "tnLine": 96,
                "tnColumn": 73,
                "tnPatch": null,
                "tnCodeLine": "            results.put(invoker.getUrl().getServiceKey(), invoker.invoke(subInvocation));",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.Result",
                "tnFile": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncRpcResult.java",
                "tnLine": 96,
                "tnColumn": 30,
                "tnPatch": null,
                "tnCodeLine": "        return getAppResponse().hasException();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "StringSplitter",
                "tnDesc": "String.split(String) has surprising behavior",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/Version.java",
                "tnLine": 130,
                "tnColumn": 38,
                "tnPatch": null,
                "tnCodeLine": "        String[] vArr = version.split(\"\\\\.\");",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "OperatorPrecedence",
                "tnDesc": "Use grouping parenthesis to make the operator precedence explicit",
                "tnFile": "dubbo-serialization/dubbo-serialization-protobuf-json/src/main/java/org/apache/dubbo/common/serialize/protobuf/support/ProtobufTypeBuilder.java",
                "tnLine": 231,
                "tnColumn": 58,
                "tnPatch": null,
                "tnCodeLine": "                || methodName.equals(\"setUnknownFields\") && types[0].equals(UnknownFieldSet.class)",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "DefaultCharset",
                "tnDesc": "Implicit use of the platform default charset, which can result in differing behaviour between JVM executions or incorrect behavior if the encoding of the data source doesn't match expectations.",
                "tnFile": "dubbo-serialization/dubbo-serialization-protostuff/src/main/java/org/apache/dubbo/common/serialize/protostuff/ProtostuffObjectOutput.java",
                "tnLine": 54,
                "tnColumn": 66,
                "tnPatch": null,
                "tnCodeLine": "                classNameBytes = Wrapper.class.getName().getBytes();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ReferenceEquality",
                "tnDesc": "Comparison using reference equality instead of value equality",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/bytecode/Wrapper.java",
                "tnLine": 176,
                "tnColumn": 27,
                "tnPatch": null,
                "tnCodeLine": "                    if (m != m2 && m.getName().equals(m2.getName())) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JavaLangClash",
                "tnDesc": "org.apache.dubbo.common.compiler.Compiler clashes with java.lang.Compiler",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/compiler/Compiler.java",
                "tnLine": 25,
                "tnColumn": 8,
                "tnPatch": null,
                "tnCodeLine": "public interface Compiler {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UnusedVariable",
                "tnDesc": "The parameter 'instid' is never read.",
                "tnFile": "dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/CallbackServiceCodec.java",
                "tnLine": 216,
                "tnColumn": 102,
                "tnPatch": null,
                "tnCodeLine": "    private static boolean isInstancesOverLimit(Channel channel, URL url, String interfaceClass, int instid, boolean isServer) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "BoxedPrimitiveConstructor",
                "tnDesc": "valueOf or autoboxing provides better time and space performance",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/json/GenericJSONConverter.java",
                "tnLine": 283,
                "tnColumn": 28,
                "tnPatch": null,
                "tnCodeLine": "                    return new Double(((Number) jv).doubleValue());",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UnusedVariable",
                "tnDesc": "The field 'logger' is never read.",
                "tnFile": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/proxy/InvokerInvocationHandler.java",
                "tnLine": 31,
                "tnColumn": 33,
                "tnPatch": null,
                "tnCodeLine": "    private static final Logger logger = LoggerFactory.getLogger(InvokerInvocationHandler.class);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ReferenceEquality",
                "tnDesc": "Comparison using reference equality instead of value equality",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/logger/log4j2/Log4j2LoggerAdapter.java",
                "tnLine": 73,
                "tnColumn": 19,
                "tnPatch": null,
                "tnCodeLine": "        if (level == org.apache.logging.log4j.Level.ERROR) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "BadImport",
                "tnDesc": "Importing nested classes/static methods/static fields with commonly-used names can make code harder to read, because it may not be clear from the context exactly which type is being referred to. Qualifying the name with that of the containing class can make the code clearer.",
                "tnFile": "dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/ServiceAnnotationBeanPostProcessor.java",
                "tnLine": 373,
                "tnColumn": 41,
                "tnPatch": null,
                "tnCodeLine": "        String[] ignoreAttributeNames = of(\"provider\", \"monitor\", \"application\", \"module\", \"registry\", \"protocol\",",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "MixedMutabilityReturnType",
                "tnDesc": "This method returns both mutable and immutable collections or maps from different paths. This may be confusing for users of the method.",
                "tnFile": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/merger/ListMerger.java",
                "tnLine": 30,
                "tnColumn": 25,
                "tnPatch": null,
                "tnCodeLine": "    public List<Object> merge(List<?>... items) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "DefaultCharset",
                "tnDesc": "Implicit use of the platform default charset, which can result in differing behaviour between JVM executions or incorrect behavior if the encoding of the data source doesn't match expectations.",
                "tnFile": "dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/server/handler/HttpProcessHandler.java",
                "tnLine": 100,
                "tnColumn": 63,
                "tnPatch": null,
                "tnCodeLine": "                , Unpooled.wrappedBuffer(errorMessage.getBytes()));",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.Result",
                "tnFile": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/listener/ListenerInvokerWrapper.java",
                "tnLine": 78,
                "tnColumn": 30,
                "tnPatch": null,
                "tnCodeLine": "        return invoker.invoke(invocation);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "InconsistentCapitalization",
                "tnDesc": "Found the field 'corethreads' with the same name as the parameter 'coreThreads' but with different capitalization.",
                "tnFile": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/builders/ConsumerBuilder.java",
                "tnLine": 79,
                "tnColumn": 48,
                "tnPatch": null,
                "tnCodeLine": "    public ConsumerBuilder coreThreads(Integer coreThreads) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "DefaultCharset",
                "tnDesc": "Implicit use of the platform default charset, which can result in differing behaviour between JVM executions or incorrect behavior if the encoding of the data source doesn't match expectations.",
                "tnFile": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/file/FileRouterFactory.java",
                "tnLine": 59,
                "tnColumn": 40,
                "tnPatch": null,
                "tnCodeLine": "            String rule = IOUtils.read(new FileReader(new File(url.getAbsolutePath())));",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.AsyncRpcResult",
                "tnFile": "dubbo-monitor/dubbo-monitor-default/src/main/java/org/apache/dubbo/monitor/dubbo/MetricsFilter.java",
                "tnLine": 240,
                "tnColumn": 60,
                "tnPatch": null,
                "tnCodeLine": "                return AsyncRpcResult.newDefaultAsyncResult(JSON.toJSONString(res), invocation);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ReferenceEquality",
                "tnDesc": "Comparison using reference equality instead of value equality",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/logger/jdk/JdkLoggerAdapter.java",
                "tnLine": 93,
                "tnColumn": 19,
                "tnPatch": null,
                "tnCodeLine": "        if (level == java.util.logging.Level.FINE) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "IntLongMath",
                "tnDesc": "Expression of type int may overflow before being assigned to a long",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/io/StreamUtils.java",
                "tnLine": 72,
                "tnColumn": 34,
                "tnPatch": null,
                "tnCodeLine": "                    len = mLimit - mPosition;",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ClassNewInstance",
                "tnDesc": "Class.newInstance() bypasses exception checking; prefer getDeclaredConstructor().newInstance()",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/utils/CompatibleTypeUtils.java",
                "tnLine": 145,
                "tnColumn": 70,
                "tnPatch": null,
                "tnCodeLine": "                    Collection result = (Collection) type.newInstance();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Return value of methods returning Future must be checked. Ignoring returned Futures suppresses exceptions thrown from the code that completes the Future.",
                "tnFile": "dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DubboProtocol.java",
                "tnLine": 159,
                "tnColumn": 22,
                "tnPatch": null,
                "tnCodeLine": "                reply((ExchangeChannel) channel, message);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.Result",
                "tnFile": "dubbo-filter/dubbo-filter-validation/src/main/java/org/apache/dubbo/validation/filter/ValidationFilter.java",
                "tnLine": 96,
                "tnColumn": 30,
                "tnPatch": null,
                "tnCodeLine": "        return invoker.invoke(invocation);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "OperatorPrecedence",
                "tnDesc": "Use grouping parenthesis to make the operator precedence explicit",
                "tnFile": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/support/MockInvoker.java",
                "tnLine": 76,
                "tnColumn": 65,
                "tnPatch": null,
                "tnCodeLine": "        } else if (mock.length() >= 2 && (mock.startsWith(\"\\\"\") && mock.endsWith(\"\\\"\")",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ClassCanBeStatic",
                "tnDesc": "Inner class is non-static but does not reference enclosing class",
                "tnFile": "dubbo-configcenter/dubbo-configcenter-nacos/src/main/java/org/apache/dubbo/configcenter/support/nacos/NacosDynamicConfiguration.java",
                "tnLine": 224,
                "tnColumn": 12,
                "tnPatch": null,
                "tnCodeLine": "    public class NacosConfigListener extends AbstractSharedListener {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Return value of methods returning Future must be checked. Ignoring returned Futures suppresses exceptions thrown from the code that completes the Future.",
                "tnFile": "dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/server/Server.java",
                "tnLine": 114,
                "tnColumn": 36,
                "tnPatch": null,
                "tnCodeLine": "            boss.shutdownGracefully();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.Result",
                "tnFile": "dubbo-filter/dubbo-filter-cache/src/main/java/org/apache/dubbo/cache/filter/CacheFilter.java",
                "tnLine": 113,
                "tnColumn": 30,
                "tnPatch": null,
                "tnCodeLine": "        return invoker.invoke(invocation);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "HidingField",
                "tnDesc": "Hiding fields of superclasses may cause confusion and errors. This field is hiding a field of the same name in superclass: AbstractRegistry",
                "tnFile": "dubbo-registry/dubbo-registry-nacos/src/main/java/org/apache/dubbo/registry/nacos/NacosRegistry.java",
                "tnLine": 115,
                "tnColumn": 26,
                "tnPatch": null,
                "tnCodeLine": "    private final Logger logger = LoggerFactory.getLogger(getClass());",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "DefaultCharset",
                "tnDesc": "Implicit use of the platform default charset, which can result in differing behaviour between JVM executions or incorrect behavior if the encoding of the data source doesn't match expectations.",
                "tnFile": "dubbo-serialization/dubbo-serialization-protostuff/src/main/java/org/apache/dubbo/common/serialize/protostuff/ProtostuffObjectOutput.java",
                "tnLine": 107,
                "tnColumn": 34,
                "tnPatch": null,
                "tnCodeLine": "        byte[] bytes = v.getBytes();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.AsyncRpcResult",
                "tnFile": "dubbo-filter/dubbo-filter-cache/src/main/java/org/apache/dubbo/cache/filter/CacheFilter.java",
                "tnLine": 103,
                "tnColumn": 68,
                "tnPatch": null,
                "tnCodeLine": "                        return AsyncRpcResult.newDefaultAsyncResult(value, invocation);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Return value of methods returning Future must be checked. Ignoring returned Futures suppresses exceptions thrown from the code that completes the Future.",
                "tnFile": "dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/server/Server.java",
                "tnLine": 100,
                "tnColumn": 44,
                "tnPatch": null,
                "tnCodeLine": "            serverBootstrap.bind(port).sync();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, java.util.concurrent.CompletableFuture<org.apache.dubbo.rpc.Result>",
                "tnFile": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/Result.java",
                "tnLine": 141,
                "tnColumn": 35,
                "tnPatch": null,
                "tnCodeLine": "        return toCompletableFuture();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "TypeParameterUnusedInFormals",
                "tnDesc": "Declaring a type parameter that is only used in the return type is a misuse of generics: operations on the type parameter are unchecked, it hides unsafe casts at invocations of the method, and it interacts badly with method overload resolution.",
                "tnFile": "dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/AbstractAnnotationConfigBeanBuilder.java",
                "tnLine": 207,
                "tnColumn": 68,
                "tnPatch": null,
                "tnCodeLine": "    public <T extends AbstractAnnotationConfigBeanBuilder<A, B>> T interfaceClass(Class<?> interfaceClass) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Return value of methods returning Future must be checked. Ignoring returned Futures suppresses exceptions thrown from the code that completes the Future.",
                "tnFile": "dubbo-rpc/dubbo-rpc-thrift/src/main/java/org/apache/dubbo/rpc/protocol/thrift/ThriftProtocol.java",
                "tnLine": 109,
                "tnColumn": 22,
                "tnPatch": null,
                "tnCodeLine": "                reply((ExchangeChannel) channel, message);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Return value of methods returning Future must be checked. Ignoring returned Futures suppresses exceptions thrown from the code that completes the Future.",
                "tnFile": "dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/RegistryProtocol.java",
                "tnLine": 685,
                "tnColumn": 28,
                "tnPatch": null,
                "tnCodeLine": "            executor.submit(() -> {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UnusedMethod",
                "tnDesc": "Private method 'stop' is never used.",
                "tnFile": "dubbo-configcenter/dubbo-configcenter-consul/src/main/java/org/apache/dubbo/configcenter/consul/ConsulDynamicConfiguration.java",
                "tnLine": 208,
                "tnColumn": 22,
                "tnPatch": null,
                "tnCodeLine": "        private void stop() {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.Result",
                "tnFile": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/RegistryAwareClusterInvoker.java",
                "tnLine": 50,
                "tnColumn": 38,
                "tnPatch": null,
                "tnCodeLine": "                return invoker.invoke(invocation);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "DefaultCharset",
                "tnDesc": "Implicit use of the platform default charset, which can result in differing behaviour between JVM executions or incorrect behavior if the encoding of the data source doesn't match expectations.",
                "tnFile": "dubbo-remoting/dubbo-remoting-zookeeper/src/main/java/org/apache/dubbo/remoting/zookeeper/curator/CuratorZookeeperClient.java",
                "tnLine": 71,
                "tnColumn": 77,
                "tnPatch": null,
                "tnCodeLine": "                builder = builder.authorization(\"digest\", authority.getBytes());",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Return value of methods returning Future must be checked. Ignoring returned Futures suppresses exceptions thrown from the code that completes the Future.",
                "tnFile": "dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/server/handler/TelnetProcessHandler.java",
                "tnLine": 62,
                "tnColumn": 34,
                "tnPatch": null,
                "tnCodeLine": "                ctx.writeAndFlush(msg + \" :fail to execute commandContext by \" + ex.getMessage());",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UnusedVariable",
                "tnDesc": "The field 'logger' is never read.",
                "tnFile": "dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/schema/DubboBeanDefinitionParser.java",
                "tnLine": 63,
                "tnColumn": 33,
                "tnPatch": null,
                "tnCodeLine": "    private static final Logger logger = LoggerFactory.getLogger(DubboBeanDefinitionParser.class);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.Result",
                "tnFile": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/MergeableClusterInvoker.java",
                "tnLine": 71,
                "tnColumn": 46,
                "tnPatch": null,
                "tnCodeLine": "                        return invoker.invoke(invocation);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ClassNewInstance",
                "tnDesc": "Class.newInstance() bypasses exception checking; prefer getDeclaredConstructor().newInstance()",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/bytecode/Mixin.java",
                "tnLine": 177,
                "tnColumn": 45,
                "tnPatch": null,
                "tnCodeLine": "            return (Mixin) mixin.newInstance();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "StringSplitter",
                "tnDesc": "String.split(String) has surprising behavior",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/bytecode/ClassGenerator.java",
                "tnLine": 336,
                "tnColumn": 65,
                "tnPatch": null,
                "tnCodeLine": "                        String[] sn = mCtc.getSimpleName().split(\"\\\\$+\"); // inner class name include $.",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "TypeParameterUnusedInFormals",
                "tnDesc": "Declaring a type parameter that is only used in the return type is a misuse of generics: operations on the type parameter are unchecked, it hides unsafe casts at invocations of the method, and it interacts badly with method overload resolution.",
                "tnFile": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/configurator/parser/ConfigParser.java",
                "tnLine": 59,
                "tnColumn": 26,
                "tnPatch": null,
                "tnCodeLine": "    private static <T> T parseObject(String rawConfig) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FallThrough",
                "tnDesc": "Execution may fall through from the previous case; add a `// fall through` comment before this line if it was deliberate",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/json/Yylex.java",
                "tnLine": 715,
                "tnColumn": 17,
                "tnPatch": null,
                "tnCodeLine": "                case 34:",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.Result",
                "tnFile": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/AccessLogFilter.java",
                "tnLine": 113,
                "tnColumn": 30,
                "tnPatch": null,
                "tnCodeLine": "        return invoker.invoke(inv);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UnusedVariable",
                "tnDesc": "The field 'logger' is never read.",
                "tnFile": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/directory/AbstractDirectory.java",
                "tnLine": 45,
                "tnColumn": 33,
                "tnPatch": null,
                "tnCodeLine": "    private static final Logger logger = LoggerFactory.getLogger(AbstractDirectory.class);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "DefaultCharset",
                "tnDesc": "Implicit use of the platform default charset, which can result in differing behaviour between JVM executions or incorrect behavior if the encoding of the data source doesn't match expectations.",
                "tnFile": "dubbo-serialization/dubbo-serialization-fastjson/src/main/java/org/apache/dubbo/common/serialize/fastjson/FastJsonObjectOutput.java",
                "tnLine": 88,
                "tnColumn": 24,
                "tnPatch": null,
                "tnCodeLine": "        writer.println(new String(b));",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UnnecessaryParentheses",
                "tnDesc": "Unnecessary use of grouping parentheses",
                "tnFile": "dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/exchange/support/DefaultFuture.java",
                "tnLine": 224,
                "tnColumn": 19,
                "tnPatch": null,
                "tnCodeLine": "                + (new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS\").format(new Date())) + \",\"",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.Result",
                "tnFile": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/wrapper/MockClusterInvoker.java",
                "tnLine": 97,
                "tnColumn": 38,
                "tnPatch": null,
                "tnCodeLine": "                result = doMockInvoke(invocation, e);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UnusedVariable",
                "tnDesc": "The field 'applicationContext' is never read.",
                "tnFile": "dubbo-rpc/dubbo-rpc-xml/src/main/java/org/apache/dubbo/xml/rpc/protocol/xmlrpc/XmlRpcProxyFactoryBean.java",
                "tnLine": 48,
                "tnColumn": 32,
                "tnPatch": null,
                "tnCodeLine": "    private ApplicationContext applicationContext;",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "OperatorPrecedence",
                "tnDesc": "Use grouping parenthesis to make the operator precedence explicit",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/io/Bytes.java",
                "tnLine": 550,
                "tnColumn": 38,
                "tnPatch": null,
                "tnCodeLine": "            cs[w++] = code[(b2 << 2) & MASK6 | (b3 >> 6)];",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ModifyCollectionInEnhancedForLoop",
                "tnDesc": "Modifying a collection while iterating over it in a loop may cause a ConcurrentModificationException to be thrown.",
                "tnFile": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/protocol/AbstractProtocol.java",
                "tnLine": 63,
                "tnColumn": 32,
                "tnPatch": null,
                "tnCodeLine": "                invokers.remove(invoker);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "BadImport",
                "tnDesc": "Importing nested classes/static methods/static fields with commonly-used names can make code harder to read, because it may not be clear from the context exactly which type is being referred to. Qualifying the name with that of the containing class can make the code clearer.",
                "tnFile": "dubbo-compatible/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/CompatibleReferenceBeanBuilder.java",
                "tnLine": 47,
                "tnColumn": 48,
                "tnPatch": null,
                "tnCodeLine": "    static final String[] IGNORE_FIELD_NAMES = of(\"application\", \"module\", \"consumer\", \"monitor\", \"registry\");",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "StringSplitter",
                "tnDesc": "String.split(String) has surprising behavior",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/URL.java",
                "tnLine": 212,
                "tnColumn": 56,
                "tnPatch": null,
                "tnCodeLine": "            String[] parts = url.substring(i + 1).split(\"&\");",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.Result",
                "tnFile": "dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/filter/FutureFilter.java",
                "tnLine": 54,
                "tnColumn": 30,
                "tnPatch": null,
                "tnCodeLine": "        return invoker.invoke(invocation);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FallThrough",
                "tnDesc": "Execution may fall through from the previous case; add a `// fall through` comment before this line if it was deliberate",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/json/JSONWriter.java",
                "tnLine": 286,
                "tnColumn": 13,
                "tnPatch": null,
                "tnCodeLine": "            case OBJECT:",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "MixedMutabilityReturnType",
                "tnDesc": "This method returns both mutable and immutable collections or maps from different paths. This may be confusing for users of the method.",
                "tnFile": "dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/annotation/DubboComponentScanRegistrar.java",
                "tnLine": 95,
                "tnColumn": 25,
                "tnPatch": null,
                "tnCodeLine": "    private Set<String> getPackagesToScan(AnnotationMetadata metadata) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Return value of methods returning Future must be checked. Ignoring returned Futures suppresses exceptions thrown from the code that completes the Future.",
                "tnFile": "dubbo-remoting/dubbo-remoting-netty4/src/main/java/org/apache/dubbo/remoting/transport/netty4/NettyServer.java",
                "tnLine": 149,
                "tnColumn": 45,
                "tnPatch": null,
                "tnCodeLine": "                bossGroup.shutdownGracefully();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "OperatorPrecedence",
                "tnDesc": "Use grouping parenthesis to make the operator precedence explicit",
                "tnFile": "dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/exchange/codec/ExchangeCodec.java",
                "tnLine": 88,
                "tnColumn": 26,
                "tnPatch": null,
                "tnCodeLine": "        if (readable > 0 && header[0] != MAGIC_HIGH",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Return value of methods returning Future must be checked. Ignoring returned Futures suppresses exceptions thrown from the code that completes the Future.",
                "tnFile": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ServiceConfig.java",
                "tnLine": 376,
                "tnColumn": 43,
                "tnPatch": null,
                "tnCodeLine": "            DELAY_EXPORT_EXECUTOR.schedule(this::doExport, getDelay(), TimeUnit.MILLISECONDS);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UnusedVariable",
                "tnDesc": "The parameter 'remoteAddress' is never read.",
                "tnFile": "dubbo-remoting/dubbo-remoting-p2p/src/main/java/org/apache/dubbo/remoting/p2p/exchange/support/MulticastExchangeGroup.java",
                "tnLine": 97,
                "tnColumn": 56,
                "tnPatch": null,
                "tnCodeLine": "    private void receive(String msg, InetSocketAddress remoteAddress) throws RemotingException {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Return value of methods returning Future must be checked. Ignoring returned Futures suppresses exceptions thrown from the code that completes the Future.",
                "tnFile": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/protocol/ProtocolFilterWrapper.java",
                "tnLine": 162,
                "tnColumn": 42,
                "tnPatch": null,
                "tnCodeLine": "                        filter.onResponse(r, filterInvoker, invocation);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Return value of methods returning Future must be checked. Ignoring returned Futures suppresses exceptions thrown from the code that completes the Future.",
                "tnFile": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/protocol/ProtocolFilterWrapper.java",
                "tnLine": 152,
                "tnColumn": 45,
                "tnPatch": null,
                "tnCodeLine": "            asyncResult.thenApplyWithContext(r -> {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.AsyncRpcResult",
                "tnFile": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/MergeableClusterInvoker.java",
                "tnLine": 174,
                "tnColumn": 52,
                "tnPatch": null,
                "tnCodeLine": "        return AsyncRpcResult.newDefaultAsyncResult(result, invocation);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ClassNewInstance",
                "tnDesc": "Class.newInstance() bypasses exception checking; prefer getDeclaredConstructor().newInstance()",
                "tnFile": "dubbo-rpc/dubbo-rpc-thrift/src/main/java/org/apache/dubbo/rpc/protocol/thrift/ThriftCodec.java",
                "tnLine": 447,
                "tnColumn": 45,
                "tnPatch": null,
                "tnCodeLine": "            args = (TBase) clazz.newInstance();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ClassNewInstance",
                "tnDesc": "Class.newInstance() bypasses exception checking; prefer getDeclaredConstructor().newInstance()",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/compiler/support/ClassUtils.java",
                "tnLine": 51,
                "tnColumn": 45,
                "tnPatch": null,
                "tnCodeLine": "            return forName(name).newInstance();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.AsyncRpcResult",
                "tnFile": "dubbo-rpc/dubbo-rpc-memcached/src/main/java/org/apache/dubbo/rpc/protocol/memcached/MemcachedProtocol.java",
                "tnLine": 95,
                "tnColumn": 68,
                "tnPatch": null,
                "tnCodeLine": "                        return AsyncRpcResult.newDefaultAsyncResult(value, invocation);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "DefaultCharset",
                "tnDesc": "Implicit use of the platform default charset, which can result in differing behaviour between JVM executions or incorrect behavior if the encoding of the data source doesn't match expectations.",
                "tnFile": "dubbo-rpc/dubbo-rpc-redis/src/main/java/org/apache/dubbo/rpc/protocol/redis/RedisProtocol.java",
                "tnLine": 133,
                "tnColumn": 95,
                "tnPatch": null,
                "tnCodeLine": "                            byte[] key = String.valueOf(invocation.getArguments()[0]).getBytes();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UnnecessaryParentheses",
                "tnDesc": "Unnecessary use of grouping parentheses",
                "tnFile": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncRpcResult.java",
                "tnLine": 136,
                "tnColumn": 16,
                "tnPatch": null,
                "tnCodeLine": "        return (new AppResponse()).recreate();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UnusedVariable",
                "tnDesc": "The field 'executor' is never read.",
                "tnFile": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/MergeableClusterInvoker.java",
                "tnLine": 57,
                "tnColumn": 29,
                "tnPatch": null,
                "tnCodeLine": "    private ExecutorService executor = Executors.newCachedThreadPool(new NamedThreadFactory(\"mergeable-cluster-executor\", true));",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UnnecessaryParentheses",
                "tnDesc": "Unnecessary use of grouping parentheses",
                "tnFile": "dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/ServiceBean.java",
                "tnLine": 196,
                "tnColumn": 13,
                "tnPatch": null,
                "tnCodeLine": "        if ((CollectionUtils.isEmpty(getRegistries()))",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.Result",
                "tnFile": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/MergeableClusterInvoker.java",
                "tnLine": 106,
                "tnColumn": 43,
                "tnPatch": null,
                "tnCodeLine": "                Result r = asyncResult.get();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "BoxedPrimitiveConstructor",
                "tnDesc": "valueOf or autoboxing provides better time and space performance",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/json/GenericJSONConverter.java",
                "tnLine": 261,
                "tnColumn": 28,
                "tnPatch": null,
                "tnCodeLine": "                    return new Float(((Number) jv).floatValue());",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ClassNewInstance",
                "tnDesc": "Class.newInstance() bypasses exception checking; prefer getDeclaredConstructor().newInstance()",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/json/J2oVisitor.java",
                "tnLine": 260,
                "tnColumn": 43,
                "tnPatch": null,
                "tnCodeLine": "                mValue = mType.newInstance();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "NarrowingCompoundAssignment",
                "tnDesc": "Compound assignments from long to int hide lossy casts",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/io/UnsafeByteArrayInputStream.java",
                "tnLine": 79,
                "tnColumn": 19,
                "tnPatch": null,
                "tnCodeLine": "        mPosition += len;",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ClassNewInstance",
                "tnDesc": "Class.newInstance() bypasses exception checking; prefer getDeclaredConstructor().newInstance()",
                "tnFile": "dubbo-rpc/dubbo-rpc-thrift/src/main/java/org/apache/dubbo/rpc/protocol/thrift/ThriftCodec.java",
                "tnLine": 571,
                "tnColumn": 50,
                "tnPatch": null,
                "tnCodeLine": "            resultObj = (TBase) clazz.newInstance();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.Result",
                "tnFile": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/FailsafeClusterInvoker.java",
                "tnLine": 50,
                "tnColumn": 34,
                "tnPatch": null,
                "tnCodeLine": "            return invoker.invoke(invocation);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "DefaultCharset",
                "tnDesc": "Implicit use of the platform default charset, which can result in differing behaviour between JVM executions or incorrect behavior if the encoding of the data source doesn't match expectations.",
                "tnFile": "dubbo-serialization/dubbo-serialization-gson/src/main/java/org/apache/dubbo/common/serialize/gson/GsonJsonObjectInput.java",
                "tnLine": 87,
                "tnColumn": 35,
                "tnPatch": null,
                "tnCodeLine": "        return readLine().getBytes();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.AsyncRpcResult",
                "tnFile": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncRpcResult.java",
                "tnLine": 229,
                "tnColumn": 37,
                "tnPatch": null,
                "tnCodeLine": "        return newDefaultAsyncResult(null, null, invocation);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.Result",
                "tnFile": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/wrapper/MockClusterInvoker.java",
                "tnLine": 115,
                "tnColumn": 37,
                "tnPatch": null,
                "tnCodeLine": "            result = minvoker.invoke(invocation);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JdkObsolete",
                "tnDesc": "It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.",
                "tnFile": "dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/AnnotationInjectedBeanPostProcessor.java",
                "tnLine": 181,
                "tnColumn": 91,
                "tnPatch": null,
                "tnCodeLine": "        final List<AnnotationInjectedBeanPostProcessor.AnnotatedMethodElement> elements = new LinkedList<AnnotationInjectedBeanPostProcessor.AnnotatedMethodElement>();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "StringSplitter",
                "tnDesc": "String.split(String) has surprising behavior",
                "tnFile": "dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DubboProtocol.java",
                "tnLine": 135,
                "tnColumn": 56,
                "tnPatch": null,
                "tnCodeLine": "                    String[] methods = methodsStr.split(\",\");",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "EqualsHashCode",
                "tnDesc": "Classes that override equals should also override hashCode.",
                "tnFile": "dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/buffer/AbstractChannelBuffer.java",
                "tnLine": 312,
                "tnColumn": 20,
                "tnPatch": null,
                "tnCodeLine": "    public boolean equals(Object o) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "BoxedPrimitiveConstructor",
                "tnDesc": "valueOf or autoboxing provides better time and space performance",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/utils/CompatibleTypeUtils.java",
                "tnLine": 77,
                "tnColumn": 24,
                "tnPatch": null,
                "tnCodeLine": "                return new Float(string);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "StringSplitter",
                "tnDesc": "String.split(String) has surprising behavior",
                "tnFile": "dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/telnet/CountTelnetHandler.java",
                "tnLine": 54,
                "tnColumn": 39,
                "tnPatch": null,
                "tnCodeLine": "        String[] parts = message.split(\"\\\\s+\");",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "DefaultCharset",
                "tnDesc": "Implicit use of the platform default charset, which can result in differing behaviour between JVM executions or incorrect behavior if the encoding of the data source doesn't match expectations.",
                "tnFile": "dubbo-registry/dubbo-registry-multicast/src/main/java/org/apache/dubbo/registry/multicast/MulticastRegistry.java",
                "tnLine": 247,
                "tnColumn": 48,
                "tnPatch": null,
                "tnCodeLine": "            byte[] data = (msg + \"\\n\").getBytes();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.Result",
                "tnFile": "dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/filter/TraceFilter.java",
                "tnLine": 81,
                "tnColumn": 39,
                "tnPatch": null,
                "tnCodeLine": "        Result result = invoker.invoke(invocation);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "BadImport",
                "tnDesc": "Importing nested classes/static methods/static fields with commonly-used names can make code harder to read, because it may not be clear from the context exactly which type is being referred to. Qualifying the name with that of the containing class can make the code clearer.",
                "tnFile": "dubbo-serialization/dubbo-serialization-protobuf-json/src/main/java/org/apache/dubbo/common/serialize/protobuf/support/ProtobufUtils.java",
                "tnLine": 42,
                "tnColumn": 9,
                "tnPatch": null,
                "tnCodeLine": "        Builder builder;",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "MixedMutabilityReturnType",
                "tnDesc": "This method returns both mutable and immutable collections or maps from different paths. This may be confusing for users of the method.",
                "tnFile": "dubbo-compatible/src/main/java/org/apache/dubbo/config/spring/context/annotation/CompatibleDubboComponentScanRegistrar.java",
                "tnLine": 92,
                "tnColumn": 25,
                "tnPatch": null,
                "tnCodeLine": "    private Set<String> getPackagesToScan(AnnotationMetadata metadata) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, java.util.concurrent.CompletableFuture<org.apache.dubbo.rpc.Result>",
                "tnFile": "dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DubboProtocol.java",
                "tnLine": 153,
                "tnColumn": 43,
                "tnPatch": null,
                "tnCodeLine": "            return result.completionFuture().thenApply(Function.identity());",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.Result",
                "tnFile": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/protocol/AbstractInvoker.java",
                "tnLine": 155,
                "tnColumn": 28,
                "tnPatch": null,
                "tnCodeLine": "            return doInvoke(invocation);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JavaLangClash",
                "tnDesc": "com.alibaba.dubbo.common.compiler.Compiler clashes with java.lang.Compiler",
                "tnFile": "dubbo-compatible/src/main/java/com/alibaba/dubbo/common/compiler/Compiler.java",
                "tnLine": 21,
                "tnColumn": 8,
                "tnPatch": null,
                "tnCodeLine": "public interface Compiler extends org.apache.dubbo.common.compiler.Compiler {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "BoxedPrimitiveConstructor",
                "tnDesc": "valueOf or autoboxing provides better time and space performance",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/utils/CompatibleTypeUtils.java",
                "tnLine": 81,
                "tnColumn": 24,
                "tnPatch": null,
                "tnCodeLine": "                return new Boolean(string);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "DefaultCharset",
                "tnDesc": "Implicit use of the platform default charset, which can result in differing behaviour between JVM executions or incorrect behavior if the encoding of the data source doesn't match expectations.",
                "tnFile": "dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/server/handler/QosProcessHandler.java",
                "tnLine": 60,
                "tnColumn": 70,
                "tnPatch": null,
                "tnCodeLine": "                    ctx.write(Unpooled.wrappedBuffer(welcome.getBytes()));",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "InconsistentCapitalization",
                "tnDesc": "Found the field 'registryUrl' with the same name as the parameter 'registryURL' but with different capitalization.",
                "tnFile": "dubbo-registry/dubbo-registry-multiple/src/main/java/org/apache/dubbo/registry/multiple/MultipleRegistry.java",
                "tnLine": 235,
                "tnColumn": 40,
                "tnPatch": null,
                "tnCodeLine": "        public void putRegistryMap(URL registryURL, SingleNotifyListener singleNotifyListener) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.Result",
                "tnFile": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/wrapper/MockClusterInvoker.java",
                "tnLine": 88,
                "tnColumn": 45,
                "tnPatch": null,
                "tnCodeLine": "                result = this.invoker.invoke(invocation);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Return value of methods returning Future must be checked. Ignoring returned Futures suppresses exceptions thrown from the code that completes the Future.",
                "tnFile": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncRpcResult.java",
                "tnLine": 118,
                "tnColumn": 30,
                "tnPatch": null,
                "tnCodeLine": "            this.whenComplete((result, t) -> {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JdkObsolete",
                "tnDesc": "It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.",
                "tnFile": "dubbo-registry/dubbo-registry-nacos/src/main/java/org/apache/dubbo/registry/nacos/NacosRegistry.java",
                "tnLine": 134,
                "tnColumn": 32,
                "tnPatch": null,
                "tnCodeLine": "        final List<URL> urls = new LinkedList<>();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ReferenceEquality",
                "tnDesc": "Comparison using reference equality instead of value equality",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/logger/jdk/JdkLoggerAdapter.java",
                "tnLine": 87,
                "tnColumn": 19,
                "tnPatch": null,
                "tnCodeLine": "        if (level == java.util.logging.Level.ALL) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "BoxedPrimitiveConstructor",
                "tnDesc": "valueOf or autoboxing provides better time and space performance",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/utils/CompatibleTypeUtils.java",
                "tnLine": 71,
                "tnColumn": 24,
                "tnPatch": null,
                "tnCodeLine": "                return new Integer(string);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.Result",
                "tnFile": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncRpcResult.java",
                "tnLine": 184,
                "tnColumn": 23,
                "tnPatch": null,
                "tnCodeLine": "        getAppResponse().setAttachment(key, value);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "InconsistentCapitalization",
                "tnDesc": "Found the field 'metadataReportUrl' with the same name as the parameter 'metadataReportURL' but with different capitalization.",
                "tnFile": "dubbo-metadata-report/dubbo-metadata-report-api/src/main/java/org/apache/dubbo/metadata/integration/MetadataReportService.java",
                "tnLine": 60,
                "tnColumn": 31,
                "tnPatch": null,
                "tnCodeLine": "    MetadataReportService(URL metadataReportURL) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Return value of methods returning Future must be checked. Ignoring returned Futures suppresses exceptions thrown from the code that completes the Future.",
                "tnFile": "dubbo-remoting/dubbo-remoting-etcd3/src/main/java/org/apache/dubbo/remoting/etcd/jetcd/JEtcdClient.java",
                "tnLine": 424,
                "tnColumn": 43,
                "tnPatch": null,
                "tnCodeLine": "                reconnectSchedule.schedule(this::reconnect, new Random().nextInt(delayPeriod), TimeUnit.MILLISECONDS);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Return value of methods returning Future must be checked. Ignoring returned Futures suppresses exceptions thrown from the code that completes the Future.",
                "tnFile": "dubbo-remoting/dubbo-remoting-etcd3/src/main/java/org/apache/dubbo/remoting/etcd/jetcd/JEtcdClient.java",
                "tnLine": 428,
                "tnColumn": 39,
                "tnPatch": null,
                "tnCodeLine": "            reconnectSchedule.schedule(this::reconnect, new Random().nextInt(delayPeriod), TimeUnit.MILLISECONDS);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UnusedVariable",
                "tnDesc": "The parameter 'beanDefinition' is never read.",
                "tnFile": "dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/schema/DubboBeanDefinitionParser.java",
                "tnLine": 305,
                "tnColumn": 85,
                "tnPatch": null,
                "tnCodeLine": "    private static ManagedMap parseParameters(NodeList nodeList, RootBeanDefinition beanDefinition) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.AsyncRpcResult",
                "tnFile": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/FailbackClusterInvoker.java",
                "tnLine": 106,
                "tnColumn": 56,
                "tnPatch": null,
                "tnCodeLine": "            return AsyncRpcResult.newDefaultAsyncResult(null, null, invocation); // ignore",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "DateFormatConstant",
                "tnDesc": "DateFormat is not thread-safe, and should not be used as a constant field.",
                "tnFile": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/support/AccessLogData.java",
                "tnLine": 41,
                "tnColumn": 37,
                "tnPatch": null,
                "tnCodeLine": "    private static final DateFormat MESSAGE_DATE_FORMATTER = new SimpleDateFormat(MESSAGE_DATE_FORMAT);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "LockNotBeforeTry",
                "tnDesc": "Prefer obtaining the lock for LOCK outside the try block. That way, if #lock throws, the lock is not erroneously released.",
                "tnFile": "dubbo-container/dubbo-container-api/src/main/java/org/apache/dubbo/container/Main.java",
                "tnLine": 99,
                "tnColumn": 22,
                "tnPatch": null,
                "tnCodeLine": "            LOCK.lock();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "DefaultCharset",
                "tnDesc": "Implicit use of the platform default charset, which can result in differing behaviour between JVM executions or incorrect behavior if the encoding of the data source doesn't match expectations.",
                "tnFile": "dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/telnet/codec/TelnetCodec.java",
                "tnLine": 272,
                "tnColumn": 43,
                "tnPatch": null,
                "tnCodeLine": "                byte[] b1 = value.getBytes();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UnusedMethod",
                "tnDesc": "Private method 'fromLog4j2Level' is never used.",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/logger/log4j2/Log4j2LoggerAdapter.java",
                "tnLine": 57,
                "tnColumn": 26,
                "tnPatch": null,
                "tnCodeLine": "    private static Level fromLog4j2Level(org.apache.logging.log4j.Level level) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "DefaultCharset",
                "tnDesc": "Implicit use of the platform default charset, which can result in differing behaviour between JVM executions or incorrect behavior if the encoding of the data source doesn't match expectations.",
                "tnFile": "dubbo-serialization/dubbo-serialization-protostuff/src/main/java/org/apache/dubbo/common/serialize/protostuff/ProtostuffObjectOutput.java",
                "tnLine": 58,
                "tnColumn": 67,
                "tnPatch": null,
                "tnCodeLine": "                classNameBytes = obj.getClass().getName().getBytes();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UnusedVariable",
                "tnDesc": "The local variable 'port' is never read.",
                "tnFile": "dubbo-monitor/dubbo-monitor-default/src/main/java/org/apache/dubbo/monitor/dubbo/MetricsFilter.java",
                "tnLine": 185,
                "tnColumn": 20,
                "tnPatch": null,
                "tnCodeLine": "            String port = entry.getKey();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.Result",
                "tnFile": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/ContextFilter.java",
                "tnLine": 96,
                "tnColumn": 34,
                "tnPatch": null,
                "tnCodeLine": "            return invoker.invoke(invocation);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ModifiedButNotUsed",
                "tnDesc": "A collection or proto builder was created, but its values were never accessed.",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/compiler/support/JdkCompiler.java",
                "tnLine": 211,
                "tnColumn": 33,
                "tnPatch": null,
                "tnCodeLine": "            List<URL> urlList = new ArrayList<URL>();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ClassNewInstance",
                "tnDesc": "Class.newInstance() bypasses exception checking; prefer getDeclaredConstructor().newInstance()",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/utils/CompatibleTypeUtils.java",
                "tnLine": 159,
                "tnColumn": 63,
                "tnPatch": null,
                "tnCodeLine": "                    collection = (Collection) type.newInstance();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.Result",
                "tnFile": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncRpcResult.java",
                "tnLine": 134,
                "tnColumn": 28,
                "tnPatch": null,
                "tnCodeLine": "            return this.get().recreate();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.Result",
                "tnFile": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/FailbackClusterInvoker.java",
                "tnLine": 101,
                "tnColumn": 34,
                "tnPatch": null,
                "tnCodeLine": "            return invoker.invoke(invocation);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UnnecessaryParentheses",
                "tnDesc": "Unnecessary use of grouping parentheses",
                "tnFile": "dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/exchange/support/DefaultFuture.java",
                "tnLine": 223,
                "tnColumn": 19,
                "tnPatch": null,
                "tnCodeLine": "                + (new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS\").format(new Date(start))) + \", end time: \"",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.Result",
                "tnFile": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/MergeableClusterInvoker.java",
                "tnLine": 81,
                "tnColumn": 53,
                "tnPatch": null,
                "tnCodeLine": "            return invokers.iterator().next().invoke(invocation);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JdkObsolete",
                "tnDesc": "StringBuffer performs synchronization that is usually unnecessary; prefer StringBuilder.",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/json/GenericJSONConverter.java",
                "tnLine": 334,
                "tnColumn": 24,
                "tnPatch": null,
                "tnCodeLine": "                return new StringBuffer(jv.toString());",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FallThrough",
                "tnDesc": "Execution may fall through from the previous case; add a `// fall through` comment before this line if it was deliberate",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/json/Yylex.java",
                "tnLine": 832,
                "tnColumn": 17,
                "tnPatch": null,
                "tnCodeLine": "                case 56:",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ReferenceEquality",
                "tnDesc": "Comparison using reference equality instead of value equality",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/logger/jdk/JdkLoggerAdapter.java",
                "tnLine": 99,
                "tnColumn": 19,
                "tnPatch": null,
                "tnCodeLine": "        if (level == java.util.logging.Level.WARNING) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.Result",
                "tnFile": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/ForkingClusterInvoker.java",
                "tnLine": 90,
                "tnColumn": 59,
                "tnPatch": null,
                "tnCodeLine": "                            Result result = invoker.invoke(invocation);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.AsyncRpcResult",
                "tnFile": "dubbo-rpc/dubbo-rpc-redis/src/main/java/org/apache/dubbo/rpc/protocol/redis/RedisProtocol.java",
                "tnLine": 128,
                "tnColumn": 72,
                "tnPatch": null,
                "tnCodeLine": "                            return AsyncRpcResult.newDefaultAsyncResult(oin.readObject(), invocation);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "InconsistentCapitalization",
                "tnDesc": "Found the field 'contextpath' with the same name as the parameter 'contextPath' but with different capitalization.",
                "tnFile": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/builders/ProviderBuilder.java",
                "tnLine": 153,
                "tnColumn": 47,
                "tnPatch": null,
                "tnCodeLine": "    public ProviderBuilder contextPath(String contextPath) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "StringSplitter",
                "tnDesc": "String.split(String) has surprising behavior",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/json/GenericJSONConverter.java",
                "tnLine": 405,
                "tnColumn": 56,
                "tnPatch": null,
                "tnCodeLine": "                    String[] items = ((String)jv).split(\"_\");",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ClassNewInstance",
                "tnDesc": "Class.newInstance() bypasses exception checking; prefer getDeclaredConstructor().newInstance()",
                "tnFile": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/support/MockInvoker.java",
                "tnLine": 188,
                "tnColumn": 41,
                "tnPatch": null,
                "tnCodeLine": "            return mockClass.newInstance();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Return value of methods returning Future must be checked. Ignoring returned Futures suppresses exceptions thrown from the code that completes the Future.",
                "tnFile": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncRpcResult.java",
                "tnLine": 141,
                "tnColumn": 23,
                "tnPatch": null,
                "tnCodeLine": "        this.thenApply(fn.compose(beforeContext).andThen(afterContext));",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "DefaultCharset",
                "tnDesc": "Implicit use of the platform default charset, which can result in differing behaviour between JVM executions or incorrect behavior if the encoding of the data source doesn't match expectations.",
                "tnFile": "dubbo-serialization/dubbo-serialization-fastjson/src/main/java/org/apache/dubbo/common/serialize/fastjson/FastJsonObjectInput.java",
                "tnLine": 39,
                "tnColumn": 14,
                "tnPatch": null,
                "tnCodeLine": "        this(new InputStreamReader(in));",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.Result",
                "tnFile": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/protocol/AsyncToSyncInvoker.java",
                "tnLine": 50,
                "tnColumn": 44,
                "tnPatch": null,
                "tnCodeLine": "        Result asyncResult = invoker.invoke(invocation);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "DefaultCharset",
                "tnDesc": "Implicit use of the platform default charset, which can result in differing behaviour between JVM executions or incorrect behavior if the encoding of the data source doesn't match expectations.",
                "tnFile": "dubbo-rpc/dubbo-rpc-redis/src/main/java/org/apache/dubbo/rpc/protocol/redis/RedisProtocol.java",
                "tnLine": 123,
                "tnColumn": 107,
                "tnPatch": null,
                "tnCodeLine": "                            byte[] value = jedis.get(String.valueOf(invocation.getArguments()[0]).getBytes());",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.Result",
                "tnFile": "dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/support/ConsumerInvokerWrapper.java",
                "tnLine": 61,
                "tnColumn": 30,
                "tnPatch": null,
                "tnCodeLine": "        return invoker.invoke(invocation);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ObjectToString",
                "tnDesc": "DiagnosticCollector<JavaFileObject> is final and does not override Object.toString, so converting it to a string will print its identity (e.g. `DiagnosticCollector@ 4488aabb`) instead of useful information.",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/compiler/support/JdkCompiler.java",
                "tnLine": 108,
                "tnColumn": 104,
                "tnPatch": null,
                "tnCodeLine": "            throw new IllegalStateException(\"Compilation failed. class: \" + name + \", diagnostics: \" + diagnosticCollector);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.AsyncRpcResult",
                "tnFile": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/protocol/AbstractInvoker.java",
                "tnLine": 168,
                "tnColumn": 60,
                "tnPatch": null,
                "tnCodeLine": "                return AsyncRpcResult.newDefaultAsyncResult(null, e, invocation);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Return value of methods returning Future must be checked. Ignoring returned Futures suppresses exceptions thrown from the code that completes the Future.",
                "tnFile": "dubbo-remoting/dubbo-remoting-grizzly/src/main/java/org/apache/dubbo/remoting/transport/grizzly/GrizzlyChannel.java",
                "tnLine": 137,
                "tnColumn": 29,
                "tnPatch": null,
                "tnCodeLine": "            connection.close();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Return value of methods returning Future must be checked. Ignoring returned Futures suppresses exceptions thrown from the code that completes the Future.",
                "tnFile": "dubbo-configcenter/dubbo-configcenter-consul/src/main/java/org/apache/dubbo/configcenter/consul/ConsulDynamicConfiguration.java",
                "tnLine": 80,
                "tnColumn": 34,
                "tnPatch": null,
                "tnCodeLine": "            watcherService.submit(watcher);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Return value of methods returning Future must be checked. Ignoring returned Futures suppresses exceptions thrown from the code that completes the Future.",
                "tnFile": "dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/server/Server.java",
                "tnLine": 117,
                "tnColumn": 38,
                "tnPatch": null,
                "tnCodeLine": "            worker.shutdownGracefully();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.Result",
                "tnFile": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/ExceptionFilter.java",
                "tnLine": 55,
                "tnColumn": 30,
                "tnPatch": null,
                "tnCodeLine": "        return invoker.invoke(invocation);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.Result",
                "tnFile": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/MergeableClusterInvoker.java",
                "tnLine": 122,
                "tnColumn": 46,
                "tnPatch": null,
                "tnCodeLine": "            return resultList.iterator().next();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ClassNewInstance",
                "tnDesc": "Class.newInstance() bypasses exception checking; prefer getDeclaredConstructor().newInstance()",
                "tnFile": "dubbo-rpc/dubbo-rpc-thrift/src/main/java/org/apache/dubbo/rpc/protocol/thrift/ThriftCodec.java",
                "tnLine": 330,
                "tnColumn": 57,
                "tnPatch": null,
                "tnCodeLine": "                result = (TBase<?, ?>) clazz.newInstance();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "MissingCasesInEnumSwitch",
                "tnDesc": "Non-exhaustive switch; either add a default or handle the remaining cases: FIELD, CONSTRUCTOR, LOCAL_VARIABLE, and 4 others",
                "tnFile": "dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/util/AnnotationUtils.java",
                "tnLine": 150,
                "tnColumn": 13,
                "tnPatch": null,
                "tnCodeLine": "            switch (elementType) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UnusedVariable",
                "tnDesc": "The local variable 'count' is never read.",
                "tnFile": "dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/filter/TraceFilter.java",
                "tnLine": 99,
                "tnColumn": 33,
                "tnPatch": null,
                "tnCodeLine": "                            int count = 0;",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.Result",
                "tnFile": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/BroadcastClusterInvoker.java",
                "tnLine": 52,
                "tnColumn": 40,
                "tnPatch": null,
                "tnCodeLine": "                result = invoker.invoke(invocation);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Return value of methods returning Future must be checked. Ignoring returned Futures suppresses exceptions thrown from the code that completes the Future.",
                "tnFile": "dubbo-remoting/dubbo-remoting-etcd3/src/main/java/org/apache/dubbo/remoting/etcd/jetcd/JEtcdClientWrapper.java",
                "tnLine": 514,
                "tnColumn": 47,
                "tnPatch": null,
                "tnCodeLine": "                completableFuture.whenComplete((c, e) -> {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JdkObsolete",
                "tnDesc": "StringBuffer performs synchronization that is usually unnecessary; prefer StringBuilder.",
                "tnFile": "dubbo-rpc/dubbo-rpc-thrift/src/main/java/org/apache/dubbo/rpc/protocol/thrift/ThriftUtils.java",
                "tnLine": 96,
                "tnColumn": 16,
                "tnPatch": null,
                "tnCodeLine": "        return new StringBuffer(16)",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FallThrough",
                "tnDesc": "Execution may fall through from the previous case; add a `// fall through` comment before this line if it was deliberate",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/json/Yylex.java",
                "tnLine": 801,
                "tnColumn": 17,
                "tnPatch": null,
                "tnCodeLine": "                case 50:",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FallThrough",
                "tnDesc": "Execution may fall through from the previous case; add a `// fall through` comment before this line if it was deliberate",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/json/Yylex.java",
                "tnLine": 730,
                "tnColumn": 17,
                "tnPatch": null,
                "tnCodeLine": "                case 37:",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "DefaultCharset",
                "tnDesc": "Implicit use of the platform default charset, which can result in differing behaviour between JVM executions or incorrect behavior if the encoding of the data source doesn't match expectations.",
                "tnFile": "dubbo-serialization/dubbo-serialization-protobuf-json/src/main/java/org/apache/dubbo/common/serialize/protobuf/support/GenericProtobufObjectInput.java",
                "tnLine": 35,
                "tnColumn": 42,
                "tnPatch": null,
                "tnCodeLine": "        this.reader = new BufferedReader(new InputStreamReader(in));",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ClassNewInstance",
                "tnDesc": "Class.newInstance() bypasses exception checking; prefer getDeclaredConstructor().newInstance()",
                "tnFile": "dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DubboProtocol.java",
                "tnLine": 379,
                "tnColumn": 90,
                "tnPatch": null,
                "tnCodeLine": "            SerializationOptimizer optimizer = (SerializationOptimizer) clazz.newInstance();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UnusedVariable",
                "tnDesc": "The field 'logger' is never read.",
                "tnFile": "dubbo-remoting/dubbo-remoting-etcd3/src/main/java/org/apache/dubbo/remoting/etcd/jetcd/RetryLoops.java",
                "tnLine": 49,
                "tnColumn": 20,
                "tnPatch": null,
                "tnCodeLine": "    private Logger logger = LoggerFactory.getLogger(RetryLoops.class);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "OperatorPrecedence",
                "tnDesc": "Use grouping parenthesis to make the operator precedence explicit",
                "tnFile": "dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/schema/DubboBeanDefinitionParser.java",
                "tnLine": 187,
                "tnColumn": 72,
                "tnPatch": null,
                "tnCodeLine": "                                            || \"stat\".equals(property) && \"-1\".equals(value)",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.Result",
                "tnFile": "dubbo-monitor/dubbo-monitor-default/src/main/java/org/apache/dubbo/monitor/dubbo/MetricsFilter.java",
                "tnLine": 102,
                "tnColumn": 43,
                "tnPatch": null,
                "tnCodeLine": "            Result result = invoker.invoke(invocation); // proceed invocation chain",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UnusedVariable",
                "tnDesc": "The field 'appName' is never read.",
                "tnFile": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/builders/ConfigCenterBuilder.java",
                "tnLine": 41,
                "tnColumn": 20,
                "tnPatch": null,
                "tnCodeLine": "    private String appName;",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "OperatorPrecedence",
                "tnDesc": "Use grouping parenthesis to make the operator precedence explicit",
                "tnFile": "dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/schema/DubboBeanDefinitionParser.java",
                "tnLine": 183,
                "tnColumn": 66,
                "tnPatch": null,
                "tnCodeLine": "                                    if (\"async\".equals(property) && \"false\".equals(value)",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UnnecessaryParentheses",
                "tnDesc": "Unnecessary use of grouping parentheses",
                "tnFile": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/FailbackClusterInvoker.java",
                "tnLine": 147,
                "tnColumn": 21,
                "tnPatch": null,
                "tnCodeLine": "                if ((++retryTimes) >= retries) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UnusedVariable",
                "tnDesc": "The parameter 'channel' is never read.",
                "tnFile": "dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/exchange/codec/ExchangeCodec.java",
                "tnLine": 436,
                "tnColumn": 42,
                "tnPatch": null,
                "tnCodeLine": "    private void encodeEventData(Channel channel, ObjectOutput out, Object data) throws IOException {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ClassNewInstance",
                "tnDesc": "Class.newInstance() bypasses exception checking; prefer getDeclaredConstructor().newInstance()",
                "tnFile": "dubbo-filter/dubbo-filter-validation/src/main/java/org/apache/dubbo/validation/support/jvalidation/JValidator.java",
                "tnLine": 161,
                "tnColumn": 62,
                "tnPatch": null,
                "tnCodeLine": "            Object parameterBean = parameterClass.newInstance();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UnnecessaryParentheses",
                "tnDesc": "Unnecessary use of grouping parentheses",
                "tnFile": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ConsumerConfig.java",
                "tnLine": 71,
                "tnColumn": 20,
                "tnPatch": null,
                "tnCodeLine": "                && (StringUtils.isEmpty(rmiTimeout))) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.AsyncRpcResult",
                "tnFile": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/MergeableClusterInvoker.java",
                "tnLine": 120,
                "tnColumn": 56,
                "tnPatch": null,
                "tnCodeLine": "            return AsyncRpcResult.newDefaultAsyncResult(invocation);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "EqualsGetClass",
                "tnDesc": "Overriding Object#equals in a non-final class by using getClass rather than instanceof breaks substitutability of subclasses.",
                "tnFile": "dubbo-monitor/dubbo-monitor-default/src/main/java/org/apache/dubbo/monitor/dubbo/Statistics.java",
                "tnLine": 142,
                "tnColumn": 20,
                "tnPatch": null,
                "tnCodeLine": "    public boolean equals(Object obj) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "BoxedPrimitiveConstructor",
                "tnDesc": "valueOf or autoboxing provides better time and space performance",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/utils/CompatibleTypeUtils.java",
                "tnLine": 69,
                "tnColumn": 24,
                "tnPatch": null,
                "tnCodeLine": "                return new Short(string);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.Result",
                "tnFile": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/AvailableClusterInvoker.java",
                "tnLine": 42,
                "tnColumn": 38,
                "tnPatch": null,
                "tnCodeLine": "                return invoker.invoke(invocation);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.Result",
                "tnFile": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/DeprecatedFilter.java",
                "tnLine": 56,
                "tnColumn": 30,
                "tnPatch": null,
                "tnCodeLine": "        return invoker.invoke(invocation);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UnusedVariable",
                "tnDesc": "The field 'DEFAULT_ZOOKEEPER_PORT' is never read.",
                "tnFile": "dubbo-registry/dubbo-registry-zookeeper/src/main/java/org/apache/dubbo/registry/zookeeper/ZookeeperRegistry.java",
                "tnLine": 63,
                "tnColumn": 30,
                "tnPatch": null,
                "tnCodeLine": "    private final static int DEFAULT_ZOOKEEPER_PORT = 2181;",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UnusedVariable",
                "tnDesc": "The field 'logger' is never read.",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/config/PropertiesConfiguration.java",
                "tnLine": 27,
                "tnColumn": 33,
                "tnPatch": null,
                "tnCodeLine": "    private static final Logger logger = LoggerFactory.getLogger(PropertiesConfiguration.class);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "GetClassOnClass",
                "tnDesc": "Calling getClass() on an object of type Class returns the Class object for java.lang.Class; you probably meant to operate on the object directly",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/extension/ExtensionLoader.java",
                "tnLine": 799,
                "tnColumn": 44,
                "tnPatch": null,
                "tnCodeLine": "                    + \", \" + clazz.getClass().getName());",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "StringSplitter",
                "tnDesc": "String.split(String) has surprising behavior",
                "tnFile": "dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/support/AbstractRegistry.java",
                "tnLine": 235,
                "tnColumn": 50,
                "tnPatch": null,
                "tnCodeLine": "                String[] arr = value.trim().split(URL_SPLIT);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.Result",
                "tnFile": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/AbstractClusterInvoker.java",
                "tnLine": 248,
                "tnColumn": 24,
                "tnPatch": null,
                "tnCodeLine": "        return doInvoke(invocation, invokers, loadbalance);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "DefaultCharset",
                "tnDesc": "Implicit use of the platform default charset, which can result in differing behaviour between JVM executions or incorrect behavior if the encoding of the data source doesn't match expectations.",
                "tnFile": "dubbo-rpc/dubbo-rpc-thrift/src/main/java/org/apache/dubbo/rpc/protocol/thrift/io/RandomAccessByteArrayOutputStream.java",
                "tnLine": 105,
                "tnColumn": 16,
                "tnPatch": null,
                "tnCodeLine": "        return new String(buffer, 0, count);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Return value of methods returning Future must be checked. Ignoring returned Futures suppresses exceptions thrown from the code that completes the Future.",
                "tnFile": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncRpcResult.java",
                "tnLine": 148,
                "tnColumn": 28,
                "tnPatch": null,
                "tnCodeLine": "        future.whenComplete((obj, t) -> {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UnusedVariable",
                "tnDesc": "The field 'url' is never read.",
                "tnFile": "dubbo-configcenter/dubbo-configcenter-zookeeper/src/main/java/org/apache/dubbo/configcenter/support/zookeeper/ZookeeperDynamicConfiguration.java",
                "tnLine": 49,
                "tnColumn": 17,
                "tnPatch": null,
                "tnCodeLine": "    private URL url;",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "DefaultCharset",
                "tnDesc": "Implicit use of the platform default charset, which can result in differing behaviour between JVM executions or incorrect behavior if the encoding of the data source doesn't match expectations.",
                "tnFile": "dubbo-serialization/dubbo-serialization-protobuf-json/src/main/java/org/apache/dubbo/common/serialize/protobuf/support/GenericProtobufObjectOutput.java",
                "tnLine": 84,
                "tnColumn": 24,
                "tnPatch": null,
                "tnCodeLine": "        writer.println(new String(b, off, len));",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Return value of methods returning Future must be checked. Ignoring returned Futures suppresses exceptions thrown from the code that completes the Future.",
                "tnFile": "dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/server/handler/TelnetProcessHandler.java",
                "tnLine": 55,
                "tnColumn": 38,
                "tnPatch": null,
                "tnCodeLine": "                    ctx.writeAndFlush(result + QosConstants.BR_STR + QosProcessHandler.prompt);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.AsyncRpcResult",
                "tnFile": "dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DubboInvoker.java",
                "tnLine": 95,
                "tnColumn": 60,
                "tnPatch": null,
                "tnCodeLine": "                return AsyncRpcResult.newDefaultAsyncResult(invocation);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JdkObsolete",
                "tnDesc": "It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/config/CompositeConfiguration.java",
                "tnLine": 35,
                "tnColumn": 46,
                "tnPatch": null,
                "tnCodeLine": "    private List<Configuration> configList = new LinkedList<Configuration>();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "SynchronizeOnNonFinalField",
                "tnDesc": "Synchronizing on non-final fields is not safe: if the field is ever updated, different threads may end up locking on different objects.",
                "tnFile": "dubbo-metadata-report/dubbo-metadata-report-api/src/main/java/org/apache/dubbo/metadata/support/AbstractMetadataReport.java",
                "tnLine": 359,
                "tnColumn": 30,
                "tnPatch": null,
                "tnCodeLine": "                synchronized (retryCounter) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "MixedMutabilityReturnType",
                "tnDesc": "This method returns both mutable and immutable collections or maps from different paths. This may be confusing for users of the method.",
                "tnFile": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/MethodConfig.java",
                "tnLine": 158,
                "tnColumn": 38,
                "tnPatch": null,
                "tnCodeLine": "    public static List<MethodConfig> constructMethodConfig(Method[] methods) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UnusedMethod",
                "tnDesc": "Private method 'getFieldValue' is never used.",
                "tnFile": "dubbo-compatible/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/CompatibleReferenceAnnotationBeanPostProcessor.java",
                "tnLine": 497,
                "tnColumn": 19,
                "tnPatch": null,
                "tnCodeLine": "    private <T> T getFieldValue(Object object, String fieldName, Class<T> fieldType) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "DoubleBraceInitialization",
                "tnDesc": "Prefer collection factory methods or builders to the double-brace initialization pattern.",
                "tnFile": "dubbo-monitor/dubbo-monitor-default/src/main/java/org/apache/dubbo/monitor/dubbo/MetricsFilter.java",
                "tnLine": 162,
                "tnColumn": 60,
                "tnPatch": null,
                "tnCodeLine": "            method = new MetricName(DUBBO_CONSUMER_METHOD, new HashMap<String, String>(4) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "DefaultCharset",
                "tnDesc": "Implicit use of the platform default charset, which can result in differing behaviour between JVM executions or incorrect behavior if the encoding of the data source doesn't match expectations.",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/json/Yylex.java",
                "tnLine": 326,
                "tnColumn": 14,
                "tnPatch": null,
                "tnCodeLine": "        this(new java.io.InputStreamReader(in));",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.AsyncRpcResult",
                "tnFile": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/proxy/AbstractProxyInvoker.java",
                "tnLine": 105,
                "tnColumn": 56,
                "tnPatch": null,
                "tnCodeLine": "            return AsyncRpcResult.newDefaultAsyncResult(null, e.getTargetException(), invocation);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ReferenceEquality",
                "tnDesc": "Comparison using reference equality instead of value equality",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/logger/log4j2/Log4j2LoggerAdapter.java",
                "tnLine": 64,
                "tnColumn": 19,
                "tnPatch": null,
                "tnCodeLine": "        if (level == org.apache.logging.log4j.Level.DEBUG) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Returning org.apache.dubbo.rpc.protocol.dubbo.DecodeableRpcResult from method that returns java.lang.Object. Errors from the returned future may be ignored.",
                "tnFile": "dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DecodeableRpcResult.java",
                "tnLine": 105,
                "tnColumn": 9,
                "tnPatch": null,
                "tnCodeLine": "        return this;",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UnnecessaryParentheses",
                "tnDesc": "Unnecessary use of grouping parentheses",
                "tnFile": "dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/transport/CodecSupport.java",
                "tnLine": 79,
                "tnColumn": 21,
                "tnPatch": null,
                "tnCodeLine": "                && !(serializationName.equals(ID_SERIALIZATIONNAME_MAP.get(id))))) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "StringSplitter",
                "tnDesc": "String.split(String) has surprising behavior",
                "tnFile": "dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/telnet/support/command/LogTelnetHandler.java",
                "tnLine": 51,
                "tnColumn": 41,
                "tnPatch": null,
                "tnCodeLine": "            String[] str = message.split(\" \");",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UnnecessaryParentheses",
                "tnDesc": "Unnecessary use of grouping parentheses",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/io/Bytes.java",
                "tnLine": 294,
                "tnColumn": 18,
                "tnPatch": null,
                "tnCodeLine": "                ((b[off + 0]) << 24);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "DefaultCharset",
                "tnDesc": "Implicit use of the platform default charset, which can result in differing behaviour between JVM executions or incorrect behavior if the encoding of the data source doesn't match expectations.",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/utils/IOUtils.java",
                "tnLine": 166,
                "tnColumn": 52,
                "tnPatch": null,
                "tnCodeLine": "        BufferedReader reader = new BufferedReader(new InputStreamReader(is));",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.Result",
                "tnFile": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/protocol/AbstractProxyProtocol.java",
                "tnLine": 104,
                "tnColumn": 50,
                "tnPatch": null,
                "tnCodeLine": "                    Result result = target.invoke(invocation);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "EqualsGetClass",
                "tnDesc": "Overriding Object#equals in a non-final class by using getClass rather than instanceof breaks substitutability of subclasses.",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/URL.java",
                "tnLine": 1427,
                "tnColumn": 20,
                "tnPatch": null,
                "tnCodeLine": "    public boolean equals(Object obj) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.Result",
                "tnFile": "dubbo-rpc/dubbo-rpc-thrift/src/main/java/org/apache/dubbo/rpc/protocol/thrift/ThriftProtocol.java",
                "tnLine": 93,
                "tnColumn": 61,
                "tnPatch": null,
                "tnCodeLine": "                Result result = exporter.getInvoker().invoke(inv);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FallThrough",
                "tnDesc": "Execution may fall through from the previous case; add a `// fall through` comment before this line if it was deliberate",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/json/Yylex.java",
                "tnLine": 823,
                "tnColumn": 17,
                "tnPatch": null,
                "tnCodeLine": "                case 54:",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "DefaultCharset",
                "tnDesc": "Implicit use of the platform default charset, which can result in differing behaviour between JVM executions or incorrect behavior if the encoding of the data source doesn't match expectations.",
                "tnFile": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/AccessLogFilter.java",
                "tnLine": 153,
                "tnColumn": 34,
                "tnPatch": null,
                "tnCodeLine": "        try (FileWriter writer = new FileWriter(file, true)) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "DefaultCharset",
                "tnDesc": "Implicit use of the platform default charset, which can result in differing behaviour between JVM executions or incorrect behavior if the encoding of the data source doesn't match expectations.",
                "tnFile": "dubbo-rpc/dubbo-rpc-redis/src/main/java/org/apache/dubbo/rpc/protocol/redis/RedisProtocol.java",
                "tnLine": 146,
                "tnColumn": 92,
                "tnPatch": null,
                "tnCodeLine": "                            jedis.del(String.valueOf(invocation.getArguments()[0]).getBytes());",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "DefaultCharset",
                "tnDesc": "Implicit use of the platform default charset, which can result in differing behaviour between JVM executions or incorrect behavior if the encoding of the data source doesn't match expectations.",
                "tnFile": "dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/telnet/support/command/LogTelnetHandler.java",
                "tnLine": 72,
                "tnColumn": 50,
                "tnPatch": null,
                "tnCodeLine": "                                String content = new String(bb.array()).replace(\"<\", \"&lt;\")",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.AsyncRpcResult",
                "tnFile": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/protocol/AbstractInvoker.java",
                "tnLine": 173,
                "tnColumn": 56,
                "tnPatch": null,
                "tnCodeLine": "            return AsyncRpcResult.newDefaultAsyncResult(null, e, invocation);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.Result",
                "tnFile": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/MergeableClusterInvoker.java",
                "tnLine": 96,
                "tnColumn": 24,
                "tnPatch": null,
                "tnCodeLine": "            results.put(invoker.getUrl().getServiceKey(), invoker.invoke(subInvocation));",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FallThrough",
                "tnDesc": "Execution may fall through from the previous case; add a `// fall through` comment before this line if it was deliberate",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/json/Yylex.java",
                "tnLine": 785,
                "tnColumn": 17,
                "tnPatch": null,
                "tnCodeLine": "                case 47:",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "OperatorPrecedence",
                "tnDesc": "Use grouping parenthesis to make the operator precedence explicit",
                "tnFile": "dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/schema/DubboBeanDefinitionParser.java",
                "tnLine": 186,
                "tnColumn": 75,
                "tnPatch": null,
                "tnCodeLine": "                                            || \"version\".equals(property) && \"0.0.0\".equals(value)",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.AsyncRpcResult",
                "tnFile": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/MergeableClusterInvoker.java",
                "tnLine": 126,
                "tnColumn": 56,
                "tnPatch": null,
                "tnCodeLine": "            return AsyncRpcResult.newDefaultAsyncResult(invocation);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.Result",
                "tnFile": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/GenericFilter.java",
                "tnLine": 148,
                "tnColumn": 30,
                "tnPatch": null,
                "tnCodeLine": "        return invoker.invoke(inv);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "StringSplitter",
                "tnDesc": "String.split(String) has surprising behavior",
                "tnFile": "dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/RegistryDirectory.java",
                "tnLine": 383,
                "tnColumn": 64,
                "tnPatch": null,
                "tnCodeLine": "                String[] acceptProtocols = queryProtocols.split(\",\");",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "DefaultCharset",
                "tnDesc": "Implicit use of the platform default charset, which can result in differing behaviour between JVM executions or incorrect behavior if the encoding of the data source doesn't match expectations.",
                "tnFile": "dubbo-serialization/dubbo-serialization-gson/src/main/java/org/apache/dubbo/common/serialize/gson/GsonJsonObjectInput.java",
                "tnLine": 37,
                "tnColumn": 14,
                "tnPatch": null,
                "tnCodeLine": "        this(new InputStreamReader(in));",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "DefaultCharset",
                "tnDesc": "Implicit use of the platform default charset, which can result in differing behaviour between JVM executions or incorrect behavior if the encoding of the data source doesn't match expectations.",
                "tnFile": "dubbo-serialization/dubbo-serialization-fastjson/src/main/java/org/apache/dubbo/common/serialize/fastjson/FastJsonObjectInput.java",
                "tnLine": 88,
                "tnColumn": 35,
                "tnPatch": null,
                "tnCodeLine": "        return readLine().getBytes();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JdkObsolete",
                "tnDesc": "StringBuffer performs synchronization that is usually unnecessary; prefer StringBuilder.",
                "tnFile": "dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/telnet/support/TelnetUtils.java",
                "tnLine": 128,
                "tnColumn": 34,
                "tnPatch": null,
                "tnCodeLine": "                        rowbuf = new StringBuffer();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "GetClassOnClass",
                "tnDesc": "Calling getClass() on an object of type Class returns the Class object for java.lang.Class; you probably meant to operate on the object directly",
                "tnFile": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/MergeableClusterInvoker.java",
                "tnLine": 136,
                "tnColumn": 44,
                "tnPatch": null,
                "tnCodeLine": "                        returnType.getClass().getName() + \" ]\");",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ReferenceEquality",
                "tnDesc": "Comparison using reference equality instead of value equality",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/logger/jdk/JdkLoggerAdapter.java",
                "tnLine": 90,
                "tnColumn": 19,
                "tnPatch": null,
                "tnCodeLine": "        if (level == java.util.logging.Level.FINER) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UnnecessaryParentheses",
                "tnDesc": "Unnecessary use of grouping parentheses",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/compiler/support/JdkCompiler.java",
                "tnLine": 76,
                "tnColumn": 20,
                "tnPatch": null,
                "tnCodeLine": "                && (!loader.getClass().getName().equals(\"sun.misc.Launcher$AppClassLoader\"))) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.Result",
                "tnFile": "dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DubboProtocol.java",
                "tnLine": 152,
                "tnColumn": 43,
                "tnPatch": null,
                "tnCodeLine": "            Result result = invoker.invoke(inv);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "BoxedPrimitiveConstructor",
                "tnDesc": "valueOf or autoboxing provides better time and space performance",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/utils/CompatibleTypeUtils.java",
                "tnLine": 79,
                "tnColumn": 24,
                "tnPatch": null,
                "tnCodeLine": "                return new Byte(string);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ArrayAsKeyOfSetOrMap",
                "tnDesc": "Arrays do not override equals() or hashCode, so comparisons will be done on reference equality only. If neither deduplication nor lookup are needed, consider using a List instead. Otherwise, use IdentityHashMap/Set, a Map from a library that handles object arrays, or an Iterable/List of pairs.",
                "tnFile": "dubbo-remoting/dubbo-remoting-netty4/src/main/java/org/apache/dubbo/remoting/transport/netty4/logging/MessageFormatter.java",
                "tnLine": 211,
                "tnColumn": 66,
                "tnPatch": null,
                "tnCodeLine": "                        deeplyAppendParameter(sbuf, argArray[l], new HashMap<Object[], Void>());",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "EqualsHashCode",
                "tnDesc": "Classes that override equals should also override hashCode.",
                "tnFile": "dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/support/ProviderInvokerWrapper.java",
                "tnLine": 92,
                "tnColumn": 20,
                "tnPatch": null,
                "tnCodeLine": "    public boolean equals(Object o) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.Result",
                "tnFile": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/MergeableClusterInvoker.java",
                "tnLine": 141,
                "tnColumn": 39,
                "tnPatch": null,
                "tnCodeLine": "            result = resultList.remove(0).getValue();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "DefaultCharset",
                "tnDesc": "Implicit use of the platform default charset, which can result in differing behaviour between JVM executions or incorrect behavior if the encoding of the data source doesn't match expectations.",
                "tnFile": "dubbo-serialization/dubbo-serialization-gson/src/main/java/org/apache/dubbo/common/serialize/gson/GsonJsonObjectOutput.java",
                "tnLine": 36,
                "tnColumn": 14,
                "tnPatch": null,
                "tnCodeLine": "        this(new OutputStreamWriter(out));",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.AsyncRpcResult",
                "tnFile": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/FailsafeClusterInvoker.java",
                "tnLine": 53,
                "tnColumn": 56,
                "tnPatch": null,
                "tnCodeLine": "            return AsyncRpcResult.newDefaultAsyncResult(null, null, invocation); // ignore",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JdkObsolete",
                "tnDesc": "It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.",
                "tnFile": "dubbo-rpc/dubbo-rpc-rest/src/main/java/org/apache/dubbo/rpc/protocol/rest/RestProtocol.java",
                "tnLine": 264,
                "tnColumn": 114,
                "tnPatch": null,
                "tnCodeLine": "        private final List<PoolingHttpClientConnectionManager> connectionManagers = Collections.synchronizedList(new LinkedList<>());",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.Result",
                "tnFile": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/ExecuteLimitFilter.java",
                "tnLine": 62,
                "tnColumn": 34,
                "tnPatch": null,
                "tnCodeLine": "            return invoker.invoke(invocation);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "DateFormatConstant",
                "tnDesc": "DateFormat is not thread-safe, and should not be used as a constant field.",
                "tnFile": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/AccessLogFilter.java",
                "tnLine": 80,
                "tnColumn": 37,
                "tnPatch": null,
                "tnCodeLine": "    private static final DateFormat FILE_NAME_FORMATTER = new SimpleDateFormat(FILE_DATE_FORMAT);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FallThrough",
                "tnDesc": "Execution may fall through from the previous case; add a `// fall through` comment before this line if it was deliberate",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/json/Yylex.java",
                "tnLine": 765,
                "tnColumn": 17,
                "tnPatch": null,
                "tnCodeLine": "                case 43:",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UnnecessaryParentheses",
                "tnDesc": "Unnecessary use of grouping parentheses",
                "tnFile": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/AbstractClusterInvoker.java",
                "tnLine": 222,
                "tnColumn": 21,
                "tnPatch": null,
                "tnCodeLine": "                if ((invoker.isAvailable()) // available first",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "OperatorPrecedence",
                "tnDesc": "Use grouping parenthesis to make the operator precedence explicit",
                "tnFile": "dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/exchange/codec/ExchangeCodec.java",
                "tnLine": 89,
                "tnColumn": 33,
                "tnPatch": null,
                "tnCodeLine": "                || readable > 1 && header[1] != MAGIC_LOW) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.Result",
                "tnFile": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/GenericImplFilter.java",
                "tnLine": 119,
                "tnColumn": 30,
                "tnPatch": null,
                "tnCodeLine": "        return invoker.invoke(invocation);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Return value of methods returning Future must be checked. Ignoring returned Futures suppresses exceptions thrown from the code that completes the Future.",
                "tnFile": "dubbo-remoting/dubbo-remoting-netty4/src/main/java/org/apache/dubbo/remoting/transport/netty4/NettyChannel.java",
                "tnLine": 174,
                "tnColumn": 26,
                "tnPatch": null,
                "tnCodeLine": "            channel.close();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ClassNewInstance",
                "tnDesc": "Class.newInstance() bypasses exception checking; prefer getDeclaredConstructor().newInstance()",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/utils/ReflectUtils.java",
                "tnLine": 985,
                "tnColumn": 51,
                "tnPatch": null,
                "tnCodeLine": "                    value = returnType.newInstance();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "DefaultCharset",
                "tnDesc": "Implicit use of the platform default charset, which can result in differing behaviour between JVM executions or incorrect behavior if the encoding of the data source doesn't match expectations.",
                "tnFile": "dubbo-serialization/dubbo-serialization-fastjson/src/main/java/org/apache/dubbo/common/serialize/fastjson/FastJsonObjectOutput.java",
                "tnLine": 39,
                "tnColumn": 14,
                "tnPatch": null,
                "tnCodeLine": "        this(new OutputStreamWriter(out));",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ReferenceEquality",
                "tnDesc": "Comparison using reference equality instead of value equality",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/logger/jdk/JdkLoggerAdapter.java",
                "tnLine": 102,
                "tnColumn": 19,
                "tnPatch": null,
                "tnCodeLine": "        if (level == java.util.logging.Level.SEVERE) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "OperatorPrecedence",
                "tnDesc": "Use grouping parenthesis to make the operator precedence explicit",
                "tnFile": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractConfig.java",
                "tnLine": 165,
                "tnColumn": 85,
                "tnPatch": null,
                "tnCodeLine": "                    if (method.getReturnType() == Object.class || parameter != null && parameter.excluded()) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "StringSplitter",
                "tnDesc": "String.split(String) has surprising behavior",
                "tnFile": "dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/telnet/ListTelnetHandler.java",
                "tnLine": 49,
                "tnColumn": 43,
                "tnPatch": null,
                "tnCodeLine": "            String[] parts = message.split(\"\\\\s+\");",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UnusedVariable",
                "tnDesc": "The local variable 'proxy' is never read.",
                "tnFile": "dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/CallbackServiceCodec.java",
                "tnLine": 147,
                "tnColumn": 16,
                "tnPatch": null,
                "tnCodeLine": "        Object proxy = null;",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "TypeParameterUnusedInFormals",
                "tnDesc": "Declaring a type parameter that is only used in the return type is a misuse of generics: operations on the type parameter are unchecked, it hides unsafe casts at invocations of the method, and it interacts badly with method overload resolution.",
                "tnFile": "dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/AbstractAnnotationConfigBeanBuilder.java",
                "tnLine": 202,
                "tnColumn": 68,
                "tnPatch": null,
                "tnCodeLine": "    public <T extends AbstractAnnotationConfigBeanBuilder<A, B>> T bean(Object bean) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.Result",
                "tnFile": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncRpcResult.java",
                "tnLine": 72,
                "tnColumn": 30,
                "tnPatch": null,
                "tnCodeLine": "        return getAppResponse().getValue();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "DefaultCharset",
                "tnDesc": "Implicit use of the platform default charset, which can result in differing behaviour between JVM executions or incorrect behavior if the encoding of the data source doesn't match expectations.",
                "tnFile": "dubbo-remoting/dubbo-remoting-p2p/src/main/java/org/apache/dubbo/remoting/p2p/exchange/support/MulticastExchangeGroup.java",
                "tnLine": 62,
                "tnColumn": 65,
                "tnPatch": null,
                "tnCodeLine": "                            MulticastExchangeGroup.this.receive(new String(recv.getData()).trim(), (InetSocketAddress) recv.getSocketAddress());",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ReferenceEquality",
                "tnDesc": "Comparison using reference equality instead of value equality",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/logger/log4j2/Log4j2LoggerAdapter.java",
                "tnLine": 58,
                "tnColumn": 19,
                "tnPatch": null,
                "tnCodeLine": "        if (level == org.apache.logging.log4j.Level.ALL) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ReferenceEquality",
                "tnDesc": "Comparison using reference equality instead of value equality",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/logger/log4j2/Log4j2LoggerAdapter.java",
                "tnLine": 67,
                "tnColumn": 19,
                "tnPatch": null,
                "tnCodeLine": "        if (level == org.apache.logging.log4j.Level.INFO) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UnusedMethod",
                "tnDesc": "Private method 'isRuleRuntime' is never used.",
                "tnFile": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/condition/config/ListenableRouter.java",
                "tnLine": 103,
                "tnColumn": 21,
                "tnPatch": null,
                "tnCodeLine": "    private boolean isRuleRuntime() {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "BoxedPrimitiveConstructor",
                "tnDesc": "valueOf or autoboxing provides better time and space performance",
                "tnFile": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/support/RpcUtils.java",
                "tnLine": 95,
                "tnColumn": 36,
                "tnPatch": null,
                "tnCodeLine": "        return id == null ? null : new Long(id);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "InconsistentCapitalization",
                "tnDesc": "Found the field 'shareconnections' with the same name as the parameter 'shareConnections' but with different capitalization.",
                "tnFile": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/builders/ConsumerBuilder.java",
                "tnLine": 94,
                "tnColumn": 53,
                "tnPatch": null,
                "tnCodeLine": "    public ConsumerBuilder shareConnections(Integer shareConnections) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "StringSplitter",
                "tnDesc": "String.split(String) has surprising behavior",
                "tnFile": "dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/telnet/LogTelnetHandler.java",
                "tnLine": 51,
                "tnColumn": 41,
                "tnPatch": null,
                "tnCodeLine": "            String[] str = message.split(\" \");",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ReferenceEquality",
                "tnDesc": "Comparison using reference equality instead of value equality",
                "tnFile": "dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/decoder/HttpCommandDecoder.java",
                "tnLine": 44,
                "tnColumn": 41,
                "tnPatch": null,
                "tnCodeLine": "                if (request.getMethod() == HttpMethod.GET) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.Result",
                "tnFile": "dubbo-compatible/src/main/java/com/alibaba/dubbo/rpc/Invoker.java",
                "tnLine": 55,
                "tnColumn": 62,
                "tnPatch": null,
                "tnCodeLine": "            return new Result.CompatibleResult(invoker.invoke(invocation.getOriginal()));",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UnusedVariable",
                "tnDesc": "The local variable 'isStubServiceInvoke' is never read.",
                "tnFile": "dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DubboProtocol.java",
                "tnLine": 244,
                "tnColumn": 17,
                "tnPatch": null,
                "tnCodeLine": "        boolean isStubServiceInvoke = false;",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "DefaultCharset",
                "tnDesc": "Implicit use of the platform default charset, which can result in differing behaviour between JVM executions or incorrect behavior if the encoding of the data source doesn't match expectations.",
                "tnFile": "dubbo-remoting/dubbo-remoting-p2p/src/main/java/org/apache/dubbo/remoting/p2p/support/MulticastGroup.java",
                "tnLine": 62,
                "tnColumn": 57,
                "tnPatch": null,
                "tnCodeLine": "                            MulticastGroup.this.receive(new String(recv.getData()).trim(), (InetSocketAddress) recv.getSocketAddress());",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.Result",
                "tnFile": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/EchoFilter.java",
                "tnLine": 41,
                "tnColumn": 30,
                "tnPatch": null,
                "tnCodeLine": "        return invoker.invoke(inv);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "StringSplitter",
                "tnDesc": "String.split(String) has surprising behavior",
                "tnFile": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractInterfaceConfig.java",
                "tnLine": 600,
                "tnColumn": 44,
                "tnPatch": null,
                "tnCodeLine": "                String[] as = address.split(\"\\\\s*[|]+\\\\s*\");",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "StringSplitter",
                "tnDesc": "String.split(String) has surprising behavior",
                "tnFile": "dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/telnet/TraceTelnetHandler.java",
                "tnLine": 45,
                "tnColumn": 39,
                "tnPatch": null,
                "tnCodeLine": "        String[] parts = message.split(\"\\\\s+\");",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.Result",
                "tnFile": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/protocol/InvokerWrapper.java",
                "tnLine": 56,
                "tnColumn": 30,
                "tnPatch": null,
                "tnCodeLine": "        return invoker.invoke(invocation);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "NarrowingCompoundAssignment",
                "tnDesc": "Compound assignments from long to int hide lossy casts",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/io/UnsafeStringReader.java",
                "tnLine": 77,
                "tnColumn": 19,
                "tnPatch": null,
                "tnCodeLine": "        mPosition += n;",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "DefaultCharset",
                "tnDesc": "Implicit use of the platform default charset, which can result in differing behaviour between JVM executions or incorrect behavior if the encoding of the data source doesn't match expectations.",
                "tnFile": "dubbo-registry/dubbo-registry-multicast/src/main/java/org/apache/dubbo/registry/multicast/MulticastRegistry.java",
                "tnLine": 234,
                "tnColumn": 48,
                "tnPatch": null,
                "tnCodeLine": "            byte[] data = (msg + \"\\n\").getBytes();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Return value of methods returning Future must be checked. Ignoring returned Futures suppresses exceptions thrown from the code that completes the Future.",
                "tnFile": "dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/server/handler/QosProcessHandler.java",
                "tnLine": 60,
                "tnColumn": 30,
                "tnPatch": null,
                "tnCodeLine": "                    ctx.write(Unpooled.wrappedBuffer(welcome.getBytes()));",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UnusedVariable",
                "tnDesc": "The field 'providerUrl' is never read.",
                "tnFile": "dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/RegistryProtocol.java",
                "tnLine": 589,
                "tnColumn": 21,
                "tnPatch": null,
                "tnCodeLine": "        private URL providerUrl;",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.AsyncRpcResult",
                "tnFile": "dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/ChannelWrappedInvoker.java",
                "tnLine": 73,
                "tnColumn": 60,
                "tnPatch": null,
                "tnCodeLine": "                return AsyncRpcResult.newDefaultAsyncResult(invocation);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "EqualsHashCode",
                "tnDesc": "Classes that override equals should also override hashCode.",
                "tnFile": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractConfig.java",
                "tnLine": 646,
                "tnColumn": 20,
                "tnPatch": null,
                "tnCodeLine": "    public boolean equals(Object obj) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "DefaultCharset",
                "tnDesc": "Implicit use of the platform default charset, which can result in differing behaviour between JVM executions or incorrect behavior if the encoding of the data source doesn't match expectations.",
                "tnFile": "dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/server/handler/LocalHostPermitHandler.java",
                "tnLine": 43,
                "tnColumn": 56,
                "tnPatch": null,
                "tnCodeLine": "                        + QosConstants.BR_STR).getBytes());",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "DefaultCharset",
                "tnDesc": "Implicit use of the platform default charset, which can result in differing behaviour between JVM executions or incorrect behavior if the encoding of the data source doesn't match expectations.",
                "tnFile": "dubbo-serialization/dubbo-serialization-protobuf-json/src/main/java/org/apache/dubbo/common/serialize/protobuf/support/GenericProtobufObjectInput.java",
                "tnLine": 80,
                "tnColumn": 35,
                "tnPatch": null,
                "tnCodeLine": "        return readLine().getBytes();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Return value of methods returning Future must be checked. Ignoring returned Futures suppresses exceptions thrown from the code that completes the Future.",
                "tnFile": "dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/server/handler/TelnetProcessHandler.java",
                "tnLine": 59,
                "tnColumn": 34,
                "tnPatch": null,
                "tnCodeLine": "                ctx.writeAndFlush(QosConstants.BR_STR + QosProcessHandler.prompt);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.Result",
                "tnFile": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/FailfastClusterInvoker.java",
                "tnLine": 48,
                "tnColumn": 34,
                "tnPatch": null,
                "tnCodeLine": "            return invoker.invoke(invocation);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UnnecessaryParentheses",
                "tnDesc": "Unnecessary use of grouping parentheses",
                "tnFile": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractConfig.java",
                "tnLine": 647,
                "tnColumn": 29,
                "tnPatch": null,
                "tnCodeLine": "        if (obj == null || !(obj.getClass().getName().equals(this.getClass().getName()))) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.Result",
                "tnFile": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/MergeableClusterInvoker.java",
                "tnLine": 104,
                "tnColumn": 48,
                "tnPatch": null,
                "tnCodeLine": "            Result asyncResult = entry.getValue();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "MixedMutabilityReturnType",
                "tnDesc": "This method returns both mutable and immutable collections or maps from different paths. This may be confusing for users of the method.",
                "tnFile": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/merger/MapMerger.java",
                "tnLine": 29,
                "tnColumn": 22,
                "tnPatch": null,
                "tnCodeLine": "    public Map<?, ?> merge(Map<?, ?>... items) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UnnecessaryParentheses",
                "tnDesc": "Unnecessary use of grouping parentheses",
                "tnFile": "dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/schema/DubboBeanDefinitionParser.java",
                "tnLine": 94,
                "tnColumn": 42,
                "tnPatch": null,
                "tnCodeLine": "                id = generatedBeanName + (counter++);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "DefaultCharset",
                "tnDesc": "Implicit use of the platform default charset, which can result in differing behaviour between JVM executions or incorrect behavior if the encoding of the data source doesn't match expectations.",
                "tnFile": "dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/server/handler/QosProcessHandler.java",
                "tnLine": 61,
                "tnColumn": 77,
                "tnPatch": null,
                "tnCodeLine": "                    ctx.writeAndFlush(Unpooled.wrappedBuffer(prompt.getBytes()));",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Return value of methods returning Future must be checked. Ignoring returned Futures suppresses exceptions thrown from the code that completes the Future.",
                "tnFile": "dubbo-registry/dubbo-registry-consul/src/main/java/org/apache/dubbo/registry/consul/ConsulRegistry.java",
                "tnLine": 90,
                "tnColumn": 51,
                "tnPatch": null,
                "tnCodeLine": "        ttlConsulCheckExecutor.scheduleAtFixedRate(this::checkPass, checkPassInterval / 8,",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JdkObsolete",
                "tnDesc": "It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.",
                "tnFile": "dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/util/AnnotationUtils.java",
                "tnLine": 148,
                "tnColumn": 39,
                "tnPatch": null,
                "tnCodeLine": "            List<A> annotationsList = new LinkedList<A>();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JdkObsolete",
                "tnDesc": "StringBuffer performs synchronization that is usually unnecessary; prefer StringBuilder.",
                "tnFile": "dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/telnet/support/command/LogTelnetHandler.java",
                "tnLine": 47,
                "tnColumn": 28,
                "tnPatch": null,
                "tnCodeLine": "        StringBuffer buf = new StringBuffer();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.AsyncRpcResult",
                "tnFile": "dubbo-rpc/dubbo-rpc-redis/src/main/java/org/apache/dubbo/rpc/protocol/redis/RedisProtocol.java",
                "tnLine": 147,
                "tnColumn": 72,
                "tnPatch": null,
                "tnCodeLine": "                            return AsyncRpcResult.newDefaultAsyncResult(invocation);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "OperatorPrecedence",
                "tnDesc": "Use grouping parenthesis to make the operator precedence explicit",
                "tnFile": "dubbo-serialization/dubbo-serialization-protobuf-json/src/main/java/org/apache/dubbo/common/serialize/protobuf/support/ProtobufTypeBuilder.java",
                "tnLine": 232,
                "tnColumn": 58,
                "tnPatch": null,
                "tnCodeLine": "                || methodName.equals(\"setRepeatedField\") && types[0].equals(Descriptors.FieldDescriptor.class)) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ReferenceEquality",
                "tnDesc": "Comparison using reference equality instead of value equality",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/logger/jdk/JdkLoggerAdapter.java",
                "tnLine": 96,
                "tnColumn": 19,
                "tnPatch": null,
                "tnCodeLine": "        if (level == java.util.logging.Level.INFO) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.Result",
                "tnFile": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/TpsLimitFilter.java",
                "tnLine": 56,
                "tnColumn": 30,
                "tnPatch": null,
                "tnCodeLine": "        return invoker.invoke(invocation);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ArrayAsKeyOfSetOrMap",
                "tnDesc": "Arrays do not override equals() or hashCode, so comparisons will be done on reference equality only. If neither deduplication nor lookup are needed, consider using a List instead. Otherwise, use IdentityHashMap/Set, a Map from a library that handles object arrays, or an Iterable/List of pairs.",
                "tnFile": "dubbo-remoting/dubbo-remoting-netty4/src/main/java/org/apache/dubbo/remoting/transport/netty4/logging/MessageFormatter.java",
                "tnLine": 217,
                "tnColumn": 62,
                "tnPatch": null,
                "tnCodeLine": "                    deeplyAppendParameter(sbuf, argArray[l], new HashMap<Object[], Void>());",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ReferenceEquality",
                "tnDesc": "Comparison using reference equality instead of value equality",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/logger/log4j2/Log4j2LoggerAdapter.java",
                "tnLine": 61,
                "tnColumn": 19,
                "tnPatch": null,
                "tnCodeLine": "        if (level == org.apache.logging.log4j.Level.TRACE) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Return value of methods returning Future must be checked. Ignoring returned Futures suppresses exceptions thrown from the code that completes the Future.",
                "tnFile": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/FailbackClusterInvoker.java",
                "tnLine": 144,
                "tnColumn": 36,
                "tnPatch": null,
                "tnCodeLine": "                retryInvoker.invoke(invocation);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "DefaultCharset",
                "tnDesc": "Implicit use of the platform default charset, which can result in differing behaviour between JVM executions or incorrect behavior if the encoding of the data source doesn't match expectations.",
                "tnFile": "dubbo-serialization/dubbo-serialization-gson/src/main/java/org/apache/dubbo/common/serialize/gson/GsonJsonObjectOutput.java",
                "tnLine": 91,
                "tnColumn": 24,
                "tnPatch": null,
                "tnCodeLine": "        writer.println(new String(b, off, len));",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ClassNewInstance",
                "tnDesc": "Class.newInstance() bypasses exception checking; prefer getDeclaredConstructor().newInstance()",
                "tnFile": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/GenericImplFilter.java",
                "tnLine": 162,
                "tnColumn": 76,
                "tnPatch": null,
                "tnCodeLine": "                            targetException = (Throwable) clazz.newInstance();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UnnecessaryParentheses",
                "tnDesc": "Unnecessary use of grouping parentheses",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/io/Bytes.java",
                "tnLine": 270,
                "tnColumn": 18,
                "tnPatch": null,
                "tnCodeLine": "                ((b[off + 0]) << 8));",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.Result",
                "tnFile": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/support/MockInvoker.java",
                "tnLine": 131,
                "tnColumn": 38,
                "tnPatch": null,
                "tnCodeLine": "                return invoker.invoke(invocation);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UnnecessaryParentheses",
                "tnDesc": "Unnecessary use of grouping parentheses",
                "tnFile": "dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/ReferenceAnnotationBeanPostProcessor.java",
                "tnLine": 182,
                "tnColumn": 30,
                "tnPatch": null,
                "tnCodeLine": "                \"#source=\" + (injectedElement.getMember()) +",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ClassNewInstance",
                "tnDesc": "Class.newInstance() bypasses exception checking; prefer getDeclaredConstructor().newInstance()",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/json/J2oVisitor.java",
                "tnLine": 345,
                "tnColumn": 71,
                "tnPatch": null,
                "tnCodeLine": "                        items = (Collection<Object>) mType.newInstance();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.Result",
                "tnFile": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/protocol/ProtocolFilterWrapper.java",
                "tnLine": 82,
                "tnColumn": 56,
                "tnPatch": null,
                "tnCodeLine": "                            asyncResult = filter.invoke(next, invocation);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "BoxedPrimitiveConstructor",
                "tnDesc": "valueOf or autoboxing provides better time and space performance",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/utils/CompatibleTypeUtils.java",
                "tnLine": 73,
                "tnColumn": 24,
                "tnPatch": null,
                "tnCodeLine": "                return new Long(string);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "DoubleBraceInitialization",
                "tnDesc": "Prefer collection factory methods or builders to the double-brace initialization pattern.",
                "tnFile": "dubbo-monitor/dubbo-monitor-default/src/main/java/org/apache/dubbo/monitor/dubbo/MetricsFilter.java",
                "tnLine": 154,
                "tnColumn": 60,
                "tnPatch": null,
                "tnCodeLine": "            method = new MetricName(DUBBO_PROVIDER_METHOD, new HashMap<String, String>(4) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UnnecessaryParentheses",
                "tnDesc": "Unnecessary use of grouping parentheses",
                "tnFile": "dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/support/AbstractRegistry.java",
                "tnLine": 393,
                "tnColumn": 13,
                "tnPatch": null,
                "tnCodeLine": "        if ((CollectionUtils.isEmpty(urls))",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "InputStreamSlowMultibyteRead",
                "tnDesc": "Please also override int read(byte[], int, int), otherwise multi-byte reads from this input stream are likely to be slow.",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/io/StreamUtils.java",
                "tnLine": 128,
                "tnColumn": 24,
                "tnPatch": null,
                "tnCodeLine": "            public int read() throws IOException {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UnusedVariable",
                "tnDesc": "The local variable 'context' is never read.",
                "tnFile": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/AccessLogFilter.java",
                "tnLine": 165,
                "tnColumn": 20,
                "tnPatch": null,
                "tnCodeLine": "        RpcContext context = RpcContext.getContext();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JdkObsolete",
                "tnDesc": "It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.",
                "tnFile": "dubbo-rpc/dubbo-rpc-rest/src/main/java/org/apache/dubbo/rpc/protocol/rest/RestProtocol.java",
                "tnLine": 79,
                "tnColumn": 79,
                "tnPatch": null,
                "tnCodeLine": "    private final List<ResteasyClient> clients = Collections.synchronizedList(new LinkedList<>());",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Return value of methods returning Future must be checked. Ignoring returned Futures suppresses exceptions thrown from the code that completes the Future.",
                "tnFile": "dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/server/handler/QosProcessHandler.java",
                "tnLine": 61,
                "tnColumn": 38,
                "tnPatch": null,
                "tnCodeLine": "                    ctx.writeAndFlush(Unpooled.wrappedBuffer(prompt.getBytes()));",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "IntLongMath",
                "tnDesc": "Expression of type int may overflow before being assigned to a long",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/io/UnsafeByteArrayInputStream.java",
                "tnLine": 74,
                "tnColumn": 26,
                "tnPatch": null,
                "tnCodeLine": "            len = mLimit - mPosition;",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ClassNewInstance",
                "tnDesc": "Class.newInstance() bypasses exception checking; prefer getDeclaredConstructor().newInstance()",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/json/J2oVisitor.java",
                "tnLine": 248,
                "tnColumn": 47,
                "tnPatch": null,
                "tnCodeLine": "                    mValue = mType.newInstance();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ClassNewInstance",
                "tnDesc": "Class.newInstance() bypasses exception checking; prefer getDeclaredConstructor().newInstance()",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/beanutil/JavaBeanSerializeUtil.java",
                "tnLine": 343,
                "tnColumn": 30,
                "tnPatch": null,
                "tnCodeLine": "        return cl.newInstance();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UnusedVariable",
                "tnDesc": "The local variable 'retType' is never read.",
                "tnFile": "dubbo-rpc/dubbo-rpc-xml/src/main/java/org/apache/dubbo/xml/rpc/protocol/xmlrpc/XmlRpcProxyFactoryBean.java",
                "tnLine": 88,
                "tnColumn": 14,
                "tnPatch": null,
                "tnCodeLine": "        Type retType = (invocation.getMethod().getGenericReturnType() != null)",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "EqualsGetClass",
                "tnDesc": "Overriding Object#equals in a non-final class by using getClass rather than instanceof breaks substitutability of subclasses.",
                "tnFile": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractConfig.java",
                "tnLine": 646,
                "tnColumn": 20,
                "tnPatch": null,
                "tnCodeLine": "    public boolean equals(Object obj) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "DefaultCharset",
                "tnDesc": "Implicit use of the platform default charset, which can result in differing behaviour between JVM executions or incorrect behavior if the encoding of the data source doesn't match expectations.",
                "tnFile": "dubbo-serialization/dubbo-serialization-gson/src/main/java/org/apache/dubbo/common/serialize/gson/GsonJsonObjectOutput.java",
                "tnLine": 86,
                "tnColumn": 24,
                "tnPatch": null,
                "tnCodeLine": "        writer.println(new String(b));",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "OperatorPrecedence",
                "tnDesc": "Use grouping parenthesis to make the operator precedence explicit",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/io/Bytes.java",
                "tnLine": 565,
                "tnColumn": 38,
                "tnPatch": null,
                "tnCodeLine": "            cs[w++] = code[(b1 << 4) & MASK6 | (b2 >> 4)];",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Return value of methods returning Future must be checked. Ignoring returned Futures suppresses exceptions thrown from the code that completes the Future.",
                "tnFile": "dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/FutureAdapter.java",
                "tnLine": 37,
                "tnColumn": 28,
                "tnPatch": null,
                "tnCodeLine": "        future.whenComplete((appResponse, t) -> {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UnusedVariable",
                "tnDesc": "The local variable 'type' is never read.",
                "tnFile": "dubbo-rpc/dubbo-rpc-thrift/src/main/java/org/apache/dubbo/rpc/protocol/thrift/ThriftNativeCodec.java",
                "tnLine": 77,
                "tnColumn": 26,
                "tnPatch": null,
                "tnCodeLine": "                Class<?> type = invocation.getParameterTypes()[i];",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "InconsistentCapitalization",
                "tnDesc": "Found the field 'threadpool' with the same name as the parameter 'threadPool' but with different capitalization.",
                "tnFile": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/builders/ConsumerBuilder.java",
                "tnLine": 74,
                "tnColumn": 46,
                "tnPatch": null,
                "tnCodeLine": "    public ConsumerBuilder threadPool(String threadPool) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UnnecessaryParentheses",
                "tnDesc": "Unnecessary use of grouping parentheses",
                "tnFile": "dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/exchange/support/DefaultFuture.java",
                "tnLine": 156,
                "tnColumn": 27,
                "tnPatch": null,
                "tnCodeLine": "                        + (new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS\").format(new Date()))",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JdkObsolete",
                "tnDesc": "It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.",
                "tnFile": "dubbo-registry/dubbo-registry-nacos/src/main/java/org/apache/dubbo/registry/nacos/NacosRegistry.java",
                "tnLine": 339,
                "tnColumn": 26,
                "tnPatch": null,
                "tnCodeLine": "        List<URL> urls = new LinkedList<>();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "DefaultCharset",
                "tnDesc": "Implicit use of the platform default charset, which can result in differing behaviour between JVM executions or incorrect behavior if the encoding of the data source doesn't match expectations.",
                "tnFile": "dubbo-serialization/dubbo-serialization-fastjson/src/main/java/org/apache/dubbo/common/serialize/fastjson/FastJsonObjectOutput.java",
                "tnLine": 93,
                "tnColumn": 24,
                "tnPatch": null,
                "tnCodeLine": "        writer.println(new String(b, off, len));",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "OperatorPrecedence",
                "tnDesc": "Use grouping parenthesis to make the operator precedence explicit",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/io/Bytes.java",
                "tnLine": 549,
                "tnColumn": 38,
                "tnPatch": null,
                "tnCodeLine": "            cs[w++] = code[(b1 << 4) & MASK6 | (b2 >> 4)];",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Return value of methods returning Future must be checked. Ignoring returned Futures suppresses exceptions thrown from the code that completes the Future.",
                "tnFile": "dubbo-monitor/dubbo-monitor-api/src/main/java/org/apache/dubbo/monitor/support/AbstractMonitorFactory.java",
                "tnLine": 90,
                "tnColumn": 43,
                "tnPatch": null,
                "tnCodeLine": "            completableFuture.thenRunAsync(new MonitorListener(key), executor);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UnsynchronizedOverridesSynchronized",
                "tnDesc": "Unsynchronized method export overrides synchronized method in ServiceConfig",
                "tnFile": "dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/ServiceBean.java",
                "tnLine": 335,
                "tnColumn": 17,
                "tnPatch": null,
                "tnCodeLine": "    public void export() {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.Result",
                "tnFile": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/GenericImplFilter.java",
                "tnLine": 94,
                "tnColumn": 34,
                "tnPatch": null,
                "tnCodeLine": "            return invoker.invoke(invocation2);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.Result",
                "tnFile": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/ClassLoaderFilter.java",
                "tnLine": 38,
                "tnColumn": 34,
                "tnPatch": null,
                "tnCodeLine": "            return invoker.invoke(invocation);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UnnecessaryParentheses",
                "tnDesc": "Unnecessary use of grouping parentheses",
                "tnFile": "dubbo-rpc/dubbo-rpc-injvm/src/main/java/org/apache/dubbo/rpc/protocol/injvm/InjvmProtocol.java",
                "tnLine": 103,
                "tnColumn": 42,
                "tnPatch": null,
                "tnCodeLine": "        if (SCOPE_LOCAL.equals(scope) || (url.getParameter(LOCAL_PROTOCOL, false))) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UnnecessaryParentheses",
                "tnDesc": "Unnecessary use of grouping parentheses",
                "tnFile": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/proxy/AbstractProxyInvoker.java",
                "tnLine": 113,
                "tnColumn": 39,
                "tnPatch": null,
                "tnCodeLine": "            return ((AsyncContextImpl)(RpcContext.getContext().getAsyncContext())).getInternalFuture();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JdkObsolete",
                "tnDesc": "StringBuffer performs synchronization that is usually unnecessary; prefer StringBuilder.",
                "tnFile": "dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/telnet/LogTelnetHandler.java",
                "tnLine": 47,
                "tnColumn": 28,
                "tnPatch": null,
                "tnCodeLine": "        StringBuffer buf = new StringBuffer();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "StringSplitter",
                "tnDesc": "String.split(String) has surprising behavior",
                "tnFile": "dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/decoder/HttpCommandDecoder.java",
                "tnLine": 39,
                "tnColumn": 40,
                "tnPatch": null,
                "tnCodeLine": "            String[] array = path.split(\"/\");",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Return value of methods returning Future must be checked. Ignoring returned Futures suppresses exceptions thrown from the code that completes the Future.",
                "tnFile": "dubbo-remoting/dubbo-remoting-netty4/src/main/java/org/apache/dubbo/remoting/transport/netty4/NettyServer.java",
                "tnLine": 150,
                "tnColumn": 47,
                "tnPatch": null,
                "tnCodeLine": "                workerGroup.shutdownGracefully();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UnusedVariable",
                "tnDesc": "The parameter 'invocation' is never read.",
                "tnFile": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/proxy/AbstractProxyInvoker.java",
                "tnLine": 111,
                "tnColumn": 80,
                "tnPatch": null,
                "tnCodeLine": "    private CompletableFuture<Object> wrapWithFuture (Object value, Invocation invocation) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FallThrough",
                "tnDesc": "Execution may fall through from the previous case; add a `// fall through` comment before this line if it was deliberate",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/json/Yylex.java",
                "tnLine": 828,
                "tnColumn": 17,
                "tnPatch": null,
                "tnCodeLine": "                case 55:",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.AsyncRpcResult",
                "tnFile": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/support/MockInvoker.java",
                "tnLine": 115,
                "tnColumn": 60,
                "tnPatch": null,
                "tnCodeLine": "                return AsyncRpcResult.newDefaultAsyncResult(value, invocation);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UnusedVariable",
                "tnDesc": "The field 'url' is never read.",
                "tnFile": "dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/RegistryDirectory.java",
                "tnLine": 709,
                "tnColumn": 21,
                "tnPatch": null,
                "tnCodeLine": "        private URL url;",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.Result",
                "tnFile": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/ActiveLimitFilter.java",
                "tnLine": 83,
                "tnColumn": 30,
                "tnPatch": null,
                "tnCodeLine": "        return invoker.invoke(invocation);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "DefaultCharset",
                "tnDesc": "Implicit use of the platform default charset, which can result in differing behaviour between JVM executions or incorrect behavior if the encoding of the data source doesn't match expectations.",
                "tnFile": "dubbo-serialization/dubbo-serialization-protostuff/src/main/java/org/apache/dubbo/common/serialize/protostuff/ProtostuffObjectInput.java",
                "tnLine": 57,
                "tnColumn": 28,
                "tnPatch": null,
                "tnCodeLine": "        String className = new String(classNameBytes);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "WaitNotInLoop",
                "tnDesc": "Because of spurious wakeups, await() must always be called in a loop",
                "tnFile": "dubbo-container/dubbo-container-api/src/main/java/org/apache/dubbo/container/Main.java",
                "tnLine": 100,
                "tnColumn": 23,
                "tnPatch": null,
                "tnCodeLine": "            STOP.await();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ClassNewInstance",
                "tnDesc": "Class.newInstance() bypasses exception checking; prefer getDeclaredConstructor().newInstance()",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/extension/ExtensionLoader.java",
                "tnLine": 845,
                "tnColumn": 79,
                "tnPatch": null,
                "tnCodeLine": "            return injectExtension((T) getAdaptiveExtensionClass().newInstance());",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ClassNewInstance",
                "tnDesc": "Class.newInstance() bypasses exception checking; prefer getDeclaredConstructor().newInstance()",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/bytecode/Wrapper.java",
                "tnLine": 271,
                "tnColumn": 44,
                "tnPatch": null,
                "tnCodeLine": "            return (Wrapper) wc.newInstance();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JdkObsolete",
                "tnDesc": "StringBuffer performs synchronization that is usually unnecessary; prefer StringBuilder.",
                "tnFile": "dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/telnet/support/TelnetUtils.java",
                "tnLine": 118,
                "tnColumn": 35,
                "tnPatch": null,
                "tnCodeLine": "            StringBuffer rowbuf = new StringBuffer();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UnusedVariable",
                "tnDesc": "The field 'url' is never read.",
                "tnFile": "dubbo-configcenter/dubbo-configcenter-consul/src/main/java/org/apache/dubbo/configcenter/consul/ConsulDynamicConfiguration.java",
                "tnLine": 56,
                "tnColumn": 17,
                "tnPatch": null,
                "tnCodeLine": "    private URL url;",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "TimeUnitConversionChecker",
                "tnDesc": "This TimeUnit conversion looks buggy: converting from a smaller unit to a larger unit (and passing a constant), converting to/from the same TimeUnit, or converting TimeUnits where the result is statically known to be 0 or 1 are all buggy patterns.",
                "tnFile": "dubbo-monitor/dubbo-monitor-default/src/main/java/org/apache/dubbo/monitor/dubbo/MetricsFilter.java",
                "tnLine": 227,
                "tnColumn": 63,
                "tnPatch": null,
                "tnCodeLine": "                double rateFactor = TimeUnit.SECONDS.toSeconds(1);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "DefaultCharset",
                "tnDesc": "Implicit use of the platform default charset, which can result in differing behaviour between JVM executions or incorrect behavior if the encoding of the data source doesn't match expectations.",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/utils/JVMUtil.java",
                "tnLine": 30,
                "tnColumn": 66,
                "tnPatch": null,
                "tnCodeLine": "            stream.write(getThreadDumpString(threadInfo).getBytes());",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "InconsistentCapitalization",
                "tnDesc": "Found the field 'iothreads' with the same name as the parameter 'ioThreads' but with different capitalization.",
                "tnFile": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/builders/ProviderBuilder.java",
                "tnLine": 168,
                "tnColumn": 46,
                "tnPatch": null,
                "tnCodeLine": "    public ProviderBuilder ioThreads(Integer ioThreads) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ClassCanBeStatic",
                "tnDesc": "Inner class is non-static but does not reference enclosing class",
                "tnFile": "dubbo-monitor/dubbo-monitor-api/src/main/java/org/apache/dubbo/monitor/support/AbstractMonitorFactory.java",
                "tnLine": 102,
                "tnColumn": 5,
                "tnPatch": null,
                "tnCodeLine": "    class MonitorListener implements Runnable {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.Result",
                "tnFile": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/GenericFilter.java",
                "tnLine": 141,
                "tnColumn": 38,
                "tnPatch": null,
                "tnCodeLine": "                return invoker.invoke(new RpcInvocation(method, args, inv.getAttachments()));",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UnusedVariable",
                "tnDesc": "The field 'list' is never read.",
                "tnFile": "dubbo-serialization/dubbo-serialization-protobuf-json/src/main/java/org/apache/dubbo/common/serialize/protobuf/support/ProtobufTypeBuilder.java",
                "tnLine": 43,
                "tnColumn": 39,
                "tnPatch": null,
                "tnCodeLine": "    private static final List<String> list = null;",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "DefaultCharset",
                "tnDesc": "Implicit use of the platform default charset, which can result in differing behaviour between JVM executions or incorrect behavior if the encoding of the data source doesn't match expectations.",
                "tnFile": "dubbo-remoting/dubbo-remoting-p2p/src/main/java/org/apache/dubbo/remoting/p2p/support/MulticastGroup.java",
                "tnLine": 89,
                "tnColumn": 60,
                "tnPatch": null,
                "tnCodeLine": "        DatagramPacket hi = new DatagramPacket(msg.getBytes(), msg.length(), mutilcastAddress, mutilcastSocket.getLocalPort());",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Return value of methods returning Future must be checked. Ignoring returned Futures suppresses exceptions thrown from the code that completes the Future.",
                "tnFile": "dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/server/handler/QosProcessHandler.java",
                "tnLine": 102,
                "tnColumn": 22,
                "tnPatch": null,
                "tnCodeLine": "            ctx.close();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UnnecessaryParentheses",
                "tnDesc": "Unnecessary use of grouping parentheses",
                "tnFile": "dubbo-remoting/dubbo-remoting-etcd3/src/main/java/org/apache/dubbo/remoting/etcd/jetcd/JEtcdClientWrapper.java",
                "tnLine": 213,
                "tnColumn": 43,
                "tnPatch": null,
                "tnCodeLine": "        return ConnectivityState.READY == (getChannel().getState(false))",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.AsyncRpcResult",
                "tnFile": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/wrapper/MockClusterInvoker.java",
                "tnLine": 118,
                "tnColumn": 62,
                "tnPatch": null,
                "tnCodeLine": "                result = AsyncRpcResult.newDefaultAsyncResult(me.getCause(), invocation);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "GetClassOnClass",
                "tnDesc": "Calling getClass() on an object of type Class returns the Class object for java.lang.Class; you probably meant to operate on the object directly",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/extension/ExtensionLoader.java",
                "tnLine": 798,
                "tnColumn": 51,
                "tnPatch": null,
                "tnCodeLine": "                    + cachedAdaptiveClass.getClass().getName()",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FallThrough",
                "tnDesc": "Execution may fall through from the previous case; add a `// fall through` comment before this line if it was deliberate",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/json/Yylex.java",
                "tnLine": 751,
                "tnColumn": 17,
                "tnPatch": null,
                "tnCodeLine": "                case 41:",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "DefaultCharset",
                "tnDesc": "Implicit use of the platform default charset, which can result in differing behaviour between JVM executions or incorrect behavior if the encoding of the data source doesn't match expectations.",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/utils/IOUtils.java",
                "tnLine": 186,
                "tnColumn": 46,
                "tnPatch": null,
                "tnCodeLine": "        PrintWriter writer = new PrintWriter(new OutputStreamWriter(os));",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Return value of methods returning Future must be checked. Ignoring returned Futures suppresses exceptions thrown from the code that completes the Future.",
                "tnFile": "dubbo-remoting/dubbo-remoting-netty4/src/main/java/org/apache/dubbo/remoting/transport/netty4/NettyServer.java",
                "tnLine": 128,
                "tnColumn": 30,
                "tnPatch": null,
                "tnCodeLine": "                channel.close();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "BoxedPrimitiveConstructor",
                "tnDesc": "valueOf or autoboxing provides better time and space performance",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/beanutil/JavaBeanSerializeUtil.java",
                "tnLine": 362,
                "tnColumn": 20,
                "tnPatch": null,
                "tnCodeLine": "            return new Character((char) 0);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UnnecessaryParentheses",
                "tnDesc": "Unnecessary use of grouping parentheses",
                "tnFile": "dubbo-remoting/dubbo-remoting-etcd3/src/main/java/org/apache/dubbo/remoting/etcd/jetcd/JEtcdClientWrapper.java",
                "tnLine": 214,
                "tnColumn": 46,
                "tnPatch": null,
                "tnCodeLine": "                || ConnectivityState.IDLE == (getChannel().getState(false));",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.AsyncRpcResult",
                "tnFile": "dubbo-rpc/dubbo-rpc-redis/src/main/java/org/apache/dubbo/rpc/protocol/redis/RedisProtocol.java",
                "tnLine": 141,
                "tnColumn": 72,
                "tnPatch": null,
                "tnCodeLine": "                            return AsyncRpcResult.newDefaultAsyncResult(invocation);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Return value of methods returning Future must be checked. Ignoring returned Futures suppresses exceptions thrown from the code that completes the Future.",
                "tnFile": "dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/server/handler/TelnetProcessHandler.java",
                "tnLine": 58,
                "tnColumn": 34,
                "tnPatch": null,
                "tnCodeLine": "                ctx.writeAndFlush(msg + \" :no such command\");",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.Result",
                "tnFile": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/invoker/DelegateProviderMetaDataInvoker.java",
                "tnLine": 56,
                "tnColumn": 30,
                "tnPatch": null,
                "tnCodeLine": "        return invoker.invoke(invocation);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Return value of methods returning Future must be checked. Ignoring returned Futures suppresses exceptions thrown from the code that completes the Future.",
                "tnFile": "dubbo-remoting/dubbo-remoting-netty4/src/main/java/org/apache/dubbo/remoting/transport/netty4/NettyClient.java",
                "tnLine": 155,
                "tnColumn": 45,
                "tnPatch": null,
                "tnCodeLine": "                            newChannel.close();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UnusedVariable",
                "tnDesc": "The local variable 'portToBind' is never read.",
                "tnFile": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ServiceConfig.java",
                "tnLine": 739,
                "tnColumn": 17,
                "tnPatch": null,
                "tnCodeLine": "        Integer portToBind = null;",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UnusedVariable",
                "tnDesc": "The parameter 'event' is never read.",
                "tnFile": "dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/ReferenceAnnotationBeanPostProcessor.java",
                "tnLine": 248,
                "tnColumn": 64,
                "tnPatch": null,
                "tnCodeLine": "    private void onContextRefreshedEvent(ContextRefreshedEvent event) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JavaLangClash",
                "tnDesc": "org.apache.dubbo.common.bytecode.NoSuchMethodException clashes with java.lang.NoSuchMethodException",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/bytecode/NoSuchMethodException.java",
                "tnLine": 23,
                "tnColumn": 8,
                "tnPatch": null,
                "tnCodeLine": "public class NoSuchMethodException extends RuntimeException {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "StringSplitter",
                "tnDesc": "String.split(String) has surprising behavior",
                "tnFile": "dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/telnet/ShutdownTelnetHandler.java",
                "tnLine": 38,
                "tnColumn": 48,
                "tnPatch": null,
                "tnCodeLine": "            String[] parameters = message.split(\"\\\\s+\");",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Method returns a nested type, org.apache.dubbo.rpc.AsyncRpcResult",
                "tnFile": "dubbo-filter/dubbo-filter-validation/src/main/java/org/apache/dubbo/validation/filter/ValidationFilter.java",
                "tnLine": 93,
                "tnColumn": 60,
                "tnPatch": null,
                "tnCodeLine": "                return AsyncRpcResult.newDefaultAsyncResult(t, invocation);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JdkObsolete",
                "tnDesc": "StringBuffer performs synchronization that is usually unnecessary; prefer StringBuilder.",
                "tnFile": "dubbo-common/src/main/java/org/apache/dubbo/common/json/Yylex.java",
                "tnLine": 820,
                "tnColumn": 26,
                "tnPatch": null,
                "tnCodeLine": "                    sb = new StringBuffer();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Return value of methods returning Future must be checked. Ignoring returned Futures suppresses exceptions thrown from the code that completes the Future.",
                "tnFile": "dubbo-remoting/dubbo-remoting-netty4/src/main/java/org/apache/dubbo/remoting/transport/netty4/NettyServer.java",
                "tnLine": 118,
                "tnColumn": 42,
                "tnPatch": null,
                "tnCodeLine": "        channelFuture.syncUninterruptibly();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UnusedVariable",
                "tnDesc": "The parameter 'key' is never read.",
                "tnFile": "dubbo-configcenter/dubbo-configcenter-apollo/src/main/java/org/apache/dubbo/configcenter/support/apollo/ApolloDynamicConfiguration.java",
                "tnLine": 188,
                "tnColumn": 56,
                "tnPatch": null,
                "tnCodeLine": "    private ApolloListener createTargetListener(String key, String group) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "FutureReturnValueIgnored",
                "tnDesc": "Return value of methods returning Future must be checked. Ignoring returned Futures suppresses exceptions thrown from the code that completes the Future.",
                "tnFile": "dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/ChannelWrappedInvoker.java",
                "tnLine": 77,
                "tnColumn": 44,
                "tnPatch": null,
                "tnCodeLine": "                responseFuture.whenComplete((appResponse, t) -> {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              }
            ],
            null,
            {
              "analysisLOC": null,
              "analysisBuildSys": "Maven []",
              "analysisLang": null
            }
          ]
        }
      ]
    ]
    }
    }