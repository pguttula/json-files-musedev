{
  "tag": "AnalysisSuccess",
  "contents": {
    "requestedTools": null,
    "toolResults": [
      [
        {
          "tag": "Infer"
        },
        {
          "tag": "ToolSuccess",
          "contents": [
            [
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `void ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean)` reads without synchronization from `this.resizeThreshold`. Potentially races with write in method `ConcurrentReferenceHashMap$Segment.clear()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-core/src/main/java/org/springframework/util/ConcurrentReferenceHashMap.java",
                "tnLine": 573,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean):void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void ScheduledAnnotationBeanPostProcessor.afterSingletonsInstantiated()` indirectly writes to field `this.registrar.cronTasks` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java",
                "tnLine": 223,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessor.afterSingletonsInstantiated():void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void SpelExpression.revertToInterpreted()` writes to field `this.compiledAst` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-expression/src/main/java/org/springframework/expression/spel/standard/SpelExpression.java",
                "tnLine": 528,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.expression.spel.standard.SpelExpression.revertToInterpreted():void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "NULL_DEREFERENCE",
                "tnDesc": "object returned by `toString()` could be null and is dereferenced at line 50.",
                "tnFile": "spring-core/src/main/java/org/springframework/core/log/LogMessage.java",
                "tnLine": 50,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.core.log.LogMessage.length():int",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `Collection AbstractApplicationEventMulticaster.getApplicationListeners(ApplicationEvent,ResolvableType)` reads without synchronization from `this.beanClassLoader`. Potentially races with write in method `AbstractApplicationEventMulticaster.setBeanClassLoader(...)`.\n Reporting because this access may occur on a background thread.",
                "tnFile": "spring-context/src/main/java/org/springframework/context/event/AbstractApplicationEventMulticaster.java",
                "tnLine": 185,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.context.event.AbstractApplicationEventMulticaster.getApplicationListeners(org.springframework.context.ApplicationEvent,org.springframework.core.ResolvableType):java.util.Collection",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "NULL_DEREFERENCE",
                "tnDesc": "object returned by `toString()` could be null and is dereferenced at line 60.",
                "tnFile": "spring-core/src/main/java/org/springframework/core/log/LogMessage.java",
                "tnLine": 60,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.core.log.LogMessage.subSequence(int,int):java.lang.CharSequence",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `java.lang.Object[] AbstractAspectJAdvice.argBinding(JoinPoint,JoinPointMatch,Object,Throwable)` reads without synchronization from `this.joinPointStaticPartArgumentIndex`. Potentially races with write in method `AbstractAspectJAdvice.calculateArgumentBindings()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-aop/src/main/java/org/springframework/aop/aspectj/AbstractAspectJAdvice.java",
                "tnLine": 574,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.aop.aspectj.AbstractAspectJAdvice.argBinding(org.aspectj.lang.JoinPoint,org.aspectj.weaver.tools.JoinPointMatch,java.lang.Object,java.lang.Throwable):java.lang.Object[]",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "NULL_DEREFERENCE",
                "tnDesc": "object `CacheAspectSupport$CacheOperationContext.conditionPassing` last assigned on line 750 could be null and is dereferenced at line 753.",
                "tnFile": "spring-context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java",
                "tnLine": 753,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.cache.interceptor.CacheAspectSupport$CacheOperationContext.isConditionPassing(java.lang.Object):boolean",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void CachingMetadataReaderFactory.clearCache()` indirectly writes to field `this.metadataReaderCache` outside of synchronization.\n Reporting because this access may occur on a background thread.",
                "tnFile": "spring-core/src/main/java/org/springframework/core/type/classreading/CachingMetadataReaderFactory.java",
                "tnLine": 154,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.core.type.classreading.CachingMetadataReaderFactory.clearCache():void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "NULL_DEREFERENCE",
                "tnDesc": "object returned by `managedResource.getClass()` could be null and is dereferenced at line 487.",
                "tnFile": "spring-context/src/main/java/org/springframework/jmx/export/MBeanExporter.java",
                "tnLine": 487,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.jmx.export.MBeanExporter.registerManagedResource(org.springframework.jmx.export.notification.NotificationPublisherAware,javax.management.ObjectName):void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `String AbstractMessageSource.getMessageInternal(String,java.lang.Object[],Locale)` indirectly reads without synchronization from `this.parentMessageSource`. Potentially races with write in method `AbstractMessageSource.setParentMessageSource(...)`.\n Reporting because this access may occur on a background thread.",
                "tnFile": "spring-context/src/main/java/org/springframework/context/support/AbstractMessageSource.java",
                "tnLine": 242,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.context.support.AbstractMessageSource.getMessageInternal(java.lang.String,java.lang.Object[],java.util.Locale):java.lang.String",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `void AbstractApplicationContext.stop()` indirectly reads without synchronization from `this.applicationEventMulticaster`. Potentially races with write in method `AbstractApplicationContext.refresh()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java",
                "tnLine": 1354,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.context.support.AbstractApplicationContext.stop():void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "NULL_DEREFERENCE",
                "tnDesc": "object `ConnectorServerFactoryBean.connectorServer` last assigned on line 158 could be null and is dereferenced at line 162.",
                "tnFile": "spring-context/src/main/java/org/springframework/jmx/support/ConnectorServerFactoryBean.java",
                "tnLine": 162,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.jmx.support.ConnectorServerFactoryBean.afterPropertiesSet():void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void JndiRmiClientInterceptor.prepare()` writes to field `this.cachedStub` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-context/src/main/java/org/springframework/remoting/rmi/JndiRmiClientInterceptor.java",
                "tnLine": 207,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.remoting.rmi.JndiRmiClientInterceptor.prepare():void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void AbstractApplicationContext.prepareRefresh()` writes to field `this.earlyApplicationListeners` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java",
                "tnLine": 607,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.context.support.AbstractApplicationContext.prepareRefresh():void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "NULL_DEREFERENCE",
                "tnDesc": "object returned by `toString()` could be null and is dereferenced at line 55.",
                "tnFile": "spring-core/src/main/java/org/springframework/core/log/LogMessage.java",
                "tnLine": 55,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.core.log.LogMessage.charAt(int):char",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "NULL_DEREFERENCE",
                "tnDesc": "object `ConnectorServerFactoryBean.connectorServer` last assigned on line 158 could be null and is dereferenced at line 192.",
                "tnFile": "spring-context/src/main/java/org/springframework/jmx/support/ConnectorServerFactoryBean.java",
                "tnLine": 192,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.jmx.support.ConnectorServerFactoryBean.afterPropertiesSet():void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `void AbstractApplicationContext.registerListeners()` indirectly reads without synchronization from `this.applicationEventMulticaster`. Potentially races with write in method `AbstractApplicationContext.refresh()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java",
                "tnLine": 825,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.context.support.AbstractApplicationContext.registerListeners():void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `Class AbstractAspectJAdvice.getDiscoveredThrowingType()` reads without synchronization from `this.discoveredThrowingType`. Potentially races with write in method `AbstractAspectJAdvice.calculateArgumentBindings()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-aop/src/main/java/org/springframework/aop/aspectj/AbstractAspectJAdvice.java",
                "tnLine": 350,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.aop.aspectj.AbstractAspectJAdvice.getDiscoveredThrowingType():java.lang.Class",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `Object AbstractSlsbInvokerInterceptor.getHome()` reads without synchronization from `this.cachedHome`. Potentially races with write in method `AbstractSlsbInvokerInterceptor.create()`.\n Reporting because this access may occur on a background thread.",
                "tnFile": "spring-context/src/main/java/org/springframework/ejb/access/AbstractSlsbInvokerInterceptor.java",
                "tnLine": 163,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.ejb.access.AbstractSlsbInvokerInterceptor.getHome():java.lang.Object",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "NULL_DEREFERENCE",
                "tnDesc": "object `ConnectorDelegate.connector` last assigned on line 62 could be null and is dereferenced at line 63.",
                "tnFile": "spring-context/src/main/java/org/springframework/jmx/access/ConnectorDelegate.java",
                "tnLine": 63,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.jmx.access.ConnectorDelegate.connect(javax.management.remote.JMXServiceURL,java.util.Map,java.lang.String):javax.management.MBeanServerConnection",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `void RmiRegistryFactoryBean.destroy()` reads without synchronization from `this.created`. Potentially races with write in method `RmiRegistryFactoryBean.getRegistry(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-context/src/main/java/org/springframework/remoting/rmi/RmiRegistryFactoryBean.java",
                "tnLine": 309,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.remoting.rmi.RmiRegistryFactoryBean.destroy():void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `void MBeanRegistrationSupport.unregisterBeans()` indirectly reads without synchronization from `this.server`. Potentially races with write in method `MBeanRegistrationSupport.setServer(...)`.\n Reporting because this access may occur on a background thread.",
                "tnFile": "spring-context/src/main/java/org/springframework/jmx/support/MBeanRegistrationSupport.java",
                "tnLine": 187,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.jmx.support.MBeanRegistrationSupport.unregisterBeans():void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void ProxyCreatorSupport.adviceChanged()` indirectly mutates container `this.methodCache` via call to `clear` outside of synchronization.\n Reporting because this access may occur on a background thread.",
                "tnFile": "spring-aop/src/main/java/org/springframework/aop/framework/ProxyCreatorSupport.java",
                "tnLine": 125,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.aop.framework.ProxyCreatorSupport.adviceChanged():void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `Registry RmiServiceExporter.getRegistry(int,RMIClientSocketFactory,RMIServerSocketFactory)` indirectly reads without synchronization from `this.alwaysCreateRegistry`. Potentially races with write in method `RmiServiceExporter.setAlwaysCreateRegistry(...)`.\n Reporting because this access may occur on a background thread.",
                "tnFile": "spring-context/src/main/java/org/springframework/remoting/rmi/RmiServiceExporter.java",
                "tnLine": 378,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.remoting.rmi.RmiServiceExporter.getRegistry(int,java.rmi.server.RMIClientSocketFactory,java.rmi.server.RMIServerSocketFactory):java.rmi.registry.Registry",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `String MessageSourceSupport.formatMessage(String,java.lang.Object[],Locale)` indirectly reads without synchronization from `this.alwaysUseMessageFormat`. Potentially races with write in method `MessageSourceSupport.setAlwaysUseMessageFormat(...)`.\n Reporting because this access may occur on a background thread.",
                "tnFile": "spring-context/src/main/java/org/springframework/context/support/MessageSourceSupport.java",
                "tnLine": 115,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.context.support.MessageSourceSupport.formatMessage(java.lang.String,java.lang.Object[],java.util.Locale):java.lang.String",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `void AbstractEnvironment.merge(ConfigurableEnvironment)` indirectly reads without synchronization from container `this.propertySources.propertySourceList` via call to `contains`. Potentially races with write in method `AbstractEnvironment.merge(...)`.\n Reporting because this access may occur on a background thread.",
                "tnFile": "spring-core/src/main/java/org/springframework/core/env/AbstractEnvironment.java",
                "tnLine": 458,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.core.env.AbstractEnvironment.merge(org.springframework.core.env.ConfigurableEnvironment):void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `ThemeSource ResourceBundleThemeSource.getParentThemeSource()` reads without synchronization from `this.parentThemeSource`. Potentially races with write in method `ResourceBundleThemeSource.setParentThemeSource(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-context/src/main/java/org/springframework/ui/context/support/ResourceBundleThemeSource.java",
                "tnLine": 84,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.ui.context.support.ResourceBundleThemeSource.getParentThemeSource():org.springframework.ui.context.ThemeSource",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `String ResourceScriptSource.getScriptAsString()` reads without synchronization from `this.resource`. Potentially races with write in method `ResourceScriptSource.setEncoding(...)`.\n Reporting because this access may occur on a background thread.",
                "tnFile": "spring-context/src/main/java/org/springframework/scripting/support/ResourceScriptSource.java",
                "tnLine": 102,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.scripting.support.ResourceScriptSource.getScriptAsString():java.lang.String",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void AbstractApplicationContext.finishRefresh()` indirectly mutates container `this.resourceCaches` via call to `clear` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java",
                "tnLine": 887,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.context.support.AbstractApplicationContext.finishRefresh():void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "RESOURCE_LEAK",
                "tnDesc": "resource of type `java.net.HttpURLConnection` acquired by call to `openConnection()` at line 170 is not released after line 173.",
                "tnFile": "spring-core/src/main/java/org/springframework/core/io/UrlResource.java",
                "tnLine": 173,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.core.io.UrlResource.getInputStream():java.io.InputStream",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "RESOURCE_LEAK",
                "tnDesc": "resource of type `java.io.OutputStreamWriter` acquired by call to `new()` at line 122 is not released after line 125.\n**Note**: potential exception at line 123",
                "tnFile": "spring-core/src/main/java/org/springframework/util/StreamUtils.java",
                "tnLine": 125,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.util.StreamUtils.copy(java.lang.String,java.nio.charset.Charset,java.io.OutputStream):void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `java.lang.Object[] AbstractAspectJAdvice.argBinding(JoinPoint,JoinPointMatch,Object,Throwable)` reads without synchronization from `this.argumentBindings`. Potentially races with write in method `AbstractAspectJAdvice.calculateArgumentBindings()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-aop/src/main/java/org/springframework/aop/aspectj/AbstractAspectJAdvice.java",
                "tnLine": 579,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.aop.aspectj.AbstractAspectJAdvice.argBinding(org.aspectj.lang.JoinPoint,org.aspectj.weaver.tools.JoinPointMatch,java.lang.Object,java.lang.Throwable):java.lang.Object[]",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `void AbstractApplicationContext.doClose()` reads without synchronization from `this.lifecycleProcessor`. Potentially races with write in method `AbstractApplicationContext.refresh()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java",
                "tnLine": 1016,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.context.support.AbstractApplicationContext.doClose():void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `Class ProxyFactoryBean.getObjectType()` indirectly reads without synchronization from `this.proxyClassLoader`. Potentially races with write in method `ProxyFactoryBean.setBeanClassLoader(...)`.\n Reporting because this access may occur on a background thread.",
                "tnFile": "spring-aop/src/main/java/org/springframework/aop/framework/ProxyFactoryBean.java",
                "tnLine": 283,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.aop.framework.ProxyFactoryBean.getObjectType():java.lang.Class",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `Object MBeanClientInterceptor.doInvoke(MethodInvocation)` indirectly reads without synchronization from `this.allowedOperations`. Potentially races with write in method `MBeanClientInterceptor.invoke(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-context/src/main/java/org/springframework/jmx/access/MBeanClientInterceptor.java",
                "tnLine": 425,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.jmx.access.MBeanClientInterceptor.doInvoke(org.aopalliance.intercept.MethodInvocation):java.lang.Object",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `void AbstractApplicationContext.start()` indirectly reads without synchronization from `this.applicationEventMulticaster`. Potentially races with write in method `AbstractApplicationContext.refresh()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java",
                "tnLine": 1348,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.context.support.AbstractApplicationContext.start():void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `void AbstractApplicationContext.prepareRefresh()` reads without synchronization from `this.earlyApplicationListeners`. Potentially races with write in method `AbstractApplicationContext.refresh()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java",
                "tnLine": 606,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.context.support.AbstractApplicationContext.prepareRefresh():void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `void AbstractApplicationContext.finishRefresh()` indirectly reads without synchronization from `this.applicationEventMulticaster`. Potentially races with write in method `AbstractApplicationContext.refresh()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java",
                "tnLine": 896,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.context.support.AbstractApplicationContext.finishRefresh():void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `int ThreadLocalTargetSource.getInvocationCount()` reads without synchronization from `this.invocationCount`. Potentially races with write in method `ThreadLocalTargetSource.getTarget()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-aop/src/main/java/org/springframework/aop/target/ThreadLocalTargetSource.java",
                "tnLine": 120,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.aop.target.ThreadLocalTargetSource.getInvocationCount():int",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `int CachingMetadataReaderFactory.getCacheLimit()` reads without synchronization from `this.metadataReaderCache`. Potentially races with write in method `CachingMetadataReaderFactory.clearCache()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-core/src/main/java/org/springframework/core/type/classreading/CachingMetadataReaderFactory.java",
                "tnLine": 108,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.core.type.classreading.CachingMetadataReaderFactory.getCacheLimit():int",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `void AbstractApplicationContext.doClose()` reads without synchronization from `this.earlyApplicationListeners`. Potentially races with write in method `AbstractApplicationContext.refresh()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java",
                "tnLine": 1035,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.context.support.AbstractApplicationContext.doClose():void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `Object BshScriptFactory.getScriptedObject(ScriptSource,java.lang.Class[])` reads without synchronization from `this.beanClassLoader`. Potentially races with write in method `BshScriptFactory.setBeanClassLoader(...)`.\n Reporting because this access may occur on a background thread.",
                "tnFile": "spring-context/src/main/java/org/springframework/scripting/bsh/BshScriptFactory.java",
                "tnLine": 174,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.scripting.bsh.BshScriptFactory.getScriptedObject(org.springframework.scripting.ScriptSource,java.lang.Class[]):java.lang.Object",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `Object JndiObjectTargetSource.getTarget()` reads without synchronization from `this.cachedObject`. Potentially races with write in method `JndiObjectTargetSource.afterPropertiesSet()`.\n Reporting because this access may occur on a background thread.",
                "tnFile": "spring-context/src/main/java/org/springframework/jndi/JndiObjectTargetSource.java",
                "tnLine": 135,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.jndi.JndiObjectTargetSource.getTarget():java.lang.Object",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void AbstractApplicationContext.resetCommonCaches()` indirectly mutates container `util.ReflectionUtils.declaredFieldsCache` via call to `clear` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java",
                "tnLine": 922,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.context.support.AbstractApplicationContext.resetCommonCaches():void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `boolean SimpleAliasRegistry.isAlias(String)` reads without synchronization from container `this.aliasMap` via call to `containsKey`. Potentially races with write in method `SimpleAliasRegistry.removeAlias(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-core/src/main/java/org/springframework/core/SimpleAliasRegistry.java",
                "tnLine": 125,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.core.SimpleAliasRegistry.isAlias(java.lang.String):boolean",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `boolean AbstractApplicationContext.isRunning()` reads without synchronization from `this.lifecycleProcessor`. Potentially races with write in method `AbstractApplicationContext.refresh()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java",
                "tnLine": 1359,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.context.support.AbstractApplicationContext.isRunning():boolean",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `boolean JndiObjectTargetSource.isStatic()` reads without synchronization from `this.cachedObject`. Potentially races with write in method `JndiObjectTargetSource.getTarget()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-context/src/main/java/org/springframework/jndi/JndiObjectTargetSource.java",
                "tnLine": 127,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.jndi.JndiObjectTargetSource.isStatic():boolean",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `Registry RmiRegistryFactoryBean.getRegistry(int,RMIClientSocketFactory,RMIServerSocketFactory)` indirectly reads without synchronization from `this.alwaysCreate`. Potentially races with write in method `RmiRegistryFactoryBean.setAlwaysCreate(...)`.\n Reporting because this access may occur on a background thread.",
                "tnFile": "spring-context/src/main/java/org/springframework/remoting/rmi/RmiRegistryFactoryBean.java",
                "tnLine": 238,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.remoting.rmi.RmiRegistryFactoryBean.getRegistry(int,java.rmi.server.RMIClientSocketFactory,java.rmi.server.RMIServerSocketFactory):java.rmi.registry.Registry",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `boolean SimpleAliasRegistry.hasAlias(String,String)` reads without synchronization from container `this.aliasMap` via call to `entrySet`. Potentially races with write in method `SimpleAliasRegistry.removeAlias(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-core/src/main/java/org/springframework/core/SimpleAliasRegistry.java",
                "tnLine": 101,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.core.SimpleAliasRegistry.hasAlias(java.lang.String,java.lang.String):boolean",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `ReloadableResourceBundleMessageSource$PropertiesHolder ReloadableResourceBundleMessageSource.getProperties(String)` reads without synchronization from `this.concurrentRefresh`. Potentially races with write in method `ReloadableResourceBundleMessageSource.setConcurrentRefresh(...)`.\n Reporting because this access may occur on a background thread.",
                "tnFile": "spring-context/src/main/java/org/springframework/context/support/ReloadableResourceBundleMessageSource.java",
                "tnLine": 369,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.context.support.ReloadableResourceBundleMessageSource.getProperties(java.lang.String):org.springframework.context.support.ReloadableResourceBundleMessageSource$PropertiesHolder",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `Advice AbstractBeanFactoryPointcutAdvisor.getAdvice()` reads without synchronization from `this.beanFactory`. Potentially races with write in method `AbstractBeanFactoryPointcutAdvisor.setBeanFactory(...)`.\n Reporting because this access may occur on a background thread.",
                "tnFile": "spring-aop/src/main/java/org/springframework/aop/support/AbstractBeanFactoryPointcutAdvisor.java",
                "tnLine": 112,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.aop.support.AbstractBeanFactoryPointcutAdvisor.getAdvice():org.aopalliance.aop.Advice",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `Object AbstractAspectJAdvice.invokeAdviceMethod(JoinPoint,JoinPointMatch,Object,Throwable)` indirectly reads without synchronization from `this.argumentBindings`. Potentially races with write in method `AbstractAspectJAdvice.calculateArgumentBindings()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-aop/src/main/java/org/springframework/aop/aspectj/AbstractAspectJAdvice.java",
                "tnLine": 633,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(org.aspectj.lang.JoinPoint,org.aspectj.weaver.tools.JoinPointMatch,java.lang.Object,java.lang.Throwable):java.lang.Object",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `ConfigurableEnvironment AbstractApplicationContext.getEnvironment()` writes to field `this.environment` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java",
                "tnLine": 317,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.context.support.AbstractApplicationContext.getEnvironment():org.springframework.core.env.ConfigurableEnvironment",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "NULL_DEREFERENCE",
                "tnDesc": "object `AbstractRefreshableTargetSource.targetObject` last assigned on line 71 could be null and is dereferenced at line 73.",
                "tnFile": "spring-aop/src/main/java/org/springframework/aop/target/dynamic/AbstractRefreshableTargetSource.java",
                "tnLine": 73,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.aop.target.dynamic.AbstractRefreshableTargetSource.getTargetClass():java.lang.Class",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `Object MBeanClientInterceptor.doInvoke(MethodInvocation)` indirectly reads without synchronization from `segment.resizeThreshold`. Potentially races with write in method `MBeanClientInterceptor.invoke(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-context/src/main/java/org/springframework/jmx/access/MBeanClientInterceptor.java",
                "tnLine": 428,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.jmx.access.MBeanClientInterceptor.doInvoke(org.aopalliance.intercept.MethodInvocation):java.lang.Object",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `String AbstractApplicationContext.toString()` indirectly reads without synchronization from `this.startupDate`. Potentially races with write in method `AbstractApplicationContext.refresh()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java",
                "tnLine": 1409,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.context.support.AbstractApplicationContext.toString():java.lang.String",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `Object AbstractSlsbInvokerInterceptor.create()` indirectly reads without synchronization from `this.cachedHome`. Potentially races with write in method `AbstractSlsbInvokerInterceptor.refreshHome()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-context/src/main/java/org/springframework/ejb/access/AbstractSlsbInvokerInterceptor.java",
                "tnLine": 221,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.ejb.access.AbstractSlsbInvokerInterceptor.create():java.lang.Object",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "RESOURCE_LEAK",
                "tnDesc": "resource of type `org.springframework.core.ConfigurableObjectInputStream` acquired by call to `ConfigurableObjectInputStream(...)` at line 70 is not released after line 72.",
                "tnFile": "spring-core/src/main/java/org/springframework/core/serializer/DefaultDeserializer.java",
                "tnLine": 72,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.core.serializer.DefaultDeserializer.deserialize(java.io.InputStream):java.lang.Object",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `ConfigurableEnvironment AbstractApplicationContext.getEnvironment()` reads without synchronization from `this.environment`. Potentially races with write in method `AbstractApplicationContext.refresh()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java",
                "tnLine": 316,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.context.support.AbstractApplicationContext.getEnvironment():org.springframework.core.env.ConfigurableEnvironment",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "NULL_DEREFERENCE",
                "tnDesc": "object `NotificationListenerRegistrar.server` last assigned on line 139 could be null and is dereferenced at line 148.",
                "tnFile": "spring-context/src/main/java/org/springframework/jmx/access/NotificationListenerRegistrar.java",
                "tnLine": 148,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.jmx.access.NotificationListenerRegistrar.prepare():void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `Registry RmiRegistryFactoryBean.getRegistry(int)` writes to field `this.created` outside of synchronization.\n Reporting because this access may occur on a background thread.",
                "tnFile": "spring-context/src/main/java/org/springframework/remoting/rmi/RmiRegistryFactoryBean.java",
                "tnLine": 251,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.remoting.rmi.RmiRegistryFactoryBean.getRegistry(int):java.rmi.registry.Registry",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void GroovyScriptFactory.setBeanClassLoader(ClassLoader)` writes to field `this.groovyClassLoader` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-context/src/main/java/org/springframework/scripting/groovy/GroovyScriptFactory.java",
                "tnLine": 161,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.scripting.groovy.GroovyScriptFactory.setBeanClassLoader(java.lang.ClassLoader):void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `Object AbstractAspectJAdvice.invokeAdviceMethod(JoinPointMatch,Object,Throwable)` indirectly reads without synchronization from `this.argumentBindings`. Potentially races with write in method `AbstractAspectJAdvice.calculateArgumentBindings()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-aop/src/main/java/org/springframework/aop/aspectj/AbstractAspectJAdvice.java",
                "tnLine": 626,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(org.aspectj.weaver.tools.JoinPointMatch,java.lang.Object,java.lang.Throwable):java.lang.Object",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `void AbstractApplicationEventMulticaster.addApplicationListenerBean(String)` reads without synchronization from `this.retrievalMutex`. Potentially races with write in method `AbstractApplicationEventMulticaster.setBeanFactory(...)`.\n Reporting because this access may occur on a background thread.",
                "tnFile": "spring-context/src/main/java/org/springframework/context/event/AbstractApplicationEventMulticaster.java",
                "tnLine": 120,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.context.event.AbstractApplicationEventMulticaster.addApplicationListenerBean(java.lang.String):void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "NULL_DEREFERENCE",
                "tnDesc": "object returned by `parameter.getParameterType()` could be null and is dereferenced at line 107.",
                "tnFile": "spring-core/src/main/java/org/springframework/core/Conventions.java",
                "tnLine": 107,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.core.Conventions.getVariableNameForParameter(org.springframework.core.MethodParameter):java.lang.String",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `void AbstractApplicationContext.publishEvent(Object,ResolvableType)` reads without synchronization from `this.earlyApplicationEvents`. Potentially races with write in method `AbstractApplicationContext.refresh()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java",
                "tnLine": 398,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.context.support.AbstractApplicationContext.publishEvent(java.lang.Object,org.springframework.core.ResolvableType):void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `void AbstractApplicationContext.publishEvent(Object,ResolvableType)` indirectly reads without synchronization from `this.applicationEventMulticaster`. Potentially races with write in method `AbstractApplicationContext.refresh()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java",
                "tnLine": 402,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.context.support.AbstractApplicationContext.publishEvent(java.lang.Object,org.springframework.core.ResolvableType):void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `void AbstractApplicationEventMulticaster.removeAllListeners()` reads without synchronization from `this.retrievalMutex`. Potentially races with write in method `AbstractApplicationEventMulticaster.setBeanFactory(...)`.\n Reporting because this access may occur on a background thread.",
                "tnFile": "spring-context/src/main/java/org/springframework/context/event/AbstractApplicationEventMulticaster.java",
                "tnLine": 144,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.context.event.AbstractApplicationEventMulticaster.removeAllListeners():void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `String AbstractMessageSource.getMessageInternal(String,java.lang.Object[],Locale)` indirectly reads without synchronization from `this.useCodeAsDefaultMessage`. Potentially races with write in method `AbstractMessageSource.setUseCodeAsDefaultMessage(...)`.\n Reporting because this access may occur on a background thread.",
                "tnFile": "spring-context/src/main/java/org/springframework/context/support/AbstractMessageSource.java",
                "tnLine": 222,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.context.support.AbstractMessageSource.getMessageInternal(java.lang.String,java.lang.Object[],java.util.Locale):java.lang.String",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `Object RmiClientInterceptor.invoke(MethodInvocation)` indirectly reads without synchronization from `this.cachedStub`. Potentially races with write in method `RmiClientInterceptor.refreshAndRetry(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-context/src/main/java/org/springframework/remoting/rmi/RmiClientInterceptor.java",
                "tnLine": 259,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.remoting.rmi.RmiClientInterceptor.invoke(org.aopalliance.intercept.MethodInvocation):java.lang.Object",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void ScheduledAnnotationBeanPostProcessor.processScheduled(Scheduled,Method,Object)` indirectly writes to field `this.registrar.fixedDelayTasks` outside of synchronization.\n Reporting because this access may occur on a background thread.",
                "tnFile": "spring-context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java",
                "tnLine": 441,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessor.processScheduled(org.springframework.scheduling.annotation.Scheduled,java.lang.reflect.Method,java.lang.Object):void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "NULL_DEREFERENCE",
                "tnDesc": "object returned by `phases.get(key)` could be null and is dereferenced at line 210.",
                "tnFile": "spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java",
                "tnLine": 210,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.context.support.DefaultLifecycleProcessor.stopBeans():void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "NULL_DEREFERENCE",
                "tnDesc": "object returned by `obtainPointcutExpression(this)` could be null and is dereferenced at line 327.",
                "tnFile": "spring-aop/src/main/java/org/springframework/aop/aspectj/AspectJExpressionPointcut.java",
                "tnLine": 327,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.aop.aspectj.AspectJExpressionPointcut.isRuntime():boolean",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void AbstractApplicationContext.initApplicationEventMulticaster()` writes to field `this.applicationEventMulticaster` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java",
                "tnLine": 766,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.context.support.AbstractApplicationContext.initApplicationEventMulticaster():void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `long AbstractApplicationContext.getStartupDate()` reads without synchronization from `this.startupDate`. Potentially races with write in method `AbstractApplicationContext.refresh()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java",
                "tnLine": 346,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.context.support.AbstractApplicationContext.getStartupDate():long",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `Cache ConcurrentMapCacheManager.getCache(String)` reads without synchronization from `this.dynamic`. Potentially races with write in method `ConcurrentMapCacheManager.setCacheNames(...)`.\n Reporting because this access may occur on a background thread.",
                "tnFile": "spring-context/src/main/java/org/springframework/cache/concurrent/ConcurrentMapCacheManager.java",
                "tnLine": 168,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.cache.concurrent.ConcurrentMapCacheManager.getCache(java.lang.String):org.springframework.cache.Cache",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `Collection AbstractApplicationEventMulticaster.getApplicationListeners(ApplicationEvent,ResolvableType)` indirectly reads without synchronization from `this.beanFactory`. Potentially races with write in method `AbstractApplicationEventMulticaster.setBeanFactory(...)`.\n Reporting because this access may occur on a background thread.",
                "tnFile": "spring-context/src/main/java/org/springframework/context/event/AbstractApplicationEventMulticaster.java",
                "tnLine": 203,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.context.event.AbstractApplicationEventMulticaster.getApplicationListeners(org.springframework.context.ApplicationEvent,org.springframework.core.ResolvableType):java.util.Collection",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `Registry RmiRegistryFactoryBean.getRegistry(int)` reads without synchronization from `this.alwaysCreate`. Potentially races with write in method `RmiRegistryFactoryBean.setAlwaysCreate(...)`.\n Reporting because this access may occur on a background thread.",
                "tnFile": "spring-context/src/main/java/org/springframework/remoting/rmi/RmiRegistryFactoryBean.java",
                "tnLine": 249,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.remoting.rmi.RmiRegistryFactoryBean.getRegistry(int):java.rmi.registry.Registry",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `void SimpleRemoteSlsbInvokerInterceptor.refreshHome()` reads without synchronization from `this.cacheSessionBean`. Potentially races with write in method `SimpleRemoteSlsbInvokerInterceptor.setCacheSessionBean(...)`.\n Reporting because this access may occur on a background thread.",
                "tnFile": "spring-context/src/main/java/org/springframework/ejb/access/SimpleRemoteSlsbInvokerInterceptor.java",
                "tnLine": 166,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.ejb.access.SimpleRemoteSlsbInvokerInterceptor.refreshHome():void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `Collection AbstractApplicationEventMulticaster.getApplicationListeners(ApplicationEvent,ResolvableType)` reads without synchronization from container `this.retrieverCache` via call to `get`. Potentially races with write in method `AbstractApplicationEventMulticaster.removeApplicationListener(...)`.\n Reporting because this access may occur on a background thread.",
                "tnFile": "spring-context/src/main/java/org/springframework/context/event/AbstractApplicationEventMulticaster.java",
                "tnLine": 180,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.context.event.AbstractApplicationEventMulticaster.getApplicationListeners(org.springframework.context.ApplicationEvent,org.springframework.core.ResolvableType):java.util.Collection",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void AbstractApplicationContext.prepareBeanFactory(ConfigurableListableBeanFactory)` indirectly writes to field `this.environment` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java",
                "tnLine": 649,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.context.support.AbstractApplicationContext.prepareBeanFactory(org.springframework.beans.factory.config.ConfigurableListableBeanFactory):void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `Object AbstractClassGenerator.create(Object)` writes to field `this.key` outside of synchronization.\n Reporting because this access may occur on a background thread.",
                "tnFile": "spring-core/src/main/java/org/springframework/cglib/core/AbstractClassGenerator.java",
                "tnLine": 318,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.cglib.core.AbstractClassGenerator.create(java.lang.Object):java.lang.Object",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "RESOURCE_LEAK",
                "tnDesc": "resource of type `java.io.InputStreamReader` acquired by call to `new()` at line 86 is not released after line 92.",
                "tnFile": "spring-core/src/main/java/org/springframework/util/StreamUtils.java",
                "tnLine": 92,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.util.StreamUtils.copyToString(java.io.InputStream,java.nio.charset.Charset):java.lang.String",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `Class AbstractClassGenerator.generate(AbstractClassGenerator$ClassLoaderData)` reads without synchronization from `this.attemptLoad`. Potentially races with write in method `AbstractClassGenerator.setAttemptLoad(...)`.\n Reporting because this access may occur on a background thread.",
                "tnFile": "spring-core/src/main/java/org/springframework/cglib/core/AbstractClassGenerator.java",
                "tnLine": 349,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.cglib.core.AbstractClassGenerator.generate(org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData):java.lang.Class",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `void CachingMetadataReaderFactory.clearCache()` reads with synchronization from `this.metadataReaderCache`. Potentially races with unsynchronized write in method `CachingMetadataReaderFactory.clearCache()`.\n Reporting because this access may occur on a background thread.",
                "tnFile": "spring-core/src/main/java/org/springframework/core/type/classreading/CachingMetadataReaderFactory.java",
                "tnLine": 149,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.core.type.classreading.CachingMetadataReaderFactory.clearCache():void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "NULL_DEREFERENCE",
                "tnDesc": "object returned by `getParameterAnnotations()` could be null and is dereferenced at line 357.",
                "tnFile": "spring-core/src/main/java/org/springframework/core/MethodParameter.java",
                "tnLine": 357,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.core.MethodParameter.hasNullableAnnotation():boolean",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `Object AbstractSlsbInvokerInterceptor.create()` reads without synchronization from `this.createMethod`. Potentially races with write in method `AbstractSlsbInvokerInterceptor.refreshHome()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-context/src/main/java/org/springframework/ejb/access/AbstractSlsbInvokerInterceptor.java",
                "tnLine": 222,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.ejb.access.AbstractSlsbInvokerInterceptor.create():java.lang.Object",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void AbstractApplicationContext.prepareRefresh()` writes to field `this.startupDate` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java",
                "tnLine": 585,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.context.support.AbstractApplicationContext.prepareRefresh():void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void AbstractAspectJAdvice.setReturningNameNoCheck(String)` writes to field `this.discoveredReturningType` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-aop/src/main/java/org/springframework/aop/aspectj/AbstractAspectJAdvice.java",
                "tnLine": 304,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.aop.aspectj.AbstractAspectJAdvice.setReturningNameNoCheck(java.lang.String):void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `void AbstractApplicationContext.addApplicationListener(ApplicationListener)` reads without synchronization from `this.applicationEventMulticaster`. Potentially races with write in method `AbstractApplicationContext.refresh()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java",
                "tnLine": 501,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.context.support.AbstractApplicationContext.addApplicationListener(org.springframework.context.ApplicationListener):void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "RESOURCE_LEAK",
                "tnDesc": "resource of type `java.io.InputStreamReader` acquired to `reader` by call to `new()` at line 86 is not released after line 92.\n**Note**: potential exception at line 89",
                "tnFile": "spring-core/src/main/java/org/springframework/util/StreamUtils.java",
                "tnLine": 92,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.util.StreamUtils.copyToString(java.io.InputStream,java.nio.charset.Charset):java.lang.String",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `List BeanFactoryAspectJAdvisorsBuilder.buildAspectJAdvisors()` reads without synchronization from container `this.aspectFactoryCache` via call to `get`. Potentially races with write in method `BeanFactoryAspectJAdvisorsBuilder.buildAspectJAdvisors()`.\n Reporting because this access may occur on a background thread.",
                "tnFile": "spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/BeanFactoryAspectJAdvisorsBuilder.java",
                "tnLine": 148,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.aop.aspectj.annotation.BeanFactoryAspectJAdvisorsBuilder.buildAspectJAdvisors():java.util.List",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `void ConcurrencyThrottleSupport.beforeAccess()` reads without synchronization from `this.concurrencyLimit`. Potentially races with write in method `ConcurrencyThrottleSupport.setConcurrencyLimit(...)`.\n Reporting because this access may occur on a background thread.",
                "tnFile": "spring-core/src/main/java/org/springframework/util/ConcurrencyThrottleSupport.java",
                "tnLine": 106,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.util.ConcurrencyThrottleSupport.beforeAccess():void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void ScheduledAnnotationBeanPostProcessor.processScheduled(Scheduled,Method,Object)` indirectly writes to field `this.registrar.cronTasks` outside of synchronization.\n Reporting because this access may occur on a background thread.",
                "tnFile": "spring-context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java",
                "tnLine": 426,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessor.processScheduled(org.springframework.scheduling.annotation.Scheduled,java.lang.reflect.Method,java.lang.Object):void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `Object SimpleRemoteSlsbInvokerInterceptor.getSessionBeanInstance()` reads without synchronization from `this.cacheSessionBean`. Potentially races with write in method `SimpleRemoteSlsbInvokerInterceptor.setCacheSessionBean(...)`.\n Reporting because this access may occur on a background thread.",
                "tnFile": "spring-context/src/main/java/org/springframework/ejb/access/SimpleRemoteSlsbInvokerInterceptor.java",
                "tnLine": 135,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.ejb.access.SimpleRemoteSlsbInvokerInterceptor.getSessionBeanInstance():java.lang.Object",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `Class AbstractAspectJAdvice.getDiscoveredReturningType()` reads without synchronization from `this.discoveredReturningType`. Potentially races with write in method `AbstractAspectJAdvice.calculateArgumentBindings()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-aop/src/main/java/org/springframework/aop/aspectj/AbstractAspectJAdvice.java",
                "tnLine": 315,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.aop.aspectj.AbstractAspectJAdvice.getDiscoveredReturningType():java.lang.Class",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `boolean SpelExpression.compileExpression()` reads without synchronization from `this.compiledAst`. Potentially races with write in method `SpelExpression.revertToInterpreted()`.\n Reporting because this access may occur on a background thread.",
                "tnFile": "spring-expression/src/main/java/org/springframework/expression/spel/standard/SpelExpression.java",
                "tnLine": 519,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.expression.spel.standard.SpelExpression.compileExpression():boolean",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `Object SpelExpression.getValue(Class)` reads without synchronization from `this.compiledAst`. Potentially races with write in method `SpelExpression.compileExpression()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-expression/src/main/java/org/springframework/expression/spel/standard/SpelExpression.java",
                "tnLine": 149,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.expression.spel.standard.SpelExpression.getValue(java.lang.Class):java.lang.Object",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `Object ThreadLocalTargetSource.getTarget()` writes to field `this.invocationCount` outside of synchronization.\n Reporting because this access may occur on a background thread.",
                "tnFile": "spring-aop/src/main/java/org/springframework/aop/target/ThreadLocalTargetSource.java",
                "tnLine": 80,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.aop.target.ThreadLocalTargetSource.getTarget():java.lang.Object",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `MetadataReader CachingMetadataReaderFactory.getMetadataReader(Resource)` reads with synchronization from `this.metadataReaderCache`. Potentially races with unsynchronized write in method `CachingMetadataReaderFactory.clearCache()`.\n Reporting because this access may occur on a background thread.",
                "tnFile": "spring-core/src/main/java/org/springframework/core/type/classreading/CachingMetadataReaderFactory.java",
                "tnLine": 130,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.core.type.classreading.CachingMetadataReaderFactory.getMetadataReader(org.springframework.core.io.Resource):org.springframework.core.type.classreading.MetadataReader",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "NULL_DEREFERENCE",
                "tnDesc": "object `pointcutExpression` last assigned on line 272 could be null and is dereferenced at line 275.",
                "tnFile": "spring-aop/src/main/java/org/springframework/aop/aspectj/AspectJExpressionPointcut.java",
                "tnLine": 275,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.aop.aspectj.AspectJExpressionPointcut.matches(java.lang.Class):boolean",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `void AbstractApplicationContext.registerListeners()` reads without synchronization from `this.earlyApplicationEvents`. Potentially races with write in method `AbstractApplicationContext.refresh()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java",
                "tnLine": 836,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.context.support.AbstractApplicationContext.registerListeners():void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `String AbstractClassGenerator.getClassName()` reads without synchronization from `this.className`. Potentially races with write in method `AbstractClassGenerator.generate(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-core/src/main/java/org/springframework/cglib/core/AbstractClassGenerator.java",
                "tnLine": 169,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.cglib.core.AbstractClassGenerator.getClassName():java.lang.String",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `MetadataReader CachingMetadataReaderFactory.getMetadataReader(Resource)` mutates container `this.metadataReaderCache` via call to `put` outside of synchronization.\n Reporting because this access may occur on a background thread.",
                "tnFile": "spring-core/src/main/java/org/springframework/core/type/classreading/CachingMetadataReaderFactory.java",
                "tnLine": 124,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.core.type.classreading.CachingMetadataReaderFactory.getMetadataReader(org.springframework.core.io.Resource):org.springframework.core.type.classreading.MetadataReader",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `void ResourceBundleThemeSource.setParentThemeSource(ThemeSource)` indirectly reads with synchronization from `this.parentThemeSource`. Potentially races with unsynchronized write in method `ResourceBundleThemeSource.setParentThemeSource(...)`.\n Reporting because this access may occur on a background thread.",
                "tnFile": "spring-context/src/main/java/org/springframework/ui/context/support/ResourceBundleThemeSource.java",
                "tnLine": 76,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.ui.context.support.ResourceBundleThemeSource.setParentThemeSource(org.springframework.ui.context.ThemeSource):void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "NULL_DEREFERENCE",
                "tnDesc": "object returned by `phases.get(key)` could be null and is dereferenced at line 158.",
                "tnFile": "spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java",
                "tnLine": 158,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.context.support.DefaultLifecycleProcessor.startBeans(boolean):void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `Class ProxyFactoryBean.getObjectType()` reads without synchronization from `this.beanFactory`. Potentially races with write in method `ProxyFactoryBean.setBeanFactory(...)`.\n Reporting because this access may occur on a background thread.",
                "tnFile": "spring-aop/src/main/java/org/springframework/aop/framework/ProxyFactoryBean.java",
                "tnLine": 285,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.aop.framework.ProxyFactoryBean.getObjectType():java.lang.Class",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void ProxyFactoryBean.setProxyInterfaces(java.lang.Class[])` indirectly mutates container `this.methodCache` via call to `clear` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-aop/src/main/java/org/springframework/aop/framework/ProxyFactoryBean.java",
                "tnLine": 144,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.aop.framework.ProxyFactoryBean.setProxyInterfaces(java.lang.Class[]):void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `Object JndiRmiClientInterceptor.getStub()` reads without synchronization from `this.cachedStub`. Potentially races with write in method `JndiRmiClientInterceptor.prepare()`.\n Reporting because this access may occur on a background thread.",
                "tnFile": "spring-context/src/main/java/org/springframework/remoting/rmi/JndiRmiClientInterceptor.java",
                "tnLine": 245,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.remoting.rmi.JndiRmiClientInterceptor.getStub():java.lang.Object",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "RESOURCE_LEAK",
                "tnDesc": "resource of type `java.net.HttpURLConnection` acquired by call to `openConnection()` at line 183 is not released after line 185.",
                "tnFile": "spring-core/src/main/java/org/springframework/core/io/support/PropertiesLoaderUtils.java",
                "tnLine": 185,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.core.io.support.PropertiesLoaderUtils.loadAllProperties(java.lang.String,java.lang.ClassLoader):java.util.Properties",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `Object SpelExpression.getValue(Object)` reads without synchronization from `this.compiledAst`. Potentially races with write in method `SpelExpression.compileExpression()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-expression/src/main/java/org/springframework/expression/spel/standard/SpelExpression.java",
                "tnLine": 184,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.expression.spel.standard.SpelExpression.getValue(java.lang.Object):java.lang.Object",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `Object MBeanClientInterceptor.convertResultValueIfNecessary(Object,MethodParameter)` indirectly reads without synchronization from `segment.resizeThreshold`. Potentially races with write in method `MBeanClientInterceptor.invoke(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-context/src/main/java/org/springframework/jmx/access/MBeanClientInterceptor.java",
                "tnLine": 555,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.jmx.access.MBeanClientInterceptor.convertResultValueIfNecessary(java.lang.Object,org.springframework.core.MethodParameter):java.lang.Object",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `Object JndiRmiClientInterceptor.refreshAndRetry(MethodInvocation)` indirectly reads without synchronization from `this.remoteInvocationFactory`. Potentially races with write in method `JndiRmiClientInterceptor.setRemoteInvocationFactory(...)`.\n Reporting because this access may occur on a background thread.",
                "tnFile": "spring-context/src/main/java/org/springframework/remoting/rmi/JndiRmiClientInterceptor.java",
                "tnLine": 352,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.remoting.rmi.JndiRmiClientInterceptor.refreshAndRetry(org.aopalliance.intercept.MethodInvocation):java.lang.Object",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `Collection AbstractApplicationEventMulticaster.getApplicationListeners(ApplicationEvent,ResolvableType)` reads without synchronization from `this.retrievalMutex`. Potentially races with write in method `AbstractApplicationEventMulticaster.setBeanFactory(...)`.\n Reporting because this access may occur on a background thread.",
                "tnFile": "spring-context/src/main/java/org/springframework/context/event/AbstractApplicationEventMulticaster.java",
                "tnLine": 189,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.context.event.AbstractApplicationEventMulticaster.getApplicationListeners(org.springframework.context.ApplicationEvent,org.springframework.core.ResolvableType):java.util.Collection",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `void AbstractApplicationContext.initApplicationEventMulticaster()` reads without synchronization from `this.applicationEventMulticaster`. Potentially races with write in method `AbstractApplicationContext.refresh()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java",
                "tnLine": 768,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.context.support.AbstractApplicationContext.initApplicationEventMulticaster():void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `Theme ResourceBundleThemeSource.getTheme(String)` indirectly reads with synchronization from `this.parentThemeSource`. Potentially races with unsynchronized write in method `ResourceBundleThemeSource.setParentThemeSource(...)`.\n Reporting because this access may occur on a background thread.",
                "tnFile": "spring-context/src/main/java/org/springframework/ui/context/support/ResourceBundleThemeSource.java",
                "tnLine": 149,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.ui.context.support.ResourceBundleThemeSource.getTheme(java.lang.String):org.springframework.ui.context.Theme",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void AbstractApplicationContext.setEnvironment(ConfigurableEnvironment)` writes to field `this.environment` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java",
                "tnLine": 305,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.context.support.AbstractApplicationContext.setEnvironment(org.springframework.core.env.ConfigurableEnvironment):void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `void AbstractApplicationContext.doClose()` indirectly reads without synchronization from `this.applicationEventMulticaster`. Potentially races with write in method `AbstractApplicationContext.refresh()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java",
                "tnLine": 1009,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.context.support.AbstractApplicationContext.doClose():void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `Class ProxyFactoryBean.getObjectType()` indirectly reads without synchronization from `this.targetSource`. Potentially races with write in method `ProxyFactoryBean.getObject()`.\n Reporting because this access may occur on a background thread.",
                "tnFile": "spring-aop/src/main/java/org/springframework/aop/framework/ProxyFactoryBean.java",
                "tnLine": 289,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.aop.framework.ProxyFactoryBean.getObjectType():java.lang.Class",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "NULL_DEREFERENCE",
                "tnDesc": "object `null` is dereferenced by call to `create(...)` at line 104.",
                "tnFile": "spring-core/src/main/java/org/springframework/cglib/proxy/Enhancer.java",
                "tnLine": 104,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.cglib.proxy.Enhancer.<clinit>():void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `Object AbstractClassGenerator.create(Object)` indirectly reads without synchronization from `this.classLoader`. Potentially races with write in method `AbstractClassGenerator.setClassLoader(...)`.\n Reporting because this access may occur on a background thread.",
                "tnFile": "spring-core/src/main/java/org/springframework/cglib/core/AbstractClassGenerator.java",
                "tnLine": 303,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.cglib.core.AbstractClassGenerator.create(java.lang.Object):java.lang.Object",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `Object AbstractClassGenerator.create(Object)` indirectly reads without synchronization from `this.attemptLoad`. Potentially races with write in method `AbstractClassGenerator.setAttemptLoad(...)`.\n Reporting because this access may occur on a background thread.",
                "tnFile": "spring-core/src/main/java/org/springframework/cglib/core/AbstractClassGenerator.java",
                "tnLine": 319,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.cglib.core.AbstractClassGenerator.create(java.lang.Object):java.lang.Object",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `boolean AbstractApplicationEventMulticaster.supportsEvent(Class,ResolvableType)` indirectly mutates container `event.GenericApplicationListenerAdapter.eventTypeCache` via call to `put` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-context/src/main/java/org/springframework/context/event/AbstractApplicationEventMulticaster.java",
                "tnLine": 283,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.context.event.AbstractApplicationEventMulticaster.supportsEvent(java.lang.Class,org.springframework.core.ResolvableType):boolean",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `Object MBeanClientInterceptor.doInvoke(MethodInvocation)` reads without synchronization from `this.invocationHandler`. Potentially races with write in method `MBeanClientInterceptor.invoke(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-context/src/main/java/org/springframework/jmx/access/MBeanClientInterceptor.java",
                "tnLine": 416,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.jmx.access.MBeanClientInterceptor.doInvoke(org.aopalliance.intercept.MethodInvocation):java.lang.Object",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `Object MBeanClientInterceptor.doInvoke(MethodInvocation)` indirectly writes to field `chars.[_]` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-context/src/main/java/org/springframework/jmx/access/MBeanClientInterceptor.java",
                "tnLine": 422,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.jmx.access.MBeanClientInterceptor.doInvoke(org.aopalliance.intercept.MethodInvocation):java.lang.Object",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `void AbstractApplicationContext.initLifecycleProcessor()` reads without synchronization from `this.lifecycleProcessor`. Potentially races with write in method `AbstractApplicationContext.refresh()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java",
                "tnLine": 792,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.context.support.AbstractApplicationContext.initLifecycleProcessor():void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `Collection AbstractApplicationEventMulticaster.getApplicationListeners(ApplicationEvent,ResolvableType)` indirectly reads with synchronization from container `event.GenericApplicationListenerAdapter.eventTypeCache` via call to `get`. Potentially races with unsynchronized write in method `AbstractApplicationEventMulticaster.getApplicationListeners(...)`.\n Reporting because this access may occur on a background thread.",
                "tnFile": "spring-context/src/main/java/org/springframework/context/event/AbstractApplicationEventMulticaster.java",
                "tnLine": 196,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.context.event.AbstractApplicationEventMulticaster.getApplicationListeners(org.springframework.context.ApplicationEvent,org.springframework.core.ResolvableType):java.util.Collection",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `void AbstractAspectJAdvice.setArgumentNamesFromStringArray(java.lang.String[])` reads without synchronization from `this.argumentNames`. Potentially races with write in method `AbstractAspectJAdvice.calculateArgumentBindings()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-aop/src/main/java/org/springframework/aop/aspectj/AbstractAspectJAdvice.java",
                "tnLine": 272,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.aop.aspectj.AbstractAspectJAdvice.setArgumentNamesFromStringArray(java.lang.String[]):void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "RESOURCE_LEAK",
                "tnDesc": "resource of type `java.io.OutputStreamWriter` acquired by call to `new()` at line 122 is not released after line 124.",
                "tnFile": "spring-core/src/main/java/org/springframework/util/StreamUtils.java",
                "tnLine": 124,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.util.StreamUtils.copy(java.lang.String,java.nio.charset.Charset,java.io.OutputStream):void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "NULL_DEREFERENCE",
                "tnDesc": "object `MBeanRegistrationSupport.server` last accessed on line 987 could be null and is dereferenced at line 987.",
                "tnFile": "spring-context/src/main/java/org/springframework/jmx/export/MBeanExporter.java",
                "tnLine": 987,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.jmx.export.MBeanExporter.lambda$unregisterNotificationListeners$3(org.springframework.jmx.export.NotificationListenerBean,javax.management.ObjectName[]):void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `void AbstractApplicationContext.stop()` indirectly reads without synchronization from `this.lifecycleProcessor`. Potentially races with write in method `AbstractApplicationContext.refresh()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java",
                "tnLine": 1353,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.context.support.AbstractApplicationContext.stop():void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `Class AbstractClassGenerator.generate(AbstractClassGenerator$ClassLoaderData)` indirectly reads with synchronization from `this.key`. Potentially races with unsynchronized write in method `AbstractClassGenerator.create(...)`.\n Reporting because this access may occur on a background thread.",
                "tnFile": "spring-core/src/main/java/org/springframework/cglib/core/AbstractClassGenerator.java",
                "tnLine": 345,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.cglib.core.AbstractClassGenerator.generate(org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData):java.lang.Class",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "NULL_DEREFERENCE",
                "tnDesc": "object `CustomValidatorBean.validatorFactory` last assigned on line 75 could be null and is dereferenced at line 78.",
                "tnFile": "spring-context/src/main/java/org/springframework/validation/beanvalidation/CustomValidatorBean.java",
                "tnLine": 78,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.validation.beanvalidation.CustomValidatorBean.afterPropertiesSet():void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `void SimpleRemoteSlsbInvokerInterceptor.destroy()` reads without synchronization from `this.cacheSessionBean`. Potentially races with write in method `SimpleRemoteSlsbInvokerInterceptor.setCacheSessionBean(...)`.\n Reporting because this access may occur on a background thread.",
                "tnFile": "spring-context/src/main/java/org/springframework/ejb/access/SimpleRemoteSlsbInvokerInterceptor.java",
                "tnLine": 178,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.ejb.access.SimpleRemoteSlsbInvokerInterceptor.destroy():void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `Object SpelExpression.getValue(EvaluationContext,Object,Class)` reads without synchronization from `this.compiledAst`. Potentially races with write in method `SpelExpression.compileExpression()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-expression/src/main/java/org/springframework/expression/spel/standard/SpelExpression.java",
                "tnLine": 343,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.expression.spel.standard.SpelExpression.getValue(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Class):java.lang.Object",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `void MBeanClientInterceptor.destroy()` indirectly reads without synchronization from `this.connector.connector`. Potentially races with write in method `MBeanClientInterceptor.invoke(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-context/src/main/java/org/springframework/jmx/access/MBeanClientInterceptor.java",
                "tnLine": 631,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.jmx.access.MBeanClientInterceptor.destroy():void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void AbstractAspectJAdvice.setArgumentNames(String)` indirectly writes to field `this.argumentNames` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-aop/src/main/java/org/springframework/aop/aspectj/AbstractAspectJAdvice.java",
                "tnLine": 259,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.aop.aspectj.AbstractAspectJAdvice.setArgumentNames(java.lang.String):void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void JndiRmiClientInterceptor.afterPropertiesSet()` indirectly writes to field `this.cachedStub` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-context/src/main/java/org/springframework/remoting/rmi/JndiRmiClientInterceptor.java",
                "tnLine": 182,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.remoting.rmi.JndiRmiClientInterceptor.afterPropertiesSet():void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `Theme ResourceBundleThemeSource.getTheme(String)` reads without synchronization from container `this.themeCache` via call to `get`. Potentially races with write in method `ResourceBundleThemeSource.getTheme(...)`.\n Reporting because this access may occur on a background thread.",
                "tnFile": "spring-context/src/main/java/org/springframework/ui/context/support/ResourceBundleThemeSource.java",
                "tnLine": 141,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.ui.context.support.ResourceBundleThemeSource.getTheme(java.lang.String):org.springframework.ui.context.Theme",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `void AbstractApplicationContext.initMessageSource()` reads without synchronization from `this.messageSource`. Potentially races with write in method `AbstractApplicationContext.refresh()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java",
                "tnLine": 733,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.context.support.AbstractApplicationContext.initMessageSource():void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `String AbstractApplicationContext.getMessage(MessageSourceResolvable,Locale)` indirectly reads without synchronization from `this.messageSource`. Potentially races with write in method `AbstractApplicationContext.refresh()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java",
                "tnLine": 1304,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.context.support.AbstractApplicationContext.getMessage(org.springframework.context.MessageSourceResolvable,java.util.Locale):java.lang.String",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `Object JndiRmiClientInterceptor.getStub()` reads without synchronization from `this.cacheStub`. Potentially races with write in method `JndiRmiClientInterceptor.setCacheStub(...)`.\n Reporting because this access may occur on a background thread.",
                "tnFile": "spring-context/src/main/java/org/springframework/remoting/rmi/JndiRmiClientInterceptor.java",
                "tnLine": 244,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.remoting.rmi.JndiRmiClientInterceptor.getStub():java.lang.Object",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "NULL_DEREFERENCE",
                "tnDesc": "object `ResolvableType.componentType` last assigned on line 162 could be null and is dereferenced by call to `resolveClass()` at line 164.",
                "tnFile": "spring-core/src/main/java/org/springframework/core/ResolvableType.java",
                "tnLine": 164,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.core.ResolvableType.<init>(java.io.Serializable,org.springframework.core.SerializableTypeWrapper$TypeProvider,org.springframework.core.ResolvableType$VariableResolver,java.lang.Integer)",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `String AbstractMessageSource.getMessageInternal(String,java.lang.Object[],Locale)` indirectly reads without synchronization from `this.commonMessages`. Potentially races with write in method `AbstractMessageSource.setCommonMessages(...)`.\n Reporting because this access may occur on a background thread.",
                "tnFile": "spring-context/src/main/java/org/springframework/context/support/AbstractMessageSource.java",
                "tnLine": 233,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.context.support.AbstractMessageSource.getMessageInternal(java.lang.String,java.lang.Object[],java.util.Locale):java.lang.String",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void AbstractApplicationContext.prepareRefresh()` writes to field `this.earlyApplicationEvents` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java",
                "tnLine": 617,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.context.support.AbstractApplicationContext.prepareRefresh():void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `void ConcurrencyThrottleSupport.afterAccess()` reads without synchronization from `this.concurrencyLimit`. Potentially races with write in method `ConcurrencyThrottleSupport.setConcurrencyLimit(...)`.\n Reporting because this access may occur on a background thread.",
                "tnFile": "spring-core/src/main/java/org/springframework/util/ConcurrencyThrottleSupport.java",
                "tnLine": 145,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.util.ConcurrencyThrottleSupport.afterAccess():void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `Object AbstractSlsbInvokerInterceptor.getHome()` reads without synchronization from `this.cacheHome`. Potentially races with write in method `AbstractSlsbInvokerInterceptor.setCacheHome(...)`.\n Reporting because this access may occur on a background thread.",
                "tnFile": "spring-context/src/main/java/org/springframework/ejb/access/AbstractSlsbInvokerInterceptor.java",
                "tnLine": 162,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.ejb.access.AbstractSlsbInvokerInterceptor.getHome():java.lang.Object",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `int ThreadPoolTaskExecutor.getPoolSize()` reads without synchronization from `this.corePoolSize`. Potentially races with write in method `ThreadPoolTaskExecutor.setCorePoolSize(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-context/src/main/java/org/springframework/scheduling/concurrent/ThreadPoolTaskExecutor.java",
                "tnLine": 292,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.getPoolSize():int",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "NULL_DEREFERENCE",
                "tnDesc": "object `DirectFieldBindingResult.directFieldAccessor` last assigned on line 84 could be null and is dereferenced at line 85.",
                "tnFile": "spring-context/src/main/java/org/springframework/validation/DirectFieldBindingResult.java",
                "tnLine": 85,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.validation.DirectFieldBindingResult.getPropertyAccessor():org.springframework.beans.ConfigurablePropertyAccessor",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `void ProxyFactoryBean.adviceChanged()` reads without synchronization from `this.singleton`. Potentially races with write in method `ProxyFactoryBean.setSingleton(...)`.\n Reporting because this access may occur on a background thread.",
                "tnFile": "spring-aop/src/main/java/org/springframework/aop/framework/ProxyFactoryBean.java",
                "tnLine": 616,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.aop.framework.ProxyFactoryBean.adviceChanged():void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `Advice AbstractBeanFactoryPointcutAdvisor.getAdvice()` reads without synchronization from `this.adviceBeanName`. Potentially races with write in method `AbstractBeanFactoryPointcutAdvisor.setAdviceBeanName(...)`.\n Reporting because this access may occur on a background thread.",
                "tnFile": "spring-aop/src/main/java/org/springframework/aop/support/AbstractBeanFactoryPointcutAdvisor.java",
                "tnLine": 111,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.aop.support.AbstractBeanFactoryPointcutAdvisor.getAdvice():org.aopalliance.aop.Advice",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `void AbstractRefreshableApplicationContext.refreshBeanFactory()` indirectly reads without synchronization from `this.allowBeanDefinitionOverriding`. Potentially races with write in method `AbstractRefreshableApplicationContext.setAllowBeanDefinitionOverriding(...)`.\n Reporting because this access may occur on a background thread.",
                "tnFile": "spring-context/src/main/java/org/springframework/context/support/AbstractRefreshableApplicationContext.java",
                "tnLine": 132,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory():void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `Object SpelExpression.getValue()` reads without synchronization from `this.compiledAst`. Potentially races with write in method `SpelExpression.compileExpression()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-expression/src/main/java/org/springframework/expression/spel/standard/SpelExpression.java",
                "tnLine": 121,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.expression.spel.standard.SpelExpression.getValue():java.lang.Object",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `int ThreadLocalTargetSource.getHitCount()` reads without synchronization from `this.hitCount`. Potentially races with write in method `ThreadLocalTargetSource.getTarget()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-aop/src/main/java/org/springframework/aop/target/ThreadLocalTargetSource.java",
                "tnLine": 125,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.aop.target.ThreadLocalTargetSource.getHitCount():int",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "RESOURCE_LEAK",
                "tnDesc": "resource of type `java.net.HttpURLConnection` acquired by call to `openConnection()` at line 591 is not released after line 612.",
                "tnFile": "spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java",
                "tnLine": 612,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.core.io.support.PathMatchingResourcePatternResolver.doFindPathMatchingJarResources(org.springframework.core.io.Resource,java.net.URL,java.lang.String):java.util.Set",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `boolean HotSwappableTargetSource.equals(Object)` reads without synchronization from `this.target`. Potentially races with write in method `HotSwappableTargetSource.swap(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-aop/src/main/java/org/springframework/aop/target/HotSwappableTargetSource.java",
                "tnLine": 104,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.aop.target.HotSwappableTargetSource.equals(java.lang.Object):boolean",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `Object SimpleRemoteSlsbInvokerInterceptor.getSessionBeanInstance()` indirectly reads without synchronization from `this.cachedHome`. Potentially races with write in method `SimpleRemoteSlsbInvokerInterceptor.doInvoke(...)`.\n Reporting because this access may occur on a background thread.",
                "tnFile": "spring-context/src/main/java/org/springframework/ejb/access/SimpleRemoteSlsbInvokerInterceptor.java",
                "tnLine": 144,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.ejb.access.SimpleRemoteSlsbInvokerInterceptor.getSessionBeanInstance():java.lang.Object",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `Object JndiRmiClientInterceptor.invoke(MethodInvocation)` indirectly reads without synchronization from `this.cachedStub`. Potentially races with write in method `JndiRmiClientInterceptor.getStub()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-context/src/main/java/org/springframework/remoting/rmi/JndiRmiClientInterceptor.java",
                "tnLine": 273,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.remoting.rmi.JndiRmiClientInterceptor.invoke(org.aopalliance.intercept.MethodInvocation):java.lang.Object",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void ResourceBundleThemeSource.setParentThemeSource(ThemeSource)` writes to field `this.parentThemeSource` outside of synchronization.\n Reporting because this access may occur on a background thread.",
                "tnFile": "spring-context/src/main/java/org/springframework/ui/context/support/ResourceBundleThemeSource.java",
                "tnLine": 70,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.ui.context.support.ResourceBundleThemeSource.setParentThemeSource(org.springframework.ui.context.ThemeSource):void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `Object ThreadLocalTargetSource.getTarget()` writes to field `this.hitCount` outside of synchronization.\n Reporting because this access may occur on a background thread.",
                "tnFile": "spring-aop/src/main/java/org/springframework/aop/target/ThreadLocalTargetSource.java",
                "tnLine": 95,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.aop.target.ThreadLocalTargetSource.getTarget():java.lang.Object",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void AbstractAspectJAdvice.setArgumentNamesFromStringArray(java.lang.String[])` writes to field `this.argumentNames` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-aop/src/main/java/org/springframework/aop/aspectj/AbstractAspectJAdvice.java",
                "tnLine": 263,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.aop.aspectj.AbstractAspectJAdvice.setArgumentNamesFromStringArray(java.lang.String[]):void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "NULL_DEREFERENCE",
                "tnDesc": "object `charset` last assigned on line 111 could be null and is dereferenced at line 112.",
                "tnFile": "spring-core/src/main/java/org/springframework/core/codec/StringDecoder.java",
                "tnLine": 112,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.core.codec.StringDecoder.decode(org.springframework.core.io.buffer.DataBuffer,org.springframework.core.ResolvableType,org.springframework.util.MimeType,java.util.Map):java.lang.String",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void ProxyFactoryBean.adviceChanged()` indirectly mutates container `this.methodCache` via call to `clear` outside of synchronization.\n Reporting because this access may occur on a background thread.",
                "tnFile": "spring-aop/src/main/java/org/springframework/aop/framework/ProxyFactoryBean.java",
                "tnLine": 615,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.aop.framework.ProxyFactoryBean.adviceChanged():void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `void AbstractApplicationContext.publishEvent(Object)` indirectly reads without synchronization from `this.applicationEventMulticaster`. Potentially races with write in method `AbstractApplicationContext.refresh()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java",
                "tnLine": 372,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.context.support.AbstractApplicationContext.publishEvent(java.lang.Object):void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `Object MBeanClientInterceptor.invoke(MethodInvocation)` indirectly writes to field `chars.[_]` outside of synchronization.\n Reporting because this access may occur on a background thread.",
                "tnFile": "spring-context/src/main/java/org/springframework/jmx/access/MBeanClientInterceptor.java",
                "tnLine": 366,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.jmx.access.MBeanClientInterceptor.invoke(org.aopalliance.intercept.MethodInvocation):java.lang.Object",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "NULL_DEREFERENCE",
                "tnDesc": "object returned by `getParameterAnnotations()` could be null and is dereferenced at line 562.",
                "tnFile": "spring-core/src/main/java/org/springframework/core/MethodParameter.java",
                "tnLine": 562,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.core.MethodParameter.hasParameterAnnotations():boolean",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `boolean AbstractApplicationEventMulticaster.supportsEvent(ApplicationListener,ResolvableType,Class)` indirectly mutates container `event.GenericApplicationListenerAdapter.eventTypeCache` via call to `put` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-context/src/main/java/org/springframework/context/event/AbstractApplicationEventMulticaster.java",
                "tnLine": 302,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.context.event.AbstractApplicationEventMulticaster.supportsEvent(org.springframework.context.ApplicationListener,org.springframework.core.ResolvableType,java.lang.Class):boolean",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void ScheduledAnnotationBeanPostProcessor.onApplicationEvent(ApplicationEvent)` indirectly writes to field `this.registrar.cronTasks` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java",
                "tnLine": 105,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessor.onApplicationEvent(org.springframework.context.ApplicationEvent):void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `void ScheduledAnnotationBeanPostProcessor.processScheduled(Scheduled,Method,Object)` reads without synchronization from `this.embeddedValueResolver`. Potentially races with write in method `ScheduledAnnotationBeanPostProcessor.setEmbeddedValueResolver(...)`.\n Reporting because this access may occur on a background thread.",
                "tnFile": "spring-context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java",
                "tnLine": 393,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessor.processScheduled(org.springframework.scheduling.annotation.Scheduled,java.lang.reflect.Method,java.lang.Object):void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "RESOURCE_LEAK",
                "tnDesc": "resource of type `javax.net.ssl.HttpsURLConnection` acquired by call to `openConnection()` at line 591 is not released after line 612.",
                "tnFile": "spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java",
                "tnLine": 612,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.core.io.support.PathMatchingResourcePatternResolver.doFindPathMatchingJarResources(org.springframework.core.io.Resource,java.net.URL,java.lang.String):java.util.Set",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "NULL_DEREFERENCE",
                "tnDesc": "object `BeanPropertyBindingResult.beanWrapper` last assigned on line 97 could be null and is dereferenced at line 98.",
                "tnFile": "spring-context/src/main/java/org/springframework/validation/BeanPropertyBindingResult.java",
                "tnLine": 98,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.validation.BeanPropertyBindingResult.getPropertyAccessor():org.springframework.beans.ConfigurablePropertyAccessor",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `String SimpleAliasRegistry.canonicalName(String)` reads without synchronization from container `this.aliasMap` via call to `get`. Potentially races with write in method `SimpleAliasRegistry.removeAlias(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-core/src/main/java/org/springframework/core/SimpleAliasRegistry.java",
                "tnLine": 219,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.core.SimpleAliasRegistry.canonicalName(java.lang.String):java.lang.String",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `Remote RmiClientInterceptor.getStub()` reads without synchronization from `this.cachedStub`. Potentially races with write in method `RmiClientInterceptor.afterPropertiesSet()`.\n Reporting because this access may occur on a background thread.",
                "tnFile": "spring-context/src/main/java/org/springframework/remoting/rmi/RmiClientInterceptor.java",
                "tnLine": 233,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.remoting.rmi.RmiClientInterceptor.getStub():java.rmi.Remote",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void AbstractApplicationContext.setParent(ApplicationContext)` indirectly writes to field `this.environment` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java",
                "tnLine": 479,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.context.support.AbstractApplicationContext.setParent(org.springframework.context.ApplicationContext):void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `Object SimpleRemoteSlsbInvokerInterceptor.doInvoke(MethodInvocation)` indirectly reads without synchronization from `this.cachedHome`. Potentially races with write in method `SimpleRemoteSlsbInvokerInterceptor.getSessionBeanInstance()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-context/src/main/java/org/springframework/ejb/access/SimpleRemoteSlsbInvokerInterceptor.java",
                "tnLine": 100,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.ejb.access.SimpleRemoteSlsbInvokerInterceptor.doInvoke(org.aopalliance.intercept.MethodInvocation):java.lang.Object",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `void SimpleAliasRegistry.checkForAliasCircle(String,String)` indirectly reads without synchronization from container `this.aliasMap` via call to `entrySet`. Potentially races with write in method `SimpleAliasRegistry.removeAlias(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-core/src/main/java/org/springframework/core/SimpleAliasRegistry.java",
                "tnLine": 202,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.core.SimpleAliasRegistry.checkForAliasCircle(java.lang.String,java.lang.String):void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `ApplicationEventMulticaster AbstractApplicationContext.getApplicationEventMulticaster()` reads without synchronization from `this.applicationEventMulticaster`. Potentially races with write in method `AbstractApplicationContext.refresh()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java",
                "tnLine": 422,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.context.support.AbstractApplicationContext.getApplicationEventMulticaster():org.springframework.context.event.ApplicationEventMulticaster",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void RmiRegistryFactoryBean.afterPropertiesSet()` indirectly writes to field `this.created` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-context/src/main/java/org/springframework/remoting/rmi/RmiRegistryFactoryBean.java",
                "tnLine": 166,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.remoting.rmi.RmiRegistryFactoryBean.afterPropertiesSet():void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void AbstractApplicationContext.initMessageSource()` writes to field `this.messageSource` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java",
                "tnLine": 731,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.context.support.AbstractApplicationContext.initMessageSource():void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `MetadataReader CachingMetadataReaderFactory.getMetadataReader(Resource)` indirectly writes to field `methodWriter.sourceOffset` outside of synchronization.\n Reporting because this access may occur on a background thread.",
                "tnFile": "spring-core/src/main/java/org/springframework/core/type/classreading/CachingMetadataReaderFactory.java",
                "tnLine": 139,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.core.type.classreading.CachingMetadataReaderFactory.getMetadataReader(org.springframework.core.io.Resource):org.springframework.core.type.classreading.MetadataReader",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `Registry RmiRegistryFactoryBean.getRegistry(int,RMIClientSocketFactory,RMIServerSocketFactory)` writes to field `this.created` outside of synchronization.\n Reporting because this access may occur on a background thread.",
                "tnFile": "spring-context/src/main/java/org/springframework/remoting/rmi/RmiRegistryFactoryBean.java",
                "tnLine": 214,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.remoting.rmi.RmiRegistryFactoryBean.getRegistry(int,java.rmi.server.RMIClientSocketFactory,java.rmi.server.RMIServerSocketFactory):java.rmi.registry.Registry",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "NULL_DEREFERENCE",
                "tnDesc": "object `null` is dereferenced by call to `addIfPossible(...)` at line 68.",
                "tnFile": "spring-core/src/main/java/org/springframework/core/annotation/AnnotationTypeMappings.java",
                "tnLine": 68,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.core.annotation.AnnotationTypeMappings.addAllMappings(java.lang.Class):void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `MetadataReader CachingMetadataReaderFactory.getMetadataReader(Resource)` reads without synchronization from container `this.metadataReaderCache` via call to `get`. Potentially races with write in method `CachingMetadataReaderFactory.getMetadataReader(...)`.\n Reporting because this access may occur on a background thread.",
                "tnFile": "spring-core/src/main/java/org/springframework/core/type/classreading/CachingMetadataReaderFactory.java",
                "tnLine": 121,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.core.type.classreading.CachingMetadataReaderFactory.getMetadataReader(org.springframework.core.io.Resource):org.springframework.core.type.classreading.MetadataReader",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void AbstractEnvironment.merge(ConfigurableEnvironment)` indirectly mutates container `this.propertySources.propertySourceList` via call to `remove` outside of synchronization.\n Reporting because this access may occur on a background thread.",
                "tnFile": "spring-core/src/main/java/org/springframework/core/env/AbstractEnvironment.java",
                "tnLine": 459,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.core.env.AbstractEnvironment.merge(org.springframework.core.env.ConfigurableEnvironment):void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `Environment AbstractApplicationContext.getEnvironment()` indirectly writes to field `this.environment` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java",
                "tnLine": 127,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.context.support.AbstractApplicationContext.getEnvironment():org.springframework.core.env.Environment",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `Class AbstractClassGenerator.generate(AbstractClassGenerator$ClassLoaderData)` indirectly reads without synchronization from `this.className`. Potentially races with write in method `AbstractClassGenerator.generate(...)`.\n Reporting because this access may occur on a background thread.",
                "tnFile": "spring-core/src/main/java/org/springframework/cglib/core/AbstractClassGenerator.java",
                "tnLine": 351,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.cglib.core.AbstractClassGenerator.generate(org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData):java.lang.Class",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `MessageFormat StaticMessageSource.resolveCode(String,Locale)` reads without synchronization from container `this.messages` via call to `get`. Potentially races with write in method `StaticMessageSource.addMessage(...)`.\n Reporting because this access may occur on a background thread.",
                "tnFile": "spring-context/src/main/java/org/springframework/context/support/StaticMessageSource.java",
                "tnLine": 54,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.context.support.StaticMessageSource.resolveCode(java.lang.String,java.util.Locale):java.text.MessageFormat",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void RmiClientInterceptor.afterPropertiesSet()` indirectly writes to field `this.cachedStub` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-context/src/main/java/org/springframework/remoting/rmi/RmiClientInterceptor.java",
                "tnLine": 136,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.remoting.rmi.RmiClientInterceptor.afterPropertiesSet():void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `Object SpelExpression.getValue(EvaluationContext,Object)` reads without synchronization from `this.compiledAst`. Potentially races with write in method `SpelExpression.compileExpression()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-expression/src/main/java/org/springframework/expression/spel/standard/SpelExpression.java",
                "tnLine": 312,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.expression.spel.standard.SpelExpression.getValue(org.springframework.expression.EvaluationContext,java.lang.Object):java.lang.Object",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `Class AbstractClassGenerator.generate(AbstractClassGenerator$ClassLoaderData)` reads without synchronization from `this.strategy`. Potentially races with write in method `AbstractClassGenerator.setStrategy(...)`.\n Reporting because this access may occur on a background thread.",
                "tnFile": "spring-core/src/main/java/org/springframework/cglib/core/AbstractClassGenerator.java",
                "tnLine": 358,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.cglib.core.AbstractClassGenerator.generate(org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData):java.lang.Class",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `Collection AbstractApplicationEventMulticaster.getApplicationListeners()` reads without synchronization from `this.retrievalMutex`. Potentially races with write in method `AbstractApplicationEventMulticaster.setBeanFactory(...)`.\n Reporting because this access may occur on a background thread.",
                "tnFile": "spring-context/src/main/java/org/springframework/context/event/AbstractApplicationEventMulticaster.java",
                "tnLine": 158,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.context.event.AbstractApplicationEventMulticaster.getApplicationListeners():java.util.Collection",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "NULL_DEREFERENCE",
                "tnDesc": "object `MBeanServerConnectionFactoryBean.connector` last assigned on line 141 could be null and is dereferenced at line 142.",
                "tnFile": "spring-context/src/main/java/org/springframework/jmx/support/MBeanServerConnectionFactoryBean.java",
                "tnLine": 142,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.jmx.support.MBeanServerConnectionFactoryBean.connect():void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void RmiClientInterceptor.prepare()` writes to field `this.cachedStub` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-context/src/main/java/org/springframework/remoting/rmi/RmiClientInterceptor.java",
                "tnLine": 161,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.remoting.rmi.RmiClientInterceptor.prepare():void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "NULL_DEREFERENCE",
                "tnDesc": "object `null` is dereferenced by call to `readElementValues(...)` at line 2590.",
                "tnFile": "spring-core/src/main/java/org/springframework/asm/ClassReader.java",
                "tnLine": 2590,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.asm.ClassReader.readTypeAnnotations(org.springframework.asm.MethodVisitor,org.springframework.asm.Context,int,boolean):int[]",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `List BeanFactoryAspectJAdvisorsBuilder.buildAspectJAdvisors()` reads without synchronization from container `this.advisorsCache` via call to `get`. Potentially races with write in method `BeanFactoryAspectJAdvisorsBuilder.buildAspectJAdvisors()`.\n Reporting because this access may occur on a background thread.",
                "tnFile": "spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/BeanFactoryAspectJAdvisorsBuilder.java",
                "tnLine": 143,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.aop.aspectj.annotation.BeanFactoryAspectJAdvisorsBuilder.buildAspectJAdvisors():java.util.List",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `String AbstractApplicationContext.getMessage(String,java.lang.Object[],Locale)` indirectly reads without synchronization from `this.messageSource`. Potentially races with write in method `AbstractApplicationContext.refresh()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java",
                "tnLine": 1299,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.context.support.AbstractApplicationContext.getMessage(java.lang.String,java.lang.Object[],java.util.Locale):java.lang.String",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "NULL_DEREFERENCE",
                "tnDesc": "object `anns` could be null and is dereferenced at line 574.",
                "tnFile": "spring-core/src/main/java/org/springframework/core/MethodParameter.java",
                "tnLine": 574,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.core.MethodParameter.getParameterAnnotation(java.lang.Class):java.lang.annotation.Annotation",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `Object SpelExpression.getValue(EvaluationContext,Class)` reads without synchronization from `this.compiledAst`. Potentially races with write in method `SpelExpression.compileExpression()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-expression/src/main/java/org/springframework/expression/spel/standard/SpelExpression.java",
                "tnLine": 278,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.expression.spel.standard.SpelExpression.getValue(org.springframework.expression.EvaluationContext,java.lang.Class):java.lang.Object",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `String AbstractApplicationContext.getMessage(String,java.lang.Object[],String,Locale)` indirectly reads without synchronization from `this.messageSource`. Potentially races with write in method `AbstractApplicationContext.refresh()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java",
                "tnLine": 1294,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.context.support.AbstractApplicationContext.getMessage(java.lang.String,java.lang.Object[],java.lang.String,java.util.Locale):java.lang.String",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `void ScheduledAnnotationBeanPostProcessor.destroy()` indirectly reads without synchronization from `this.registrar.localExecutor`. Potentially races with write in method `ScheduledAnnotationBeanPostProcessor.onApplicationEvent(...)`.\n Reporting because this access may occur on a background thread.",
                "tnFile": "spring-context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java",
                "tnLine": 579,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessor.destroy():void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `DefaultConversionService.<init>()` indirectly writes to field `segments.[_]` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-core/src/main/java/org/springframework/core/convert/support/DefaultConversionService.java",
                "tnLine": 51,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.core.convert.support.DefaultConversionService.<init>()",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `void ResourceBundleThemeSource.initParent(Theme)` indirectly reads without synchronization from `this.parentThemeSource`. Potentially races with write in method `ResourceBundleThemeSource.setParentThemeSource(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-context/src/main/java/org/springframework/ui/context/support/ResourceBundleThemeSource.java",
                "tnLine": 194,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.ui.context.support.ResourceBundleThemeSource.initParent(org.springframework.ui.context.Theme):void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void AbstractApplicationContext.finishRefresh()` indirectly writes to field `this.lifecycleProcessor` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java",
                "tnLine": 890,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.context.support.AbstractApplicationContext.finishRefresh():void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void JndiObjectTargetSource.afterPropertiesSet()` writes to field `this.cachedObject` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-context/src/main/java/org/springframework/jndi/JndiObjectTargetSource.java",
                "tnLine": 102,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.jndi.JndiObjectTargetSource.afterPropertiesSet():void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "NULL_DEREFERENCE",
                "tnDesc": "object `variant` last assigned on line 836 could be null and is dereferenced at line 837.",
                "tnFile": "spring-core/src/main/java/org/springframework/util/StringUtils.java",
                "tnLine": 837,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.util.StringUtils.parseLocaleTokens(java.lang.String,java.lang.String[]):java.util.Locale",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `Object SpelExpression.getValue(EvaluationContext)` reads without synchronization from `this.compiledAst`. Potentially races with write in method `SpelExpression.compileExpression()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-expression/src/main/java/org/springframework/expression/spel/standard/SpelExpression.java",
                "tnLine": 249,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.expression.spel.standard.SpelExpression.getValue(org.springframework.expression.EvaluationContext):java.lang.Object",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `ConcurrentReferenceHashMap$Reference ConcurrentReferenceHashMap$Segment.getReference(Object,int,ConcurrentReferenceHashMap$Restructure)` indirectly reads without synchronization from `this.resizeThreshold`. Potentially races with write in method `ConcurrentReferenceHashMap$Segment.clear()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-core/src/main/java/org/springframework/util/ConcurrentReferenceHashMap.java",
                "tnLine": 495,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.util.ConcurrentReferenceHashMap$Segment.getReference(java.lang.Object,int,org.springframework.util.ConcurrentReferenceHashMap$Restructure):org.springframework.util.ConcurrentReferenceHashMap$Reference",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `Registry RmiRegistryFactoryBean.getRegistry(String,int,RMIClientSocketFactory,RMIServerSocketFactory)` indirectly writes to field `this.created` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-context/src/main/java/org/springframework/remoting/rmi/RmiRegistryFactoryBean.java",
                "tnLine": 195,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.remoting.rmi.RmiRegistryFactoryBean.getRegistry(java.lang.String,int,java.rmi.server.RMIClientSocketFactory,java.rmi.server.RMIServerSocketFactory):java.rmi.registry.Registry",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void AbstractApplicationContext.registerListeners()` writes to field `this.earlyApplicationEvents` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java",
                "tnLine": 837,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.context.support.AbstractApplicationContext.registerListeners():void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `void MBeanRegistrationSupport.doUnregister(ObjectName)` reads without synchronization from `this.server`. Potentially races with write in method `MBeanRegistrationSupport.setServer(...)`.\n Reporting because this access may occur on a background thread.",
                "tnFile": "spring-context/src/main/java/org/springframework/jmx/support/MBeanRegistrationSupport.java",
                "tnLine": 197,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.jmx.support.MBeanRegistrationSupport.doUnregister(javax.management.ObjectName):void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void ScheduledAnnotationBeanPostProcessor.processScheduled(Scheduled,Method,Object)` indirectly writes to field `this.registrar.fixedRateTasks` outside of synchronization.\n Reporting because this access may occur on a background thread.",
                "tnFile": "spring-context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java",
                "tnLine": 467,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessor.processScheduled(org.springframework.scheduling.annotation.Scheduled,java.lang.reflect.Method,java.lang.Object):void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `Class ScriptFactoryPostProcessor.createConfigInterface(BeanDefinition,java.lang.Class[])` indirectly writes to field `chars.[_]` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-context/src/main/java/org/springframework/scripting/support/ScriptFactoryPostProcessor.java",
                "tnLine": 514,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.scripting.support.ScriptFactoryPostProcessor.createConfigInterface(org.springframework.beans.factory.config.BeanDefinition,java.lang.Class[]):java.lang.Class",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "NULL_DEREFERENCE",
                "tnDesc": "object `ThreadPoolTaskExecutor$1.this$0.taskDecorator` last accessed on line 234 could be null and is dereferenced at line 234.",
                "tnFile": "spring-context/src/main/java/org/springframework/scheduling/concurrent/ThreadPoolTaskExecutor.java",
                "tnLine": 234,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor$1.execute(java.lang.Runnable):void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `Class JndiObjectTargetSource.getTargetClass()` reads without synchronization from `this.cachedObject`. Potentially races with write in method `JndiObjectTargetSource.getTarget()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-context/src/main/java/org/springframework/jndi/JndiObjectTargetSource.java",
                "tnLine": 114,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.jndi.JndiObjectTargetSource.getTargetClass():java.lang.Class",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "RESOURCE_LEAK",
                "tnDesc": "resource of type `java.net.HttpURLConnection` acquired by call to `openConnection()` at line 422 is not released after line 425.",
                "tnFile": "spring-context/src/main/java/org/springframework/context/support/ResourceBundleMessageSource.java",
                "tnLine": 425,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.context.support.ResourceBundleMessageSource$MessageSourceControl.lambda$newBundle$0(boolean,java.lang.ClassLoader,java.lang.String):java.io.InputStream",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `Object JndiObjectTargetSource.getTarget()` reads without synchronization from `this.cache`. Potentially races with write in method `JndiObjectTargetSource.setCache(...)`.\n Reporting because this access may occur on a background thread.",
                "tnFile": "spring-context/src/main/java/org/springframework/jndi/JndiObjectTargetSource.java",
                "tnLine": 134,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.jndi.JndiObjectTargetSource.getTarget():java.lang.Object",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `void AbstractApplicationEventMulticaster.removeApplicationListenerBean(String)` reads without synchronization from `this.retrievalMutex`. Potentially races with write in method `AbstractApplicationEventMulticaster.setBeanFactory(...)`.\n Reporting because this access may occur on a background thread.",
                "tnFile": "spring-context/src/main/java/org/springframework/context/event/AbstractApplicationEventMulticaster.java",
                "tnLine": 136,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.context.event.AbstractApplicationEventMulticaster.removeApplicationListenerBean(java.lang.String):void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void AbstractApplicationContext.initLifecycleProcessor()` writes to field `this.lifecycleProcessor` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java",
                "tnLine": 790,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.context.support.AbstractApplicationContext.initLifecycleProcessor():void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `void AbstractApplicationEventMulticaster.addApplicationListener(ApplicationListener)` reads without synchronization from `this.retrievalMutex`. Potentially races with write in method `AbstractApplicationEventMulticaster.setBeanFactory(...)`.\n Reporting because this access may occur on a background thread.",
                "tnFile": "spring-context/src/main/java/org/springframework/context/event/AbstractApplicationEventMulticaster.java",
                "tnLine": 106,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.context.event.AbstractApplicationEventMulticaster.addApplicationListener(org.springframework.context.ApplicationListener):void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void ScheduledAnnotationBeanPostProcessor.onApplicationEvent(ContextRefreshedEvent)` indirectly writes to field `this.registrar.cronTasks` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java",
                "tnLine": 233,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessor.onApplicationEvent(org.springframework.context.event.ContextRefreshedEvent):void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `Object MBeanClientInterceptor.handleConnectFailure(MethodInvocation,Exception)` indirectly writes to field `chars.[_]` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-context/src/main/java/org/springframework/jmx/access/MBeanClientInterceptor.java",
                "tnLine": 396,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.jmx.access.MBeanClientInterceptor.handleConnectFailure(org.aopalliance.intercept.MethodInvocation,java.lang.Exception):java.lang.Object",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void AbstractApplicationContext.resetCommonCaches()` indirectly mutates container `annotation.AnnotationTypeMappings.cache` via call to `clear` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java",
                "tnLine": 923,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.context.support.AbstractApplicationContext.resetCommonCaches():void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `MetadataReader CachingMetadataReaderFactory.getMetadataReader(Resource)` indirectly writes to field `methodWriter.sourceLength` outside of synchronization.\n Reporting because this access may occur on a background thread.",
                "tnFile": "spring-core/src/main/java/org/springframework/core/type/classreading/CachingMetadataReaderFactory.java",
                "tnLine": 123,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.core.type.classreading.CachingMetadataReaderFactory.getMetadataReader(org.springframework.core.io.Resource):org.springframework.core.type.classreading.MetadataReader",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "NULL_DEREFERENCE",
                "tnDesc": "object `LocalValidatorFactoryBean.validatorFactory` last assigned on line 309 could be null and is dereferenced at line 310.",
                "tnFile": "spring-context/src/main/java/org/springframework/validation/beanvalidation/LocalValidatorFactoryBean.java",
                "tnLine": 310,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.validation.beanvalidation.LocalValidatorFactoryBean.afterPropertiesSet():void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `String HotSwappableTargetSource.toString()` reads without synchronization from `this.target`. Potentially races with write in method `HotSwappableTargetSource.swap(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-aop/src/main/java/org/springframework/aop/target/HotSwappableTargetSource.java",
                "tnLine": 114,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.aop.target.HotSwappableTargetSource.toString():java.lang.String",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `void AbstractApplicationContext.start()` indirectly reads without synchronization from `this.lifecycleProcessor`. Potentially races with write in method `AbstractApplicationContext.refresh()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java",
                "tnLine": 1347,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.context.support.AbstractApplicationContext.start():void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "NULL_DEREFERENCE",
                "tnDesc": "object `name` last assigned on line 541 could be null and is dereferenced at line 542.",
                "tnFile": "spring-aop/src/main/java/org/springframework/aop/framework/ProxyFactoryBean.java",
                "tnLine": 542,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.aop.framework.ProxyFactoryBean.addGlobalAdvisor(org.springframework.beans.factory.ListableBeanFactory,java.lang.String):void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `void AbstractApplicationEventMulticaster.removeApplicationListener(ApplicationListener)` reads without synchronization from `this.retrievalMutex`. Potentially races with write in method `AbstractApplicationEventMulticaster.setBeanFactory(...)`.\n Reporting because this access may occur on a background thread.",
                "tnFile": "spring-context/src/main/java/org/springframework/context/event/AbstractApplicationEventMulticaster.java",
                "tnLine": 128,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.context.event.AbstractApplicationEventMulticaster.removeApplicationListener(org.springframework.context.ApplicationListener):void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "NULL_DEREFERENCE",
                "tnDesc": "object `hashCode` last assigned on line 124 could be null and is dereferenced at line 127.",
                "tnFile": "spring-core/src/main/java/org/springframework/core/annotation/SynthesizedMergedAnnotationInvocationHandler.java",
                "tnLine": 127,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.core.annotation.SynthesizedMergedAnnotationInvocationHandler.annotationHashCode():int",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `java.lang.Object[] AbstractAspectJAdvice.argBinding(JoinPoint,JoinPointMatch,Object,Throwable)` reads without synchronization from `this.joinPointArgumentIndex`. Potentially races with write in method `AbstractAspectJAdvice.calculateArgumentBindings()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-aop/src/main/java/org/springframework/aop/aspectj/AbstractAspectJAdvice.java",
                "tnLine": 570,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.aop.aspectj.AbstractAspectJAdvice.argBinding(org.aspectj.lang.JoinPoint,org.aspectj.weaver.tools.JoinPointMatch,java.lang.Object,java.lang.Throwable):java.lang.Object[]",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `LifecycleProcessor AbstractApplicationContext.getLifecycleProcessor()` reads without synchronization from `this.lifecycleProcessor`. Potentially races with write in method `AbstractApplicationContext.refresh()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java",
                "tnLine": 435,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.context.support.AbstractApplicationContext.getLifecycleProcessor():org.springframework.context.LifecycleProcessor",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `void MBeanRegistrationSupport.doRegister(Object,ObjectName)` reads without synchronization from `this.server`. Potentially races with write in method `MBeanRegistrationSupport.setServer(...)`.\n Reporting because this access may occur on a background thread.",
                "tnFile": "spring-context/src/main/java/org/springframework/jmx/support/MBeanRegistrationSupport.java",
                "tnLine": 131,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.jmx.support.MBeanRegistrationSupport.doRegister(java.lang.Object,javax.management.ObjectName):void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `Registry RmiServiceExporter.getRegistry(int)` reads without synchronization from `this.alwaysCreateRegistry`. Potentially races with write in method `RmiServiceExporter.setAlwaysCreateRegistry(...)`.\n Reporting because this access may occur on a background thread.",
                "tnFile": "spring-context/src/main/java/org/springframework/remoting/rmi/RmiServiceExporter.java",
                "tnLine": 389,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.remoting.rmi.RmiServiceExporter.getRegistry(int):java.rmi.registry.Registry",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `void AbstractApplicationContext.publishEvent(ApplicationEvent)` indirectly reads without synchronization from `this.applicationEventMulticaster`. Potentially races with write in method `AbstractApplicationContext.refresh()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java",
                "tnLine": 359,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.context.support.AbstractApplicationContext.publishEvent(org.springframework.context.ApplicationEvent):void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `Remote RmiClientInterceptor.getStub()` reads without synchronization from `this.cacheStub`. Potentially races with write in method `RmiClientInterceptor.setCacheStub(...)`.\n Reporting because this access may occur on a background thread.",
                "tnFile": "spring-context/src/main/java/org/springframework/remoting/rmi/RmiClientInterceptor.java",
                "tnLine": 232,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.remoting.rmi.RmiClientInterceptor.getStub():java.rmi.Remote",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `Object ConcurrentReferenceHashMap$Segment.doTask(int,Object,ConcurrentReferenceHashMap$Task)` indirectly reads without synchronization from `this.resizeThreshold`. Potentially races with write in method `ConcurrentReferenceHashMap$Segment.restructureIfNecessary(...)`.\n Reporting because this access may occur on a background thread.",
                "tnFile": "spring-core/src/main/java/org/springframework/util/ConcurrentReferenceHashMap.java",
                "tnLine": 519,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.util.ConcurrentReferenceHashMap$Segment.doTask(int,java.lang.Object,org.springframework.util.ConcurrentReferenceHashMap$Task):java.lang.Object",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `Object SpelExpression.getValue(Object,Class)` reads without synchronization from `this.compiledAst`. Potentially races with write in method `SpelExpression.compileExpression()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-expression/src/main/java/org/springframework/expression/spel/standard/SpelExpression.java",
                "tnLine": 212,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.expression.spel.standard.SpelExpression.getValue(java.lang.Object,java.lang.Class):java.lang.Object",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void AbstractAspectJAdvice.setThrowingNameNoCheck(String)` writes to field `this.discoveredThrowingType` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-aop/src/main/java/org/springframework/aop/aspectj/AbstractAspectJAdvice.java",
                "tnLine": 339,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.aop.aspectj.AbstractAspectJAdvice.setThrowingNameNoCheck(java.lang.String):void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void CachingMetadataReaderFactory.setCacheLimit(int)` writes to field `this.metadataReaderCache` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-core/src/main/java/org/springframework/core/type/classreading/CachingMetadataReaderFactory.java",
                "tnLine": 100,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.core.type.classreading.CachingMetadataReaderFactory.setCacheLimit(int):void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `ExecutorService ThreadPoolTaskExecutor.initializeExecutor(ThreadFactory,RejectedExecutionHandler)` reads without synchronization from `this.corePoolSize`. Potentially races with write in method `ThreadPoolTaskExecutor.setCorePoolSize(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-context/src/main/java/org/springframework/scheduling/concurrent/ThreadPoolTaskExecutor.java",
                "tnLine": 229,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.initializeExecutor(java.util.concurrent.ThreadFactory,java.util.concurrent.RejectedExecutionHandler):java.util.concurrent.ExecutorService",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `Type AbstractAspectJAdvice.getDiscoveredReturningGenericType()` reads without synchronization from `this.discoveredReturningGenericType`. Potentially races with write in method `AbstractAspectJAdvice.calculateArgumentBindings()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-aop/src/main/java/org/springframework/aop/aspectj/AbstractAspectJAdvice.java",
                "tnLine": 320,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.aop.aspectj.AbstractAspectJAdvice.getDiscoveredReturningGenericType():java.lang.reflect.Type",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void AbstractApplicationContext.prepareRefresh()` indirectly writes to field `this.environment` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java",
                "tnLine": 603,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.context.support.AbstractApplicationContext.prepareRefresh():void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `void CachingMetadataReaderFactory.setCacheLimit(int)` reads without synchronization from `this.metadataReaderCache`. Potentially races with write in method `CachingMetadataReaderFactory.clearCache()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "spring-core/src/main/java/org/springframework/core/type/classreading/CachingMetadataReaderFactory.java",
                "tnLine": 96,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "org.springframework.core.type.classreading.CachingMetadataReaderFactory.setCacheLimit(int):void",
                "tnPhase": "PhaseUnknown",
 	 	 	 	 	 			"severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              }
            ],
            null,
            {
              "analysisLOC": null,
              "analysisBuildSys": "Gradlew [\"assemble\",\"-xtest\"]",
              "analysisLang": null
            }
          ]
        }
      ],
      [
        {
          "tag": "ErrorProne_JDK8"
        },
        {
          "tag": "ToolSuccess",
          "contents": [
            [],
            null,
            {
              "analysisLOC": null,
              "analysisBuildSys": "Gradlew [\"assemble\",\"-xtest\"]",
              "analysisLang": null
            }
          ]
        }
      ]
    ]
  }
}