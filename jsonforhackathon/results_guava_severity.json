{
  "tag": "AnalysisSuccess",
  "contents": {
    "requestedTools": null,
    "toolResults": [
      [
        {
          "tag": "Infer"
        },
        {
          "tag": "ToolSuccess",
          "contents": [
            [
              {
                "tnType": "UNSAFE_GUARDED_BY_ACCESS",
                "tnDesc": "The field `com.google.common.cache.LocalCache$Segment.accessQueue` is annotated with `@GuardedBy(\"com.google.common.cache.LocalCache$Segment.this\")`, but the lock `com.google.common.cache.LocalCache$Segment.this` is not held during the access to the field at line 3233. Since the current method is non-private, it can be called from outside the current class without synchronization. Consider wrapping the access in a `synchronized(com.google.common.cache.LocalCache$Segment.this)` block or making the method private.",
                "tnFile": "guava/src/com/google/common/cache/LocalCache.java",
                "tnLine": 3233,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.cache.LocalCache$Segment.removeValueFromChain(com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry,java.lang.Object,int,java.lang.Object,com.google.common.cache.LocalCache$ValueReference,com.google.common.cache.RemovalCause):com.google.common.cache.ReferenceEntry",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "NULL_DEREFERENCE",
                "tnDesc": "object returned by `StandardTable$ColumnMap$ColumnMapEntrySet.this$1.get(columnKey)` could be null and is dereferenced at line 902.",
                "tnFile": "guava/src/com/google/common/collect/StandardTable.java",
                "tnLine": 902,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet.contains(java.lang.Object):boolean",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `void MapMakerInternalMap$Segment.initTable(AtomicReferenceArray)` reads without synchronization from `this.threshold`. Potentially races with write in method `MapMakerInternalMap$Segment.put(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "guava/src/com/google/common/collect/MapMakerInternalMap.java",
                "tnLine": 1240,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.collect.MapMakerInternalMap$Segment.initTable(java.util.concurrent.atomic.AtomicReferenceArray):void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void LocalCache$Segment.expireEntries(long)` indirectly writes to field `this.modCount` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "guava/src/com/google/common/cache/LocalCache.java",
                "tnLine": 2590,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.cache.LocalCache$Segment.expireEntries(long):void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void LocalCache$Segment.setValue(ReferenceEntry,Object,Object,long)` indirectly writes to field `this.totalWeight` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "guava/src/com/google/common/cache/LocalCache.java",
                "tnLine": 2016,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.cache.LocalCache$Segment.setValue(com.google.common.cache.ReferenceEntry,java.lang.Object,java.lang.Object,long):void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "UNSAFE_GUARDED_BY_ACCESS",
                "tnDesc": "The field `com.google.common.util.concurrent.ServiceManager$ServiceManagerState.states` is annotated with `@GuardedBy(\"monitor\")`, but the lock `monitor` is not held during the access to the field at line 722. Since the current method is non-private, it can be called from outside the current class without synchronization. Consider wrapping the access in a `synchronized(monitor)` block or making the method private.",
                "tnFile": "guava/src/com/google/common/util/concurrent/ServiceManager.java",
                "tnLine": 722,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.util.concurrent.ServiceManager$ServiceManagerState.transitionService(com.google.common.util.concurrent.Service,com.google.common.util.concurrent.Service$State,com.google.common.util.concurrent.Service$State):void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void Monitor.waitForUninterruptibly(Monitor$Guard)` indirectly writes to field `pred.next` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "guava/src/com/google/common/util/concurrent/Monitor.java",
                "tnLine": 873,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.util.concurrent.Monitor.waitForUninterruptibly(com.google.common.util.concurrent.Monitor$Guard):void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `void CollectionSpliteratorTester.testSpliteratorNotImmutable_CollectionAllowsRemove()` reads with synchronization from `this.collection`. Potentially races with unsynchronized write in method `CollectionSpliteratorTester.testSpliteratorNullable()`.\n Reporting because this access may occur on a background thread.",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/testers/CollectionSpliteratorTester.java",
                "tnLine": 81,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.collect.testing.testers.CollectionSpliteratorTester.testSpliteratorNotImmutable_CollectionAllowsRemove():void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void LocalCache$Segment.enqueueNotification(Object,int,Object,int,RemovalCause)` writes to field `this.totalWeight` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "guava/src/com/google/common/cache/LocalCache.java",
                "tnLine": 2606,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.cache.LocalCache$Segment.enqueueNotification(java.lang.Object,int,java.lang.Object,int,com.google.common.cache.RemovalCause):void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "RESOURCE_LEAK",
                "tnDesc": "resource of type `com.google.common.io.AppendableWriter` acquired by call to `asWriter(...)` at line 77 is not released after line 77.\n**Note**: potential exception at line 77",
                "tnFile": "guava/src/com/google/common/io/CharStreams.java",
                "tnLine": 77,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.io.CharStreams.copy(java.io.InputStreamReader,java.io.Writer):long",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `void CollectionSpliteratorTester.testSpliteratorUnknownOrder()` reads with synchronization from `this.collection`. Potentially races with unsynchronized write in method `CollectionSpliteratorTester.testSpliteratorNullable()`.\n Reporting because this access may occur on a background thread.",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/testers/CollectionSpliteratorTester.java",
                "tnLine": 49,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.collect.testing.testers.CollectionSpliteratorTester.testSpliteratorUnknownOrder():void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "UNSAFE_GUARDED_BY_ACCESS",
                "tnDesc": "The field `com.google.common.util.concurrent.SequentialExecutor.workerRunningState` is annotated with `@GuardedBy(\"queue\")`, but the lock `queue` is not held during the access to the field at line 154. Since the current method is non-private, it can be called from outside the current class without synchronization. Consider wrapping the access in a `synchronized(queue)` block or making the method private.",
                "tnFile": "guava/src/com/google/common/util/concurrent/SequentialExecutor.java",
                "tnLine": 154,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.util.concurrent.SequentialExecutor.execute(java.lang.Runnable):void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "RESOURCE_LEAK",
                "tnDesc": "resource of type `java.io.FileInputStream` acquired by call to `openStream()` at line 347 is not released after line 352.",
                "tnFile": "guava/src/com/google/common/io/ByteSource.java",
                "tnLine": 352,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.io.ByteSource.contentEquals(com.google.common.io.Files$FileByteSource):boolean",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "NULL_DEREFERENCE",
                "tnDesc": "object `loadingFuture` last assigned on line 2287 could be null and is dereferenced at line 2288.",
                "tnFile": "guava/src/com/google/common/cache/LocalCache.java",
                "tnLine": 2288,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.cache.LocalCache$Segment.loadAsync(java.lang.Object,int,com.google.common.cache.LocalCache$LoadingValueReference,com.google.common.cache.CacheLoader):com.google.common.util.concurrent.ListenableFuture",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `boolean CycleDetectingLockFactory$CycleDetectingReentrantReadLock.tryLock()` indirectly mutates container `node.allowedPriorLocks` via call to `put` outside of synchronization.\n Reporting because this access may occur on a background thread.",
                "tnFile": "guava/src/com/google/common/util/concurrent/CycleDetectingLockFactory.java",
                "tnLine": 883,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadLock.tryLock():boolean",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "UNSAFE_GUARDED_BY_ACCESS",
                "tnDesc": "The field `com.google.common.util.concurrent.ServiceManager$ServiceManagerState.startupTimers` is annotated with `@GuardedBy(\"monitor\")`, but the lock `monitor` is not held during the access to the field at line 644. Since the current method is non-private, it can be called from outside the current class without synchronization. Consider wrapping the access in a `synchronized(monitor)` block or making the method private.",
                "tnFile": "guava/src/com/google/common/util/concurrent/ServiceManager.java",
                "tnLine": 644,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.util.concurrent.ServiceManager$ServiceManagerState.startupTimes():com.google.common.collect.ImmutableMap",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `boolean CycleDetectingLockFactory$CycleDetectingReentrantReadLock.tryLock(long,TimeUnit)` indirectly mutates container `node.allowedPriorLocks` via call to `put` outside of synchronization.\n Reporting because this access may occur on a background thread.",
                "tnFile": "guava/src/com/google/common/util/concurrent/CycleDetectingLockFactory.java",
                "tnLine": 893,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadLock.tryLock(long,java.util.concurrent.TimeUnit):boolean",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "NULL_DEREFERENCE",
                "tnDesc": "object `in` last assigned on line 144 could be null and is dereferenced at line 145.",
                "tnFile": "guava/src/com/google/common/io/ByteSource.java",
                "tnLine": 145,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.io.ByteSource.isEmpty():boolean",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "UNSAFE_GUARDED_BY_ACCESS",
                "tnDesc": "The field `com.google.common.cache.LocalCache$Segment.accessQueue` is annotated with `@GuardedBy(\"com.google.common.cache.LocalCache$Segment.this\")`, but the lock `com.google.common.cache.LocalCache$Segment.this` is not held during the access to the field at line 2565. Since the current method is non-private, it can be called from outside the current class without synchronization. Consider wrapping the access in a `synchronized(com.google.common.cache.LocalCache$Segment.this)` block or making the method private.",
                "tnFile": "guava/src/com/google/common/cache/LocalCache.java",
                "tnLine": 2565,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.cache.LocalCache$Segment.drainRecencyQueue():void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `long CountingInputStream.getCount()` reads without synchronization from `this.count`. Potentially races with write in method `CountingInputStream.reset()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "guava/src/com/google/common/io/CountingInputStream.java",
                "tnLine": 49,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.io.CountingInputStream.getCount():long",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "RESOURCE_LEAK",
                "tnDesc": "resource of type `java.io.FileInputStream` acquired by call to `openStream()` at line 348 is not released after line 352.",
                "tnFile": "guava/src/com/google/common/io/ByteSource.java",
                "tnLine": 352,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.io.ByteSource.contentEquals(com.google.common.io.Files$FileByteSource):boolean",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "UNSAFE_GUARDED_BY_ACCESS",
                "tnDesc": "The field `com.google.common.cache.LocalCache$Segment.accessQueue` is annotated with `@GuardedBy(\"com.google.common.cache.LocalCache$Segment.this\")`, but the lock `com.google.common.cache.LocalCache$Segment.this` is not held during the access to the field at line 3271. Since the current method is non-private, it can be called from outside the current class without synchronization. Consider wrapping the access in a `synchronized(com.google.common.cache.LocalCache$Segment.this)` block or making the method private.",
                "tnFile": "guava/src/com/google/common/cache/LocalCache.java",
                "tnLine": 3271,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.cache.LocalCache$Segment.removeCollectedEntry(com.google.common.cache.ReferenceEntry):void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "UNSAFE_GUARDED_BY_ACCESS",
                "tnDesc": "The field `com.google.common.util.concurrent.Monitor$Guard.waiterCount` is annotated with `@GuardedBy(\"monitor.lock\")`, but the lock `monitor.lock` is not held during the access to the field at line 1020. Since the current method is non-private, it can be called from outside the current class without synchronization. Consider wrapping the access in a `synchronized(monitor.lock)` block or making the method private.",
                "tnFile": "guava/src/com/google/common/util/concurrent/Monitor.java",
                "tnLine": 1020,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.util.concurrent.Monitor.getWaitQueueLength(com.google.common.util.concurrent.Monitor$Guard):int",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void CycleDetectingLockFactory$CycleDetectingReentrantLock.lock()` indirectly mutates container `node.allowedPriorLocks` via call to `put` outside of synchronization.\n Reporting because this access may occur on a background thread.",
                "tnFile": "guava/src/com/google/common/util/concurrent/CycleDetectingLockFactory.java",
                "tnLine": 760,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock.lock():void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `boolean MapMakerInternalMap$Segment.removeTableEntryForTesting(MapMakerInternalMap$InternalEntry)` indirectly writes to field `this.modCount` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "guava/src/com/google/common/collect/MapMakerInternalMap.java",
                "tnLine": 1317,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.collect.MapMakerInternalMap$Segment.removeTableEntryForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry):boolean",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void MapMakerInternalMap$Segment.initTable(AtomicReferenceArray)` writes to field `this.threshold` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "guava/src/com/google/common/collect/MapMakerInternalMap.java",
                "tnLine": 1239,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.collect.MapMakerInternalMap$Segment.initTable(java.util.concurrent.atomic.AtomicReferenceArray):void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "UNSAFE_GUARDED_BY_ACCESS",
                "tnDesc": "The field `com.google.common.util.concurrent.ServiceManager$ServiceManagerState.startupTimers` is annotated with `@GuardedBy(\"monitor\")`, but the lock `monitor` is not held during the access to the field at line 702. Since the current method is non-private, it can be called from outside the current class without synchronization. Consider wrapping the access in a `synchronized(monitor)` block or making the method private.",
                "tnFile": "guava/src/com/google/common/util/concurrent/ServiceManager.java",
                "tnLine": 702,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.util.concurrent.ServiceManager$ServiceManagerState.transitionService(com.google.common.util.concurrent.Service,com.google.common.util.concurrent.Service$State,com.google.common.util.concurrent.Service$State):void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "NULL_DEREFERENCE",
                "tnDesc": "object `out` last assigned on line 97 could be null and is dereferenced at line 98.",
                "tnFile": "guava/src/com/google/common/io/CharSink.java",
                "tnLine": 98,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.io.CharSink.write(java.lang.CharSequence):void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `void CollectionSpliteratorTester.testSpliteratorNotImmutable_CollectionAllowsAdd()` reads with synchronization from `this.collection`. Potentially races with unsynchronized write in method `CollectionSpliteratorTester.testSpliteratorNullable()`.\n Reporting because this access may occur on a background thread.",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/testers/CollectionSpliteratorTester.java",
                "tnLine": 73,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.collect.testing.testers.CollectionSpliteratorTester.testSpliteratorNotImmutable_CollectionAllowsAdd():void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "UNSAFE_GUARDED_BY_ACCESS",
                "tnDesc": "The field `com.google.common.cache.LocalCache$Segment.accessQueue` is annotated with `@GuardedBy(\"com.google.common.cache.LocalCache$Segment.this\")`, but the lock `com.google.common.cache.LocalCache$Segment.this` is not held during the access to the field at line 2649. Since the current method is non-private, it can be called from outside the current class without synchronization. Consider wrapping the access in a `synchronized(com.google.common.cache.LocalCache$Segment.this)` block or making the method private.",
                "tnFile": "guava/src/com/google/common/cache/LocalCache.java",
                "tnLine": 2649,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.cache.LocalCache$Segment.getNextEvictable():com.google.common.cache.ReferenceEntry",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "RESOURCE_LEAK",
                "tnDesc": "resource of type `java.io.DataInputStream` acquired by call to `new()` at line 177 is not released after line 177.",
                "tnFile": "guava/src/com/google/common/io/LittleEndianDataInputStream.java",
                "tnLine": 177,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.io.LittleEndianDataInputStream.readUTF():java.lang.String",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void CycleDetectingLockFactory$CycleDetectingReentrantReadLock.lockInterruptibly()` indirectly mutates container `node.allowedPriorLocks` via call to `put` outside of synchronization.\n Reporting because this access may occur on a background thread.",
                "tnFile": "guava/src/com/google/common/util/concurrent/CycleDetectingLockFactory.java",
                "tnLine": 873,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadLock.lockInterruptibly():void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "RESOURCE_LEAK",
                "tnDesc": "resource of type `java.io.BufferedInputStream` acquired by call to `openBufferedStream()` at line 499 is not released after line 499.",
                "tnFile": "guava/src/com/google/common/io/ByteSource.java",
                "tnLine": 499,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.io.ByteSource$SlicedByteSource.openBufferedStream():java.io.InputStream",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `long ByteStreams$LimitedInputStream.skip(long)` writes to field `this.left` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "guava/src/com/google/common/io/ByteStreams.java",
                "tnLine": 754,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.io.ByteStreams$LimitedInputStream.skip(long):long",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `void CollectionSpliteratorTester.testSpliteratorNullable()` reads with synchronization from `this.collection`. Potentially races with unsynchronized write in method `CollectionSpliteratorTester.testSpliteratorNullable()`.\n Reporting because this access may occur on a background thread.",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/testers/CollectionSpliteratorTester.java",
                "tnLine": 65,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.collect.testing.testers.CollectionSpliteratorTester.testSpliteratorNullable():void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `int ByteStreams$LimitedInputStream.read(byte[],int,int)` reads without synchronization from `this.left`. Potentially races with write in method `ByteStreams$LimitedInputStream.reset()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "guava/src/com/google/common/io/ByteStreams.java",
                "tnLine": 725,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.io.ByteStreams$LimitedInputStream.read(byte[],int,int):int",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void LocalCache$Segment.removeCollectedEntry(ReferenceEntry)` indirectly writes to field `this.totalWeight` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "guava/src/com/google/common/cache/LocalCache.java",
                "tnLine": 3264,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.cache.LocalCache$Segment.removeCollectedEntry(com.google.common.cache.ReferenceEntry):void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "UNSAFE_GUARDED_BY_ACCESS",
                "tnDesc": "The field `com.google.common.cache.LocalCache$Segment.accessQueue` is annotated with `@GuardedBy(\"com.google.common.cache.LocalCache$Segment.this\")`, but the lock `com.google.common.cache.LocalCache$Segment.this` is not held during the access to the field at line 2594. Since the current method is non-private, it can be called from outside the current class without synchronization. Consider wrapping the access in a `synchronized(com.google.common.cache.LocalCache$Segment.this)` block or making the method private.",
                "tnFile": "guava/src/com/google/common/cache/LocalCache.java",
                "tnLine": 2594,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.cache.LocalCache$Segment.expireEntries(long):void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "UNSAFE_GUARDED_BY_ACCESS",
                "tnDesc": "The field `com.google.common.cache.LocalCache$Segment.writeQueue` is annotated with `@GuardedBy(\"com.google.common.cache.LocalCache$Segment.this\")`, but the lock `com.google.common.cache.LocalCache$Segment.this` is not held during the access to the field at line 2547. Since the current method is non-private, it can be called from outside the current class without synchronization. Consider wrapping the access in a `synchronized(com.google.common.cache.LocalCache$Segment.this)` block or making the method private.",
                "tnFile": "guava/src/com/google/common/cache/LocalCache.java",
                "tnLine": 2547,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.cache.LocalCache$Segment.recordWrite(com.google.common.cache.ReferenceEntry,int,long):void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "RESOURCE_LEAK",
                "tnDesc": "resource of type `com.google.common.hash.Funnels$SinkAsStream` acquired by call to `asOutputStream(...)` at line 329 is not released after line 329.",
                "tnFile": "guava/src/com/google/common/io/ByteSource.java",
                "tnLine": 329,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.io.ByteSource.hash(com.google.common.hash.HashFunction):com.google.common.hash.HashCode",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `boolean CycleDetectingLockFactory$CycleDetectingReentrantLock.tryLock()` indirectly mutates container `node.allowedPriorLocks` via call to `put` outside of synchronization.\n Reporting because this access may occur on a background thread.",
                "tnFile": "guava/src/com/google/common/util/concurrent/CycleDetectingLockFactory.java",
                "tnLine": 780,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock.tryLock():boolean",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "UNSAFE_GUARDED_BY_ACCESS",
                "tnDesc": "The field `com.google.common.util.concurrent.ServiceManager$ServiceManagerState.servicesByState` is annotated with `@GuardedBy(\"monitor\")`, but the lock `monitor` is not held during the access to the field at line 615. Since the current method is non-private, it can be called from outside the current class without synchronization. Consider wrapping the access in a `synchronized(monitor)` block or making the method private.",
                "tnFile": "guava/src/com/google/common/util/concurrent/ServiceManager.java",
                "tnLine": 615,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.util.concurrent.ServiceManager$ServiceManagerState.awaitStopped(long,java.util.concurrent.TimeUnit):void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "UNSAFE_GUARDED_BY_ACCESS",
                "tnDesc": "The field `com.google.common.util.concurrent.ServiceManager$ServiceManagerState.startupTimers` is annotated with `@GuardedBy(\"monitor\")`, but the lock `monitor` is not held during the access to the field at line 541. Since the current method is non-private, it can be called from outside the current class without synchronization. Consider wrapping the access in a `synchronized(monitor)` block or making the method private.",
                "tnFile": "guava/src/com/google/common/util/concurrent/ServiceManager.java",
                "tnLine": 541,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.util.concurrent.ServiceManager$ServiceManagerState.tryStartTiming(com.google.common.util.concurrent.Service):void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `boolean CycleDetectingLockFactory$CycleDetectingReentrantWriteLock.tryLock()` indirectly mutates container `node.allowedPriorLocks` via call to `put` outside of synchronization.\n Reporting because this access may occur on a background thread.",
                "tnFile": "guava/src/com/google/common/util/concurrent/CycleDetectingLockFactory.java",
                "tnLine": 942,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock.tryLock():boolean",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `void SequentialExecutor.execute(Runnable)` reads without synchronization from `this.workerRunningState`. Potentially races with write in method `SequentialExecutor.execute(...)`.\n Reporting because this access may occur on a background thread.",
                "tnFile": "guava/src/com/google/common/util/concurrent/SequentialExecutor.java",
                "tnLine": 154,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.util.concurrent.SequentialExecutor.execute(java.lang.Runnable):void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `ReferenceEntry LocalCache$Segment.removeValueFromChain(ReferenceEntry,ReferenceEntry,Object,int,Object,LocalCache$ValueReference,RemovalCause)` indirectly writes to field `this.totalWeight` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "guava/src/com/google/common/cache/LocalCache.java",
                "tnLine": 3231,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.cache.LocalCache$Segment.removeValueFromChain(com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry,java.lang.Object,int,java.lang.Object,com.google.common.cache.LocalCache$ValueReference,com.google.common.cache.RemovalCause):com.google.common.cache.ReferenceEntry",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void Monitor.waitFor(Monitor$Guard)` indirectly writes to field `pred.next` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "guava/src/com/google/common/util/concurrent/Monitor.java",
                "tnLine": 826,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.util.concurrent.Monitor.waitFor(com.google.common.util.concurrent.Monitor$Guard):void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `Object Suppliers$NonSerializableMemoizingSupplier.get()` reads without synchronization from `this.value`. Potentially races with write in method `Suppliers$NonSerializableMemoizingSupplier.get()`.\n Reporting because this access may occur on a background thread.",
                "tnFile": "guava/src/com/google/common/base/Suppliers.java",
                "tnLine": 176,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.base.Suppliers$NonSerializableMemoizingSupplier.get():java.lang.Object",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "UNSAFE_GUARDED_BY_ACCESS",
                "tnDesc": "The field `com.google.common.util.concurrent.ServiceManager$ServiceManagerState.startupTimers` is annotated with `@GuardedBy(\"monitor\")`, but the lock `monitor` is not held during the access to the field at line 646. Since the current method is non-private, it can be called from outside the current class without synchronization. Consider wrapping the access in a `synchronized(monitor)` block or making the method private.",
                "tnFile": "guava/src/com/google/common/util/concurrent/ServiceManager.java",
                "tnLine": 646,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.util.concurrent.ServiceManager$ServiceManagerState.startupTimes():com.google.common.collect.ImmutableMap",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `long CountingInputStream.skip(long)` writes to field `this.count` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "guava/src/com/google/common/io/CountingInputStream.java",
                "tnLine": 73,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.io.CountingInputStream.skip(long):long",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "UNSAFE_GUARDED_BY_ACCESS",
                "tnDesc": "The field `com.google.common.util.concurrent.ServiceManager$ServiceManagerState.states` is annotated with `@GuardedBy(\"monitor\")`, but the lock `monitor` is not held during the access to the field at line 516. Since the current method is non-private, it can be called from outside the current class without synchronization. Consider wrapping the access in a `synchronized(monitor)` block or making the method private.",
                "tnFile": "guava/src/com/google/common/util/concurrent/ServiceManager.java",
                "tnLine": 516,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.util.concurrent.ServiceManager$ServiceManagerState$StoppedGuard.isSatisfied():boolean",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `ReferenceEntry LocalCache$Segment.removeEntryFromChain(ReferenceEntry,ReferenceEntry)` indirectly writes to field `this.totalWeight` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "guava/src/com/google/common/cache/LocalCache.java",
                "tnLine": 3254,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.cache.LocalCache$Segment.removeEntryFromChain(com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry):com.google.common.cache.ReferenceEntry",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "NULL_DEREFERENCE",
                "tnDesc": "object `out` last assigned on line 101 could be null and is dereferenced at line 102.",
                "tnFile": "guava/src/com/google/common/io/ByteSink.java",
                "tnLine": 102,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.io.ByteSink.write(byte[]):void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void LocalCache$Segment.expand()` writes to field `this.threshold` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "guava/src/com/google/common/cache/LocalCache.java",
                "tnLine": 2865,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.cache.LocalCache$Segment.expand():void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "RESOURCE_LEAK",
                "tnDesc": "resource of type `java.io.DataInputStream` acquired by call to `newDataInput(...)` at line 670 is not released after line 670.",
                "tnFile": "guava/src/com/google/common/net/InetAddresses.java",
                "tnLine": 670,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.net.InetAddresses.getTeredoInfo(java.net.Inet6Address):com.google.common.net.InetAddresses$TeredoInfo",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `int ByteStreams$LimitedInputStream.read()` writes to field `this.left` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "guava/src/com/google/common/io/ByteStreams.java",
                "tnLine": 718,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.io.ByteStreams$LimitedInputStream.read():int",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void LocalCache$Segment.initTable(AtomicReferenceArray)` writes to field `this.threshold` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "guava/src/com/google/common/cache/LocalCache.java",
                "tnLine": 1970,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.cache.LocalCache$Segment.initTable(java.util.concurrent.atomic.AtomicReferenceArray):void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "NULL_DEREFERENCE",
                "tnDesc": "object `in` last assigned on line 285 could be null and is dereferenced by call to `toByteArray(...)` at line 288.",
                "tnFile": "guava/src/com/google/common/io/ByteSource.java",
                "tnLine": 288,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.io.ByteSource.read():byte[]",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `void CollectionSpliteratorTester.testSpliteratorKnownOrder()` reads with synchronization from `this.collection`. Potentially races with unsynchronized write in method `CollectionSpliteratorTester.testSpliteratorNullable()`.\n Reporting because this access may occur on a background thread.",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/testers/CollectionSpliteratorTester.java",
                "tnLine": 56,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.collect.testing.testers.CollectionSpliteratorTester.testSpliteratorKnownOrder():void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "UNSAFE_GUARDED_BY_ACCESS",
                "tnDesc": "The field `com.google.common.util.concurrent.ServiceManager$ServiceManagerState.states` is annotated with `@GuardedBy(\"monitor\")`, but the lock `monitor` is not held during the access to the field at line 497. Since the current method is non-private, it can be called from outside the current class without synchronization. Consider wrapping the access in a `synchronized(monitor)` block or making the method private.",
                "tnFile": "guava/src/com/google/common/util/concurrent/ServiceManager.java",
                "tnLine": 497,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.util.concurrent.ServiceManager$ServiceManagerState$AwaitHealthGuard.isSatisfied():boolean",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "RESOURCE_LEAK",
                "tnDesc": "resource of type `java.io.DataInputStream` acquired by call to `newDataInput(...)` at line 667 is not released after line 667.",
                "tnFile": "guava/src/com/google/common/net/InetAddresses.java",
                "tnLine": 667,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.net.InetAddresses.getTeredoInfo(java.net.Inet6Address):com.google.common.net.InetAddresses$TeredoInfo",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "UNSAFE_GUARDED_BY_ACCESS",
                "tnDesc": "The field `com.google.common.util.concurrent.ServiceManager$ServiceManagerState.servicesByState` is annotated with `@GuardedBy(\"monitor\")`, but the lock `monitor` is not held during the access to the field at line 697. Since the current method is non-private, it can be called from outside the current class without synchronization. Consider wrapping the access in a `synchronized(monitor)` block or making the method private.",
                "tnFile": "guava/src/com/google/common/util/concurrent/ServiceManager.java",
                "tnLine": 697,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.util.concurrent.ServiceManager$ServiceManagerState.transitionService(com.google.common.util.concurrent.Service,com.google.common.util.concurrent.Service$State,com.google.common.util.concurrent.Service$State):void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "UNSAFE_GUARDED_BY_ACCESS",
                "tnDesc": "The field `com.google.common.cache.LocalCache$Segment.accessQueue` is annotated with `@GuardedBy(\"com.google.common.cache.LocalCache$Segment.this\")`, but the lock `com.google.common.cache.LocalCache$Segment.this` is not held during the access to the field at line 2564. Since the current method is non-private, it can be called from outside the current class without synchronization. Consider wrapping the access in a `synchronized(com.google.common.cache.LocalCache$Segment.this)` block or making the method private.",
                "tnFile": "guava/src/com/google/common/cache/LocalCache.java",
                "tnLine": 2564,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.cache.LocalCache$Segment.drainRecencyQueue():void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `int CountingInputStream.read()` writes to field `this.count` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "guava/src/com/google/common/io/CountingInputStream.java",
                "tnLine": 56,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.io.CountingInputStream.read():int",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "UNSAFE_GUARDED_BY_ACCESS",
                "tnDesc": "The field `com.google.common.util.concurrent.ServiceManager$ServiceManagerState.ready` is annotated with `@GuardedBy(\"monitor\")`, but the lock `monitor` is not held during the access to the field at line 559. Since the current method is non-private, it can be called from outside the current class without synchronization. Consider wrapping the access in a `synchronized(monitor)` block or making the method private.",
                "tnFile": "guava/src/com/google/common/util/concurrent/ServiceManager.java",
                "tnLine": 559,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.util.concurrent.ServiceManager$ServiceManagerState.markReady():void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "UNSAFE_GUARDED_BY_ACCESS",
                "tnDesc": "The field `com.google.common.util.concurrent.ServiceManager$ServiceManagerState.transitioned` is annotated with `@GuardedBy(\"monitor\")`, but the lock `monitor` is not held during the access to the field at line 686. Since the current method is non-private, it can be called from outside the current class without synchronization. Consider wrapping the access in a `synchronized(monitor)` block or making the method private.",
                "tnFile": "guava/src/com/google/common/util/concurrent/ServiceManager.java",
                "tnLine": 686,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.util.concurrent.ServiceManager$ServiceManagerState.transitionService(com.google.common.util.concurrent.Service,com.google.common.util.concurrent.Service$State,com.google.common.util.concurrent.Service$State):void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `boolean Monitor.waitForUninterruptibly(Monitor$Guard,long,TimeUnit)` indirectly writes to field `pred.next` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "guava/src/com/google/common/util/concurrent/Monitor.java",
                "tnLine": 909,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.util.concurrent.Monitor.waitForUninterruptibly(com.google.common.util.concurrent.Monitor$Guard,long,java.util.concurrent.TimeUnit):boolean",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "UNSAFE_GUARDED_BY_ACCESS",
                "tnDesc": "The field `com.google.common.cache.LocalCache$Segment.totalWeight` is annotated with `@GuardedBy(\"com.google.common.cache.LocalCache$Segment.this\")`, but the lock `com.google.common.cache.LocalCache$Segment.this` is not held during the access to the field at line 2538. Since the current method is non-private, it can be called from outside the current class without synchronization. Consider wrapping the access in a `synchronized(com.google.common.cache.LocalCache$Segment.this)` block or making the method private.",
                "tnFile": "guava/src/com/google/common/cache/LocalCache.java",
                "tnLine": 2538,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.cache.LocalCache$Segment.recordWrite(com.google.common.cache.ReferenceEntry,int,long):void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `boolean Monitor.waitFor(Monitor$Guard,long,TimeUnit)` indirectly writes to field `pred.next` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "guava/src/com/google/common/util/concurrent/Monitor.java",
                "tnLine": 861,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.util.concurrent.Monitor.waitFor(com.google.common.util.concurrent.Monitor$Guard,long,java.util.concurrent.TimeUnit):boolean",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `int ByteStreams$LimitedInputStream.available()` reads without synchronization from `this.left`. Potentially races with write in method `ByteStreams$LimitedInputStream.reset()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "guava/src/com/google/common/io/ByteStreams.java",
                "tnLine": 700,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.io.ByteStreams$LimitedInputStream.available():int",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "NULL_DEREFERENCE",
                "tnDesc": "object `reader` last assigned on line 410 could be null and is dereferenced at line 411.",
                "tnFile": "guava/src/com/google/common/io/CharSource.java",
                "tnLine": 411,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.io.CharSource.isEmpty():boolean",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "NULL_DEREFERENCE",
                "tnDesc": "object `reader` last assigned on line 207 could be null and is dereferenced by call to `countBySkipping(...)` at line 208.",
                "tnFile": "guava/src/com/google/common/io/CharSource.java",
                "tnLine": 208,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.io.CharSource.length():long",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "UNSAFE_GUARDED_BY_ACCESS",
                "tnDesc": "The field `com.google.common.util.concurrent.ServiceManager$ServiceManagerState.ready` is annotated with `@GuardedBy(\"monitor\")`, but the lock `monitor` is not held during the access to the field at line 687. Since the current method is non-private, it can be called from outside the current class without synchronization. Consider wrapping the access in a `synchronized(monitor)` block or making the method private.",
                "tnFile": "guava/src/com/google/common/util/concurrent/ServiceManager.java",
                "tnLine": 687,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.util.concurrent.ServiceManager$ServiceManagerState.transitionService(com.google.common.util.concurrent.Service,com.google.common.util.concurrent.Service$State,com.google.common.util.concurrent.Service$State):void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "RESOURCE_LEAK",
                "tnDesc": "resource of type `java.io.FileOutputStream` acquired by call to `openStream()` at line 268 is not released after line 269.",
                "tnFile": "guava/src/com/google/common/io/ByteSource.java",
                "tnLine": 269,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.io.ByteSource.copyTo(com.google.common.io.Files$FileByteSink):long",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `boolean Monitor.waitForUninterruptibly(Monitor$Guard,Duration)` indirectly writes to field `pred.next` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "guava/src/com/google/common/util/concurrent/Monitor.java",
                "tnLine": 885,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.util.concurrent.Monitor.waitForUninterruptibly(com.google.common.util.concurrent.Monitor$Guard,java.time.Duration):boolean",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `boolean CycleDetectingLockFactory$CycleDetectingReentrantLock.tryLock(long,TimeUnit)` indirectly mutates container `node.allowedPriorLocks` via call to `put` outside of synchronization.\n Reporting because this access may occur on a background thread.",
                "tnFile": "guava/src/com/google/common/util/concurrent/CycleDetectingLockFactory.java",
                "tnLine": 790,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock.tryLock(long,java.util.concurrent.TimeUnit):boolean",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `Object Suppliers$MemoizingSupplier.get()` reads without synchronization from `this.value`. Potentially races with write in method `Suppliers$MemoizingSupplier.get()`.\n Reporting because this access may occur on a background thread.",
                "tnFile": "guava/src/com/google/common/base/Suppliers.java",
                "tnLine": 136,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.base.Suppliers$MemoizingSupplier.get():java.lang.Object",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `String Suppliers$NonSerializableMemoizingSupplier.toString()` reads without synchronization from `this.value`. Potentially races with write in method `Suppliers$NonSerializableMemoizingSupplier.get()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "guava/src/com/google/common/base/Suppliers.java",
                "tnLine": 182,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.base.Suppliers$NonSerializableMemoizingSupplier.toString():java.lang.String",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `boolean MapMakerInternalMap$Segment.removeEntryForTesting(MapMakerInternalMap$InternalEntry)` writes to field `this.modCount` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "guava/src/com/google/common/collect/MapMakerInternalMap.java",
                "tnLine": 1919,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.collect.MapMakerInternalMap$Segment.removeEntryForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry):boolean",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "RESOURCE_LEAK",
                "tnDesc": "resource of type `java.net.URLClassLoader` acquired by call to `newLoader(...)` at line 293 is not released after line 294.",
                "tnFile": "guava/src/com/google/common/base/FinalizableReferenceQueue.java",
                "tnLine": 294,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.base.FinalizableReferenceQueue$DecoupledLoader.loadFinalizer():java.lang.Class",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `int ByteStreams$LimitedInputStream.read()` reads without synchronization from `this.left`. Potentially races with write in method `ByteStreams$LimitedInputStream.reset()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "guava/src/com/google/common/io/ByteStreams.java",
                "tnLine": 712,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.io.ByteStreams$LimitedInputStream.read():int",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "UNSAFE_GUARDED_BY_ACCESS",
                "tnDesc": "The field `com.google.common.cache.LocalCache$Segment.writeQueue` is annotated with `@GuardedBy(\"com.google.common.cache.LocalCache$Segment.this\")`, but the lock `com.google.common.cache.LocalCache$Segment.this` is not held during the access to the field at line 3232. Since the current method is non-private, it can be called from outside the current class without synchronization. Consider wrapping the access in a `synchronized(com.google.common.cache.LocalCache$Segment.this)` block or making the method private.",
                "tnFile": "guava/src/com/google/common/cache/LocalCache.java",
                "tnLine": 3232,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.cache.LocalCache$Segment.removeValueFromChain(com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry,java.lang.Object,int,java.lang.Object,com.google.common.cache.LocalCache$ValueReference,com.google.common.cache.RemovalCause):com.google.common.cache.ReferenceEntry",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `long ByteStreams$LimitedInputStream.skip(long)` reads without synchronization from `this.left`. Potentially races with write in method `ByteStreams$LimitedInputStream.reset()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "guava/src/com/google/common/io/ByteStreams.java",
                "tnLine": 752,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.io.ByteStreams$LimitedInputStream.skip(long):long",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "NULL_DEREFERENCE",
                "tnDesc": "object `loadingFuture` last assigned on line 2278 could be null and is dereferenced by call to `getAndRecordStats(...)` at line 2279.",
                "tnFile": "guava/src/com/google/common/cache/LocalCache.java",
                "tnLine": 2279,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.cache.LocalCache$Segment.loadSync(java.lang.Object,int,com.google.common.cache.LocalCache$LoadingValueReference,com.google.common.cache.CacheLoader):java.lang.Object",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "RESOURCE_LEAK",
                "tnDesc": "resource of type `java.io.InputStreamReader` acquired by call to `openStream()` at line 359 is not released after line 360.",
                "tnFile": "guava/src/com/google/common/io/CharSource.java",
                "tnLine": 360,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.io.CharSource.readLines(com.google.common.io.Files$1):java.lang.Object",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `String Suppliers$MemoizingSupplier.toString()` reads without synchronization from `this.value`. Potentially races with write in method `Suppliers$MemoizingSupplier.get()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "guava/src/com/google/common/base/Suppliers.java",
                "tnLine": 141,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.base.Suppliers$MemoizingSupplier.toString():java.lang.String",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "UNSAFE_GUARDED_BY_ACCESS",
                "tnDesc": "The field `com.google.common.cache.LocalCache$Segment.totalWeight` is annotated with `@GuardedBy(\"com.google.common.cache.LocalCache$Segment.this\")`, but the lock `com.google.common.cache.LocalCache$Segment.this` is not held during the access to the field at line 2638. Since the current method is non-private, it can be called from outside the current class without synchronization. Consider wrapping the access in a `synchronized(com.google.common.cache.LocalCache$Segment.this)` block or making the method private.",
                "tnFile": "guava/src/com/google/common/cache/LocalCache.java",
                "tnLine": 2638,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.cache.LocalCache$Segment.evictEntries(com.google.common.cache.ReferenceEntry):void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "UNSAFE_GUARDED_BY_ACCESS",
                "tnDesc": "The field `com.google.common.util.concurrent.ServiceManager$ServiceManagerState.transitioned` is annotated with `@GuardedBy(\"monitor\")`, but the lock `monitor` is not held during the access to the field at line 557. Since the current method is non-private, it can be called from outside the current class without synchronization. Consider wrapping the access in a `synchronized(monitor)` block or making the method private.",
                "tnFile": "guava/src/com/google/common/util/concurrent/ServiceManager.java",
                "tnLine": 557,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.util.concurrent.ServiceManager$ServiceManagerState.markReady():void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void LocalCache$Segment.evictEntries(ReferenceEntry)` indirectly writes to field `this.modCount` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "guava/src/com/google/common/cache/LocalCache.java",
                "tnLine": 2633,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.cache.LocalCache$Segment.evictEntries(com.google.common.cache.ReferenceEntry):void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "UNSAFE_GUARDED_BY_ACCESS",
                "tnDesc": "The field `com.google.common.cache.LocalCache$Segment.writeQueue` is annotated with `@GuardedBy(\"com.google.common.cache.LocalCache$Segment.this\")`, but the lock `com.google.common.cache.LocalCache$Segment.this` is not held during the access to the field at line 2589. Since the current method is non-private, it can be called from outside the current class without synchronization. Consider wrapping the access in a `synchronized(com.google.common.cache.LocalCache$Segment.this)` block or making the method private.",
                "tnFile": "guava/src/com/google/common/cache/LocalCache.java",
                "tnLine": 2589,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.cache.LocalCache$Segment.expireEntries(long):void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "UNSAFE_GUARDED_BY_ACCESS",
                "tnDesc": "The field `com.google.common.util.concurrent.ServiceManager$ServiceManagerState.states` is annotated with `@GuardedBy(\"monitor\")`, but the lock `monitor` is not held during the access to the field at line 499. Since the current method is non-private, it can be called from outside the current class without synchronization. Consider wrapping the access in a `synchronized(monitor)` block or making the method private.",
                "tnFile": "guava/src/com/google/common/util/concurrent/ServiceManager.java",
                "tnLine": 499,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.util.concurrent.ServiceManager$ServiceManagerState$AwaitHealthGuard.isSatisfied():boolean",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `boolean Monitor.waitFor(Monitor$Guard,Duration)` indirectly writes to field `pred.next` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "guava/src/com/google/common/util/concurrent/Monitor.java",
                "tnLine": 839,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.util.concurrent.Monitor.waitFor(com.google.common.util.concurrent.Monitor$Guard,java.time.Duration):boolean",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void CollectionSpliteratorTester.testSpliteratorNullable()` indirectly writes to field `array.[_]` outside of synchronization.\n Reporting because this access may occur on a background thread.",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/testers/CollectionSpliteratorTester.java",
                "tnLine": 63,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.collect.testing.testers.CollectionSpliteratorTester.testSpliteratorNullable():void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "RESOURCE_LEAK",
                "tnDesc": "resource of type `java.io.DataInputStream` acquired to `din` by call to `new()` at line 592 is not released after line 606.\n**Note**: potential exception at line 596",
                "tnFile": "guava/src/com/google/common/hash/BloomFilter.java",
                "tnLine": 606,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.hash.BloomFilter.readFrom(java.io.InputStream,com.google.common.hash.Funnel):com.google.common.hash.BloomFilter",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "RESOURCE_LEAK",
                "tnDesc": "resource of type `java.io.FileInputStream` acquired by call to `openStream()` at line 267 is not released after line 270.\n**Note**: potential exception at line 268",
                "tnFile": "guava/src/com/google/common/io/ByteSource.java",
                "tnLine": 270,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.io.ByteSource.copyTo(com.google.common.io.Files$FileByteSink):long",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `int ByteStreams$LimitedInputStream.read(byte[],int,int)` writes to field `this.left` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "guava/src/com/google/common/io/ByteStreams.java",
                "tnLine": 732,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.io.ByteStreams$LimitedInputStream.read(byte[],int,int):int",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "UNSAFE_GUARDED_BY_ACCESS",
                "tnDesc": "The field `com.google.common.cache.LocalCache$Segment.writeQueue` is annotated with `@GuardedBy(\"com.google.common.cache.LocalCache$Segment.this\")`, but the lock `com.google.common.cache.LocalCache$Segment.this` is not held during the access to the field at line 3270. Since the current method is non-private, it can be called from outside the current class without synchronization. Consider wrapping the access in a `synchronized(com.google.common.cache.LocalCache$Segment.this)` block or making the method private.",
                "tnFile": "guava/src/com/google/common/cache/LocalCache.java",
                "tnLine": 3270,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.cache.LocalCache$Segment.removeCollectedEntry(com.google.common.cache.ReferenceEntry):void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "UNSAFE_GUARDED_BY_ACCESS",
                "tnDesc": "The field `com.google.common.cache.LocalCache$Segment.accessQueue` is annotated with `@GuardedBy(\"com.google.common.cache.LocalCache$Segment.this\")`, but the lock `com.google.common.cache.LocalCache$Segment.this` is not held during the access to the field at line 2527. Since the current method is non-private, it can be called from outside the current class without synchronization. Consider wrapping the access in a `synchronized(com.google.common.cache.LocalCache$Segment.this)` block or making the method private.",
                "tnFile": "guava/src/com/google/common/cache/LocalCache.java",
                "tnLine": 2527,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.cache.LocalCache$Segment.recordLockedRead(com.google.common.cache.ReferenceEntry,long):void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "UNSAFE_GUARDED_BY_ACCESS",
                "tnDesc": "The field `com.google.common.cache.LocalCache$Segment.totalWeight` is annotated with `@GuardedBy(\"com.google.common.cache.LocalCache$Segment.this\")`, but the lock `com.google.common.cache.LocalCache$Segment.this` is not held during the access to the field at line 2606. Since the current method is non-private, it can be called from outside the current class without synchronization. Consider wrapping the access in a `synchronized(com.google.common.cache.LocalCache$Segment.this)` block or making the method private.",
                "tnFile": "guava/src/com/google/common/cache/LocalCache.java",
                "tnLine": 2606,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.cache.LocalCache$Segment.enqueueNotification(java.lang.Object,int,java.lang.Object,int,com.google.common.cache.RemovalCause):void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void MapMakerInternalMap$Segment.expand()` writes to field `this.threshold` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "guava/src/com/google/common/collect/MapMakerInternalMap.java",
                "tnLine": 1550,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.collect.MapMakerInternalMap$Segment.expand():void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void LocalCache$Segment.recordWrite(ReferenceEntry,int,long)` writes to field `this.totalWeight` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "guava/src/com/google/common/cache/LocalCache.java",
                "tnLine": 2538,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.cache.LocalCache$Segment.recordWrite(com.google.common.cache.ReferenceEntry,int,long):void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "UNSAFE_GUARDED_BY_ACCESS",
                "tnDesc": "The field `com.google.common.util.concurrent.ServiceManager$ServiceManagerState.states` is annotated with `@GuardedBy(\"monitor\")`, but the lock `monitor` is not held during the access to the field at line 498. Since the current method is non-private, it can be called from outside the current class without synchronization. Consider wrapping the access in a `synchronized(monitor)` block or making the method private.",
                "tnFile": "guava/src/com/google/common/util/concurrent/ServiceManager.java",
                "tnLine": 498,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.util.concurrent.ServiceManager$ServiceManagerState$AwaitHealthGuard.isSatisfied():boolean",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void CycleDetectingLockFactory$CycleDetectingReentrantLock.lockInterruptibly()` indirectly mutates container `node.allowedPriorLocks` via call to `put` outside of synchronization.\n Reporting because this access may occur on a background thread.",
                "tnFile": "guava/src/com/google/common/util/concurrent/CycleDetectingLockFactory.java",
                "tnLine": 770,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock.lockInterruptibly():void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "RESOURCE_LEAK",
                "tnDesc": "resource of type `java.io.InputStreamReader` acquired by call to `openStream()` at line 239 is not released after line 240.\n**Note**: potential exception at line 240",
                "tnFile": "guava/src/com/google/common/io/CharSource.java",
                "tnLine": 240,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.io.CharSource.copyTo(java.io.Writer):long",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void CycleDetectingLockFactory$CycleDetectingReentrantWriteLock.lockInterruptibly()` indirectly mutates container `node.allowedPriorLocks` via call to `put` outside of synchronization.\n Reporting because this access may occur on a background thread.",
                "tnFile": "guava/src/com/google/common/util/concurrent/CycleDetectingLockFactory.java",
                "tnLine": 932,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock.lockInterruptibly():void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void CycleDetectingLockFactory$CycleDetectingReentrantWriteLock.lock()` indirectly mutates container `node.allowedPriorLocks` via call to `put` outside of synchronization.\n Reporting because this access may occur on a background thread.",
                "tnFile": "guava/src/com/google/common/util/concurrent/CycleDetectingLockFactory.java",
                "tnLine": 922,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock.lock():void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "UNSAFE_GUARDED_BY_ACCESS",
                "tnDesc": "The field `com.google.common.util.concurrent.ServiceManager$ServiceManagerState.servicesByState` is annotated with `@GuardedBy(\"monitor\")`, but the lock `monitor` is not held during the access to the field at line 692. Since the current method is non-private, it can be called from outside the current class without synchronization. Consider wrapping the access in a `synchronized(monitor)` block or making the method private.",
                "tnFile": "guava/src/com/google/common/util/concurrent/ServiceManager.java",
                "tnLine": 692,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.util.concurrent.ServiceManager$ServiceManagerState.transitionService(com.google.common.util.concurrent.Service,com.google.common.util.concurrent.Service$State,com.google.common.util.concurrent.Service$State):void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "RESOURCE_LEAK",
                "tnDesc": "resource of type `java.io.DataInputStream` acquired by call to `newDataInput(...)` at line 890 is not released after line 890.",
                "tnFile": "guava/src/com/google/common/net/InetAddresses.java",
                "tnLine": 890,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.net.InetAddresses.coerceToInteger(java.net.InetAddress):int",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `int CountingInputStream.read(byte[],int,int)` writes to field `this.count` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "guava/src/com/google/common/io/CountingInputStream.java",
                "tnLine": 65,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.io.CountingInputStream.read(byte[],int,int):int",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "UNSAFE_GUARDED_BY_ACCESS",
                "tnDesc": "The field `com.google.common.util.concurrent.ServiceManager$ServiceManagerState.servicesByState` is annotated with `@GuardedBy(\"monitor\")`, but the lock `monitor` is not held during the access to the field at line 629. Since the current method is non-private, it can be called from outside the current class without synchronization. Consider wrapping the access in a `synchronized(monitor)` block or making the method private.",
                "tnFile": "guava/src/com/google/common/util/concurrent/ServiceManager.java",
                "tnLine": 629,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.util.concurrent.ServiceManager$ServiceManagerState.servicesByState():com.google.common.collect.ImmutableMultimap",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void LocalCache$Segment.expand()` indirectly writes to field `this.totalWeight` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "guava/src/com/google/common/cache/LocalCache.java",
                "tnLine": 2903,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.cache.LocalCache$Segment.expand():void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `void CycleDetectingLockFactory$CycleDetectingReentrantReadLock.lock()` indirectly mutates container `node.allowedPriorLocks` via call to `put` outside of synchronization.\n Reporting because this access may occur on a background thread.",
                "tnFile": "guava/src/com/google/common/util/concurrent/CycleDetectingLockFactory.java",
                "tnLine": 863,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadLock.lock():void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "UNSAFE_GUARDED_BY_ACCESS",
                "tnDesc": "The field `com.google.common.cache.LocalCache$Segment.accessQueue` is annotated with `@GuardedBy(\"com.google.common.cache.LocalCache$Segment.this\")`, but the lock `com.google.common.cache.LocalCache$Segment.this` is not held during the access to the field at line 2546. Since the current method is non-private, it can be called from outside the current class without synchronization. Consider wrapping the access in a `synchronized(com.google.common.cache.LocalCache$Segment.this)` block or making the method private.",
                "tnFile": "guava/src/com/google/common/cache/LocalCache.java",
                "tnLine": 2546,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.cache.LocalCache$Segment.recordWrite(com.google.common.cache.ReferenceEntry,int,long):void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "RESOURCE_LEAK",
                "tnDesc": "resource of type `java.io.FileOutputStream` acquired to `transfer` by call to `FileOutputStream(...)` at line 202 is not released after line 211.\n**Note**: potential exception at line 204",
                "tnFile": "guava/src/com/google/common/io/FileBackedOutputStream.java",
                "tnLine": 211,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.io.FileBackedOutputStream.update(int):void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "RESOURCE_LEAK",
                "tnDesc": "resource of type `java.io.FileInputStream` acquired by call to `openStream()` at line 347 is not released after line 355.",
                "tnFile": "guava/src/com/google/common/io/ByteSource.java",
                "tnLine": 355,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.io.ByteSource.contentEquals(com.google.common.io.Files$FileByteSource):boolean",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "RESOURCE_LEAK",
                "tnDesc": "resource of type `java.io.FileInputStream` acquired by call to `openStream()` at line 154 is not released after line 155.",
                "tnFile": "guava/src/com/google/common/io/Files.java",
                "tnLine": 155,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.io.Files$FileByteSource.read():byte[]",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `void Monitor.leave()` indirectly reads without synchronization from `this.activeGuards`. Potentially races with write in method `Monitor.waitForUninterruptibly(...)`.\n Reporting because this access may occur on a background thread.",
                "tnFile": "guava/src/com/google/common/util/concurrent/Monitor.java",
                "tnLine": 932,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.util.concurrent.Monitor.leave():void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "NULL_DEREFERENCE",
                "tnDesc": "object returned by `getOrInitSeenExceptions()` could be null and is dereferenced by call to `addCausalChain(...)` at line 184.",
                "tnFile": "guava/src/com/google/common/util/concurrent/AggregateFuture.java",
                "tnLine": 184,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.util.concurrent.AggregateFuture$RunningState.handleException(java.lang.IllegalStateException):void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "UNSAFE_GUARDED_BY_ACCESS",
                "tnDesc": "The field `com.google.common.util.concurrent.ServiceManager$ServiceManagerState.servicesByState` is annotated with `@GuardedBy(\"monitor\")`, but the lock `monitor` is not held during the access to the field at line 595. Since the current method is non-private, it can be called from outside the current class without synchronization. Consider wrapping the access in a `synchronized(monitor)` block or making the method private.",
                "tnFile": "guava/src/com/google/common/util/concurrent/ServiceManager.java",
                "tnLine": 595,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.util.concurrent.ServiceManager$ServiceManagerState.awaitHealthy(long,java.util.concurrent.TimeUnit):void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Read/Write race. Non-private method `void LocalCache$Segment.initTable(AtomicReferenceArray)` reads without synchronization from `this.threshold`. Potentially races with write in method `LocalCache$Segment.storeLoadedValue(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.",
                "tnFile": "guava/src/com/google/common/cache/LocalCache.java",
                "tnLine": 1971,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.cache.LocalCache$Segment.initTable(java.util.concurrent.atomic.AtomicReferenceArray):void",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "THREAD_SAFETY_VIOLATION",
                "tnDesc": "Unprotected write. Non-private method `boolean CycleDetectingLockFactory$CycleDetectingReentrantWriteLock.tryLock(long,TimeUnit)` indirectly mutates container `node.allowedPriorLocks` via call to `put` outside of synchronization.\n Reporting because this access may occur on a background thread.",
                "tnFile": "guava/src/com/google/common/util/concurrent/CycleDetectingLockFactory.java",
                "tnLine": 952,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock.tryLock(long,java.util.concurrent.TimeUnit):boolean",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "NULL_DEREFERENCE",
                "tnDesc": "object `upperBound` last assigned on line 504 could be null and is dereferenced by call to `typeName(...)` at line 505.",
                "tnFile": "guava/src/com/google/common/reflect/Types.java",
                "tnLine": 505,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.reflect.Types$WildcardTypeImpl.toString():java.lang.String",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              },
              {
                "tnType": "NULL_DEREFERENCE",
                "tnDesc": "object `writer` last assigned on line 648 could be null and is dereferenced at line 649.",
                "tnFile": "guava/src/com/google/common/io/CharSource.java",
                "tnLine": 649,
                "tnColumn": -1,
                "tnPatch": null,
                "tnCodeLine": null,
                "tnProcedure": "com.google.common.io.CharSource$StringCharSource.copyTo(com.google.common.io.CharSink):long",
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "Infer"
                }
              }
            ],
            null,
            {
              "analysisLOC": null,
              "analysisBuildSys": "Maven []",
              "analysisLang": null
            }
          ]
        }
      ],
      [
        {
          "tag": "ErrorProne_JDK8"
        },
        {
          "tag": "ToolSuccess",
          "contents": [
            [
              {
                "tnType": "JUnit4ClassUsedInJUnit3",
                "tnDesc": "@Ignore cannot be used inside a JUnit3 class. Convert your class to JUnit4 style.",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/testers/ListEqualsTester.java",
                "tnLine": 36,
                "tnColumn": 1,
                "tnPatch": null,
                "tnCodeLine": "@Ignore // Affects only Android test runner, which respects JUnit 4 annotations on JUnit 3 tests.",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ShortCircuitBoolean",
                "tnDesc": "Prefer the short-circuiting boolean operators && and || to & and |.",
                "tnFile": "guava-gwt/target/classes/com/google/common/math/LongMath.java",
                "tnLine": 589,
                "tnColumn": 28,
                "tnPatch": null,
                "tnCodeLine": "    checkNoOverflow(a >= 0 | b != Long.MIN_VALUE, \"checkedMultiply\", a, b);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "Finally",
                "tnDesc": "If you return or throw from a finally, then values returned or thrown from the try-catch block will be ignored. Consider using try-with-resources instead.",
                "tnFile": "guava/src/com/google/common/io/FileBackedOutputStream.java",
                "tnLine": 157,
                "tnColumn": 11,
                "tnPatch": null,
                "tnCodeLine": "          throw new IOException(\"Could not delete: \" + deleteMe);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "OperatorPrecedence",
                "tnDesc": "Use grouping parenthesis to make the operator precedence explicit",
                "tnFile": "guava/src/com/google/common/io/BaseEncoding.java",
                "tnLine": 933,
                "tnColumn": 87,
                "tnPatch": null,
                "tnCodeLine": "        int chunk = (bytes[i++] & 0xFF) << 16 | (bytes[i++] & 0xFF) << 8 | bytes[i++] & 0xFF;",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ShortCircuitBoolean",
                "tnDesc": "Prefer the short-circuiting boolean operators && and || to & and |.",
                "tnFile": "guava/src/com/google/common/math/IntMath.java",
                "tnLine": 605,
                "tnColumn": 41,
                "tnPatch": null,
                "tnCodeLine": "            if (-FLOOR_SQRT_MAX_INT > b | b > FLOOR_SQRT_MAX_INT) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ThreadPriorityCheck",
                "tnDesc": "Relying on the thread scheduler is discouraged; see Effective Java Item 72 (2nd edition) / 84 (3rd edition).",
                "tnFile": "guava/src/com/google/common/util/concurrent/ThreadFactoryBuilder.java",
                "tnLine": 171,
                "tnColumn": 29,
                "tnPatch": null,
                "tnCodeLine": "          thread.setPriority(priority);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JUnit4ClassUsedInJUnit3",
                "tnDesc": "@Ignore cannot be used inside a JUnit3 class. Convert your class to JUnit4 style.",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/testers/MapRemoveTester.java",
                "tnLine": 45,
                "tnColumn": 1,
                "tnPatch": null,
                "tnCodeLine": "@Ignore // Affects only Android test runner, which respects JUnit 4 annotations on JUnit 3 tests.",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "OperatorPrecedence",
                "tnDesc": "Use grouping parenthesis to make the operator precedence explicit",
                "tnFile": "guava/src/com/google/common/math/LongMath.java",
                "tnLine": 742,
                "tnColumn": 53,
                "tnPatch": null,
                "tnCodeLine": "    long limit = Long.MAX_VALUE + ((b >>> Long.SIZE - 1) & (k & 1));",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UndefinedEquals",
                "tnDesc": "Multimap does not have well-defined equals behavior.",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/google/MultimapEntriesTester.java",
                "tnLine": 97,
                "tnColumn": 17,
                "tnPatch": null,
                "tnCodeLine": "    assertEquals(getSubjectGenerator().create(Helpers.mapEntry(k0(), v0())), multimap());",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UndefinedEquals",
                "tnDesc": "Multimap does not have well-defined equals behavior.",
                "tnFile": "guava-gwt/target/classes/com/google/common/collect/Synchronized.java",
                "tnLine": 746,
                "tnColumn": 33,
                "tnPatch": null,
                "tnCodeLine": "        return delegate().equals(o);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JUnit4ClassUsedInJUnit3",
                "tnDesc": "@Ignore cannot be used inside a JUnit3 class. Convert your class to JUnit4 style.",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/testers/CollectionToArrayTester.java",
                "tnLine": 43,
                "tnColumn": 1,
                "tnPatch": null,
                "tnCodeLine": "@Ignore // Affects only Android test runner, which respects JUnit 4 annotations on JUnit 3 tests.",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JUnit4ClassUsedInJUnit3",
                "tnDesc": "@Ignore cannot be used inside a JUnit3 class. Convert your class to JUnit4 style.",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/google/MultimapKeySetTester.java",
                "tnLine": 38,
                "tnColumn": 1,
                "tnPatch": null,
                "tnCodeLine": "@Ignore // Affects only Android test runner, which respects JUnit 4 annotations on JUnit 3 tests.",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ReferenceEquality",
                "tnDesc": "Comparison using reference equality instead of value equality",
                "tnFile": "guava-gwt/target/classes/com/google/common/collect/Range.java",
                "tnLine": 638,
                "tnColumn": 19,
                "tnPatch": null,
                "tnCodeLine": "    return (lower == lowerBound && upper == upperBound) ? this : create(lower, upper);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ShortCircuitBoolean",
                "tnDesc": "Prefer the short-circuiting boolean operators && and || to & and |.",
                "tnFile": "guava-gwt/target/classes/com/google/common/math/IntMath.java",
                "tnLine": 521,
                "tnColumn": 54,
                "tnPatch": null,
                "tnCodeLine": "            checkNoOverflow(-FLOOR_SQRT_MAX_INT <= b & b <= FLOOR_SQRT_MAX_INT, \"checkedPow\", b, k);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JdkObsolete",
                "tnDesc": "SortedSet was replaced by NavigableSet in Java 6.",
                "tnFile": "guava/src/com/google/common/collect/ForwardingSortedSet.java",
                "tnLine": 55,
                "tnColumn": 17,
                "tnPatch": null,
                "tnCodeLine": "public abstract class ForwardingSortedSet<E> extends ForwardingSet<E> implements SortedSet<E> {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JUnit4ClassUsedInJUnit3",
                "tnDesc": "@Ignore cannot be used inside a JUnit3 class. Convert your class to JUnit4 style.",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/testers/ListHashCodeTester.java",
                "tnLine": 31,
                "tnColumn": 1,
                "tnPatch": null,
                "tnCodeLine": "@Ignore // Affects only Android test runner, which respects JUnit 4 annotations on JUnit 3 tests.",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JdkObsolete",
                "tnDesc": "It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/TestsForQueuesInJavaUtil.java",
                "tnLine": 110,
                "tnColumn": 39,
                "tnPatch": null,
                "tnCodeLine": "                Queue<String> queue = new LinkedList<>(MinimalCollection.of(elements));",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UnusedVariable",
                "tnDesc": "The parameter 'stream' is never read.",
                "tnFile": "guava/src/com/google/common/collect/ImmutableAsList.java",
                "tnLine": 76,
                "tnColumn": 45,
                "tnPatch": null,
                "tnCodeLine": "  private void readObject(ObjectInputStream stream) throws InvalidObjectException {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JUnit4ClassUsedInJUnit3",
                "tnDesc": "@Ignore cannot be used inside a JUnit3 class. Convert your class to JUnit4 style.",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/google/MultimapGetTester.java",
                "tnLine": 44,
                "tnColumn": 1,
                "tnPatch": null,
                "tnCodeLine": "@Ignore // Affects only Android test runner, which respects JUnit 4 annotations on JUnit 3 tests.",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ReferenceEquality",
                "tnDesc": "Comparison using reference equality instead of value equality",
                "tnFile": "guava/src/com/google/common/collect/Range.java",
                "tnLine": 389,
                "tnColumn": 23,
                "tnPatch": null,
                "tnCodeLine": "    return upperBound != Cut.aboveAll();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ShortCircuitBoolean",
                "tnDesc": "Prefer the short-circuiting boolean operators && and || to & and |.",
                "tnFile": "guava/src/com/google/common/util/concurrent/Monitor.java",
                "tnLine": 897,
                "tnColumn": 35,
                "tnPatch": null,
                "tnCodeLine": "    if (!((guard.monitor == this) & lock.isHeldByCurrentThread())) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ShortCircuitBoolean",
                "tnDesc": "Prefer the short-circuiting boolean operators && and || to & and |.",
                "tnFile": "guava/src/com/google/common/math/LongMath.java",
                "tnLine": 426,
                "tnColumn": 61,
                "tnPatch": null,
                "tnCodeLine": "          increment = (mode == HALF_UP | (mode == HALF_EVEN & (div & 1) != 0));",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ReferenceEquality",
                "tnDesc": "Comparison using reference equality instead of value equality",
                "tnFile": "guava-gwt/target/classes/com/google/common/collect/LinkedHashMultimap.java",
                "tnLine": 526,
                "tnColumn": 26,
                "tnPatch": null,
                "tnCodeLine": "        return nextEntry != multimapHeaderEntry;",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JdkObsolete",
                "tnDesc": "SortedSet was replaced by NavigableSet in Java 6.",
                "tnFile": "guava-gwt/target/classes/com/google/common/collect/Maps.java",
                "tnLine": 3746,
                "tnColumn": 10,
                "tnPatch": null,
                "tnCodeLine": "  static class SortedKeySet<K, V> extends KeySet<K, V> implements SortedSet<K> {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "MissingFail",
                "tnDesc": "Not calling fail() when expecting an exception masks bugs",
                "tnFile": "guava-testlib/src/com/google/common/util/concurrent/testing/AbstractListenableFutureTest.java",
                "tnLine": 134,
                "tnColumn": 19,
                "tnPatch": null,
                "tnCodeLine": "                  future.get();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JUnit4ClassUsedInJUnit3",
                "tnDesc": "@Ignore cannot be used inside a JUnit3 class. Convert your class to JUnit4 style.",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/google/MultimapAsMapGetTester.java",
                "tnLine": 42,
                "tnColumn": 1,
                "tnPatch": null,
                "tnCodeLine": "@Ignore // Affects only Android test runner, which respects JUnit 4 annotations on JUnit 3 tests.",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ShortCircuitBoolean",
                "tnDesc": "Prefer the short-circuiting boolean operators && and || to & and |.",
                "tnFile": "guava-gwt/target/classes/com/google/common/math/IntMath.java",
                "tnLine": 361,
                "tnColumn": 62,
                "tnPatch": null,
                "tnCodeLine": "          increment = (mode == HALF_UP || (mode == HALF_EVEN & (div & 1) != 0));",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JUnit4ClassUsedInJUnit3",
                "tnDesc": "@Ignore cannot be used inside a JUnit3 class. Convert your class to JUnit4 style.",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/testers/ListAddAtIndexTester.java",
                "tnLine": 44,
                "tnColumn": 1,
                "tnPatch": null,
                "tnCodeLine": "@Ignore // Affects only Android test runner, which respects JUnit 4 annotations on JUnit 3 tests.",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JUnit4ClassUsedInJUnit3",
                "tnDesc": "@Ignore cannot be used inside a JUnit3 class. Convert your class to JUnit4 style.",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/testers/MapCreationTester.java",
                "tnLine": 46,
                "tnColumn": 1,
                "tnPatch": null,
                "tnCodeLine": "@Ignore // Affects only Android test runner, which respects JUnit 4 annotations on JUnit 3 tests.",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ImmutableEnumChecker",
                "tnDesc": "enums should be immutable: 'CollectionFeature' has field 'implied' of type 'java.util.Set<com.google.common.collect.testing.features.Feature<? super java.util.Collection>>', 'Set' is mutable",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/features/CollectionFeature.java",
                "tnLine": 109,
                "tnColumn": 50,
                "tnPatch": null,
                "tnCodeLine": "  private final Set<Feature<? super Collection>> implied;",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JUnit4ClassUsedInJUnit3",
                "tnDesc": "@Ignore cannot be used inside a JUnit3 class. Convert your class to JUnit4 style.",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/google/ListMultimapPutAllTester.java",
                "tnLine": 33,
                "tnColumn": 1,
                "tnPatch": null,
                "tnCodeLine": "@Ignore // Affects only Android test runner, which respects JUnit 4 annotations on JUnit 3 tests.",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JUnit4ClassUsedInJUnit3",
                "tnDesc": "@Ignore cannot be used inside a JUnit3 class. Convert your class to JUnit4 style.",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/testers/MapContainsKeyTester.java",
                "tnLine": 37,
                "tnColumn": 1,
                "tnPatch": null,
                "tnCodeLine": "@Ignore // Affects only Android test runner, which respects JUnit 4 annotations on JUnit 3 tests.",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ImmutableEnumChecker",
                "tnDesc": "enums should be immutable: 'CollectionSize' has field 'implied' of type 'java.util.Set<com.google.common.collect.testing.features.Feature<? super java.util.Collection>>', 'Set' is mutable",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/features/CollectionSize.java",
                "tnLine": 61,
                "tnColumn": 50,
                "tnPatch": null,
                "tnCodeLine": "  private final Set<Feature<? super Collection>> implied;",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ShortCircuitBoolean",
                "tnDesc": "Prefer the short-circuiting boolean operators && and || to & and |.",
                "tnFile": "guava/src/com/google/common/math/DoubleMath.java",
                "tnLine": 185,
                "tnColumn": 38,
                "tnPatch": null,
                "tnCodeLine": "    if (MIN_LONG_AS_DOUBLE - x < 1.0 & x < MAX_LONG_AS_DOUBLE_PLUS_ONE) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "SynchronizeOnNonFinalField",
                "tnDesc": "Synchronizing on non-final fields is not safe: if the field is ever updated, different threads may end up locking on different objects.",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/testers/CollectionStreamTester.java",
                "tnLine": 52,
                "tnColumn": 18,
                "tnPatch": null,
                "tnCodeLine": "    synchronized (collection) { // to allow Collections.synchronized* tests to pass",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ReferenceEquality",
                "tnDesc": "Comparison using reference equality instead of value equality",
                "tnFile": "guava/src/com/google/common/collect/Range.java",
                "tnLine": 355,
                "tnColumn": 23,
                "tnPatch": null,
                "tnCodeLine": "        || lowerBound == Cut.<C>aboveAll()",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ShortCircuitBoolean",
                "tnDesc": "Prefer the short-circuiting boolean operators && and || to & and |.",
                "tnFile": "guava/src/com/google/common/util/concurrent/AggregateFuture.java",
                "tnLine": 190,
                "tnColumn": 53,
                "tnPatch": null,
                "tnCodeLine": "          | (allMustSucceed & !completedWithFailure & firstTimeSeeingThisException)) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ImmutableEnumChecker",
                "tnDesc": "enums should be immutable: 'MultimapFeature' has field 'implied' of type 'java.util.Set<com.google.common.collect.testing.features.Feature<? super com.google.common.collect.Multimap>>', 'Set' is mutable",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/google/MultimapFeature.java",
                "tnLine": 40,
                "tnColumn": 48,
                "tnPatch": null,
                "tnCodeLine": "  private final Set<Feature<? super Multimap>> implied;",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JUnit4ClassUsedInJUnit3",
                "tnDesc": "@Ignore cannot be used inside a JUnit3 class. Convert your class to JUnit4 style.",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/testers/ListCreationTester.java",
                "tnLine": 36,
                "tnColumn": 1,
                "tnPatch": null,
                "tnCodeLine": "@Ignore // Affects only Android test runner, which respects JUnit 4 annotations on JUnit 3 tests.",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JUnit4ClassUsedInJUnit3",
                "tnDesc": "@Ignore cannot be used inside a JUnit3 class. Convert your class to JUnit4 style.",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/google/MultisetSerializationTester.java",
                "tnLine": 35,
                "tnColumn": 1,
                "tnPatch": null,
                "tnCodeLine": "@Ignore // Affects only Android test runner, which respects JUnit 4 annotations on JUnit 3 tests.",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ShortCircuitBoolean",
                "tnDesc": "Prefer the short-circuiting boolean operators && and || to & and |.",
                "tnFile": "guava-gwt/target/classes/com/google/common/math/IntMath.java",
                "tnLine": 94,
                "tnColumn": 18,
                "tnPatch": null,
                "tnCodeLine": "    return x > 0 & (x & (x - 1)) == 0;",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JUnit4ClassUsedInJUnit3",
                "tnDesc": "@Ignore cannot be used inside a JUnit3 class. Convert your class to JUnit4 style.",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/testers/MapPutIfAbsentTester.java",
                "tnLine": 38,
                "tnColumn": 1,
                "tnPatch": null,
                "tnCodeLine": "@Ignore // Affects only Android test runner, which respects JUnit 4 annotations on JUnit 3 tests.",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JUnit4ClassUsedInJUnit3",
                "tnDesc": "@Ignore cannot be used inside a JUnit3 class. Convert your class to JUnit4 style.",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/testers/MapContainsValueTester.java",
                "tnLine": 38,
                "tnColumn": 1,
                "tnPatch": null,
                "tnCodeLine": "@Ignore // Affects only Android test runner, which respects JUnit 4 annotations on JUnit 3 tests.",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UndefinedEquals",
                "tnDesc": "Collection does not have well-defined equals behavior.",
                "tnFile": "guava-gwt/target/classes/com/google/common/collect/AbstractMapBasedMultimap.java",
                "tnLine": 401,
                "tnColumn": 29,
                "tnPatch": null,
                "tnCodeLine": "      return delegate.equals(object);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JUnit4ClassUsedInJUnit3",
                "tnDesc": "@Ignore cannot be used inside a JUnit3 class. Convert your class to JUnit4 style.",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/testers/CollectionCreationTester.java",
                "tnLine": 39,
                "tnColumn": 1,
                "tnPatch": null,
                "tnCodeLine": "@Ignore // Affects only Android test runner, which respects JUnit 4 annotations on JUnit 3 tests.",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "WaitNotInLoop",
                "tnDesc": "Because of spurious wakeups, await(long,java.util.concurrent.TimeUnit) must always be called in a loop",
                "tnFile": "guava/src/com/google/common/util/concurrent/ForwardingCondition.java",
                "tnLine": 32,
                "tnColumn": 28,
                "tnPatch": null,
                "tnCodeLine": "    return delegate().await(time, unit);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JUnit4ClassUsedInJUnit3",
                "tnDesc": "@Ignore cannot be used inside a JUnit3 class. Convert your class to JUnit4 style.",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/google/MultisetIteratorTester.java",
                "tnLine": 40,
                "tnColumn": 1,
                "tnPatch": null,
                "tnCodeLine": "@Ignore // Affects only Android test runner, which respects JUnit 4 annotations on JUnit 3 tests.",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ShortCircuitBoolean",
                "tnDesc": "Prefer the short-circuiting boolean operators && and || to & and |.",
                "tnFile": "guava/src/com/google/common/collect/GeneralRange.java",
                "tnLine": 157,
                "tnColumn": 20,
                "tnPatch": null,
                "tnCodeLine": "    return cmp < 0 | (cmp == 0 & getLowerBoundType() == OPEN);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ReferenceEquality",
                "tnDesc": "Comparison using reference equality instead of value equality",
                "tnFile": "guava-gwt/target/classes/com/google/common/collect/Range.java",
                "tnLine": 638,
                "tnColumn": 42,
                "tnPatch": null,
                "tnCodeLine": "    return (lower == lowerBound && upper == upperBound) ? this : create(lower, upper);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JUnit4ClassUsedInJUnit3",
                "tnDesc": "@Ignore cannot be used inside a JUnit3 class. Convert your class to JUnit4 style.",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/google/BiMapEntrySetTester.java",
                "tnLine": 32,
                "tnColumn": 1,
                "tnPatch": null,
                "tnCodeLine": "@Ignore // Affects only Android test runner, which respects JUnit 4 annotations on JUnit 3 tests.",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JUnit4ClassUsedInJUnit3",
                "tnDesc": "@Ignore cannot be used inside a JUnit3 class. Convert your class to JUnit4 style.",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/testers/AbstractListTester.java",
                "tnLine": 32,
                "tnColumn": 1,
                "tnPatch": null,
                "tnCodeLine": "@Ignore // Affects only Android test runner, which respects JUnit 4 annotations on JUnit 3 tests.",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ShortCircuitBoolean",
                "tnDesc": "Prefer the short-circuiting boolean operators && and || to & and |.",
                "tnFile": "guava/src/com/google/common/util/concurrent/AggregateFuture.java",
                "tnLine": 251,
                "tnColumn": 26,
                "tnPatch": null,
                "tnCodeLine": "      if (collectsValues & !allMustSucceed) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JUnit4ClassUsedInJUnit3",
                "tnDesc": "@Ignore cannot be used inside a JUnit3 class. Convert your class to JUnit4 style.",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/google/SortedSetMultimapGetTester.java",
                "tnLine": 29,
                "tnColumn": 1,
                "tnPatch": null,
                "tnCodeLine": "@Ignore // Affects only Android test runner, which respects JUnit 4 annotations on JUnit 3 tests.",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JdkObsolete",
                "tnDesc": "SortedMap was replaced by NavigableMap in Java 6.",
                "tnFile": "guava/src/com/google/common/collect/Synchronized.java",
                "tnLine": 1237,
                "tnColumn": 10,
                "tnPatch": null,
                "tnCodeLine": "  static class SynchronizedSortedMap<K, V> extends SynchronizedMap<K, V>",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ShortCircuitBoolean",
                "tnDesc": "Prefer the short-circuiting boolean operators && and || to & and |.",
                "tnFile": "guava/src/com/google/common/math/LongMath.java",
                "tnLine": 97,
                "tnColumn": 18,
                "tnPatch": null,
                "tnCodeLine": "    return x > 0 & (x & (x - 1)) == 0;",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ShortCircuitBoolean",
                "tnDesc": "Prefer the short-circuiting boolean operators && and || to & and |.",
                "tnFile": "guava-gwt/target/classes/com/google/common/math/LongMath.java",
                "tnLine": 604,
                "tnColumn": 17,
                "tnPatch": null,
                "tnCodeLine": "    if (b >= -2 & b <= 2) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ImmutableEnumChecker",
                "tnDesc": "enums should be immutable: 'ListFeature' has field 'implied' of type 'java.util.Set<com.google.common.collect.testing.features.Feature<? super java.util.List>>', 'Set' is mutable",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/features/ListFeature.java",
                "tnLine": 49,
                "tnColumn": 44,
                "tnPatch": null,
                "tnCodeLine": "  private final Set<Feature<? super List>> implied;",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "SynchronizeOnNonFinalField",
                "tnDesc": "Synchronizing on non-final fields is not safe: if the field is ever updated, different threads may end up locking on different objects.",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/testers/CollectionStreamTester.java",
                "tnLine": 58,
                "tnColumn": 18,
                "tnPatch": null,
                "tnCodeLine": "    synchronized (collection) { // to allow Collections.synchronized* tests to pass",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ReferenceEquality",
                "tnDesc": "Comparison using reference equality instead of value equality",
                "tnFile": "guava/src/com/google/common/collect/TreeRangeSet.java",
                "tnLine": 527,
                "tnColumn": 71,
                "tnPatch": null,
                "tnCodeLine": "          && (!positiveItr.hasNext() || positiveItr.peek().lowerBound != Cut.<C>belowAll())) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JdkObsolete",
                "tnDesc": "It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.",
                "tnFile": "guava/src/com/google/common/collect/MultimapBuilder.java",
                "tnLine": 208,
                "tnColumn": 14,
                "tnPatch": null,
                "tnCodeLine": "      return new LinkedList<>();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "WaitNotInLoop",
                "tnDesc": "Because of spurious wakeups, await() must always be called in a loop",
                "tnFile": "guava/src/com/google/common/util/concurrent/ForwardingCondition.java",
                "tnLine": 27,
                "tnColumn": 21,
                "tnPatch": null,
                "tnCodeLine": "    delegate().await();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JUnit4ClassUsedInJUnit3",
                "tnDesc": "@Ignore cannot be used inside a JUnit3 class. Convert your class to JUnit4 style.",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/google/AbstractListMultimapTester.java",
                "tnLine": 31,
                "tnColumn": 1,
                "tnPatch": null,
                "tnCodeLine": "@Ignore // Affects only Android test runner, which respects JUnit 4 annotations on JUnit 3 tests.",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JUnit4ClassUsedInJUnit3",
                "tnDesc": "@Ignore cannot be used inside a JUnit3 class. Convert your class to JUnit4 style.",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/google/BiMapClearTester.java",
                "tnLine": 32,
                "tnColumn": 1,
                "tnPatch": null,
                "tnCodeLine": "@Ignore // Affects only Android test runner, which respects JUnit 4 annotations on JUnit 3 tests.",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ShortCircuitBoolean",
                "tnDesc": "Prefer the short-circuiting boolean operators && and || to & and |.",
                "tnFile": "guava/src/com/google/common/math/LongMath.java",
                "tnLine": 652,
                "tnColumn": 21,
                "tnPatch": null,
                "tnCodeLine": "    if ((a ^ b) < 0 | (a ^ naiveSum) >= 0) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "WaitNotInLoop",
                "tnDesc": "Because of spurious wakeups, awaitUntil(java.util.Date) must always be called in a loop",
                "tnFile": "guava/src/com/google/common/util/concurrent/ForwardingCondition.java",
                "tnLine": 47,
                "tnColumn": 33,
                "tnPatch": null,
                "tnCodeLine": "    return delegate().awaitUntil(deadline);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ReferenceEquality",
                "tnDesc": "Comparison using reference equality instead of value equality",
                "tnFile": "guava/src/com/google/common/collect/TreeRangeSet.java",
                "tnLine": 584,
                "tnColumn": 44,
                "tnPatch": null,
                "tnCodeLine": "            (positiveItr.peek().upperBound == Cut.<C>aboveAll())",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ShortCircuitBoolean",
                "tnDesc": "Prefer the short-circuiting boolean operators && and || to & and |.",
                "tnFile": "guava/src/com/google/common/math/DoubleMath.java",
                "tnLine": 258,
                "tnColumn": 34,
                "tnPatch": null,
                "tnCodeLine": "        increment = exponent < 0 & !isPowerOfTwo(x);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "AssertionFailureIgnored",
                "tnDesc": "This assertion throws an AssertionError if it fails, which will be caught by an enclosing try block.",
                "tnFile": "guava-testlib/src/com/google/common/util/concurrent/testing/AbstractListenableFutureTest.java",
                "tnLine": 80,
                "tnColumn": 29,
                "tnPatch": null,
                "tnCodeLine": "                  assertSame(Boolean.TRUE, future.get());",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JdkObsolete",
                "tnDesc": "SortedSet was replaced by NavigableSet in Java 6.",
                "tnFile": "guava/src/com/google/common/collect/Synchronized.java",
                "tnLine": 291,
                "tnColumn": 10,
                "tnPatch": null,
                "tnCodeLine": "  static class SynchronizedSortedSet<E> extends SynchronizedSet<E> implements SortedSet<E> {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JdkObsolete",
                "tnDesc": "SortedSet was replaced by NavigableSet in Java 6.",
                "tnFile": "guava/src/com/google/common/collect/Maps.java",
                "tnLine": 3746,
                "tnColumn": 10,
                "tnPatch": null,
                "tnCodeLine": "  static class SortedKeySet<K, V> extends KeySet<K, V> implements SortedSet<K> {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JUnit4ClassUsedInJUnit3",
                "tnDesc": "@Ignore cannot be used inside a JUnit3 class. Convert your class to JUnit4 style.",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/google/SortedSetMultimapAsMapTester.java",
                "tnLine": 36,
                "tnColumn": 1,
                "tnPatch": null,
                "tnCodeLine": "@Ignore // Affects only Android test runner, which respects JUnit 4 annotations on JUnit 3 tests.",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ShortCircuitBoolean",
                "tnDesc": "Prefer the short-circuiting boolean operators && and || to & and |.",
                "tnFile": "guava-gwt/target/classes/com/google/common/math/LongMath.java",
                "tnLine": 426,
                "tnColumn": 61,
                "tnPatch": null,
                "tnCodeLine": "          increment = (mode == HALF_UP | (mode == HALF_EVEN & (div & 1) != 0));",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ShortCircuitBoolean",
                "tnDesc": "Prefer the short-circuiting boolean operators && and || to & and |.",
                "tnFile": "guava/src/com/google/common/math/LongMath.java",
                "tnLine": 670,
                "tnColumn": 22,
                "tnPatch": null,
                "tnCodeLine": "    if ((a ^ b) >= 0 | (a ^ naiveDifference) >= 0) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JdkObsolete",
                "tnDesc": "SortedSet was replaced by NavigableSet in Java 6.",
                "tnFile": "guava/src/com/google/common/collect/SortedMultisets.java",
                "tnLine": 43,
                "tnColumn": 10,
                "tnPatch": null,
                "tnCodeLine": "  static class ElementSet<E> extends Multisets.ElementSet<E> implements SortedSet<E> {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JdkObsolete",
                "tnDesc": "SortedMap was replaced by NavigableMap in Java 6.",
                "tnFile": "guava/src/com/google/common/collect/Maps.java",
                "tnLine": 2963,
                "tnColumn": 18,
                "tnPatch": null,
                "tnCodeLine": "  private static class FilteredEntrySortedMap<K, V> extends FilteredEntryMap<K, V>",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UnusedNestedClass",
                "tnDesc": "This nested class is unused, and can be removed.",
                "tnFile": "guava/src/com/google/common/collect/FluentIterable.java",
                "tnLine": 845,
                "tnColumn": 18,
                "tnPatch": null,
                "tnCodeLine": "  private static class FromIterableFunction<E> implements Function<Iterable<E>, FluentIterable<E>> {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ShortCircuitBoolean",
                "tnDesc": "Prefer the short-circuiting boolean operators && and || to & and |.",
                "tnFile": "guava/src/com/google/common/math/IntMath.java",
                "tnLine": 521,
                "tnColumn": 54,
                "tnPatch": null,
                "tnCodeLine": "            checkNoOverflow(-FLOOR_SQRT_MAX_INT <= b & b <= FLOOR_SQRT_MAX_INT, \"checkedPow\", b, k);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UndefinedEquals",
                "tnDesc": "Collection does not have well-defined equals behavior.",
                "tnFile": "guava-gwt/target/classes/com/google/common/collect/FilteredEntryMultimap.java",
                "tnLine": 310,
                "tnColumn": 52,
                "tnPatch": null,
                "tnCodeLine": "              if (!collection.isEmpty() && c.equals(collection)) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "OperatorPrecedence",
                "tnDesc": "Use grouping parenthesis to make the operator precedence explicit",
                "tnFile": "guava-gwt/target/classes/com/google/common/math/LongMath.java",
                "tnLine": 742,
                "tnColumn": 53,
                "tnPatch": null,
                "tnCodeLine": "    long limit = Long.MAX_VALUE + ((b >>> Long.SIZE - 1) & (k & 1));",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ShortCircuitBoolean",
                "tnDesc": "Prefer the short-circuiting boolean operators && and || to & and |.",
                "tnFile": "guava-gwt/target/classes/com/google/common/math/IntMath.java",
                "tnLine": 605,
                "tnColumn": 41,
                "tnPatch": null,
                "tnCodeLine": "            if (-FLOOR_SQRT_MAX_INT > b | b > FLOOR_SQRT_MAX_INT) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ReferenceEquality",
                "tnDesc": "Comparison using reference equality instead of value equality",
                "tnFile": "guava-gwt/target/classes/com/google/common/collect/Range.java",
                "tnLine": 356,
                "tnColumn": 23,
                "tnPatch": null,
                "tnCodeLine": "        || upperBound == Cut.<C>belowAll()) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ShortCircuitBoolean",
                "tnDesc": "Prefer the short-circuiting boolean operators && and || to & and |.",
                "tnFile": "guava-gwt/target/classes/com/google/common/math/LongMath.java",
                "tnLine": 718,
                "tnColumn": 17,
                "tnPatch": null,
                "tnCodeLine": "    if (b >= -2 & b <= 2) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JUnit4ClassUsedInJUnit3",
                "tnDesc": "@Ignore cannot be used inside a JUnit3 class. Convert your class to JUnit4 style.",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/google/MultisetCountTester.java",
                "tnLine": 41,
                "tnColumn": 1,
                "tnPatch": null,
                "tnCodeLine": "@Ignore // Affects only Android test runner, which respects JUnit 4 annotations on JUnit 3 tests.",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ShortCircuitBoolean",
                "tnDesc": "Prefer the short-circuiting boolean operators && and || to & and |.",
                "tnFile": "guava-gwt/target/classes/com/google/common/math/LongMath.java",
                "tnLine": 652,
                "tnColumn": 21,
                "tnPatch": null,
                "tnCodeLine": "    if ((a ^ b) < 0 | (a ^ naiveSum) >= 0) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JUnit4ClassUsedInJUnit3",
                "tnDesc": "@Ignore cannot be used inside a JUnit3 class. Convert your class to JUnit4 style.",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/testers/AbstractSetTester.java",
                "tnLine": 26,
                "tnColumn": 1,
                "tnPatch": null,
                "tnCodeLine": "@Ignore // Affects only Android test runner, which respects JUnit 4 annotations on JUnit 3 tests.",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JUnit4ClassUsedInJUnit3",
                "tnDesc": "@Ignore cannot be used inside a JUnit3 class. Convert your class to JUnit4 style.",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/testers/MapComputeTester.java",
                "tnLine": 39,
                "tnColumn": 1,
                "tnPatch": null,
                "tnCodeLine": "@Ignore // Affects only Android test runner, which respects JUnit 4 annotations on JUnit 3 tests.",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JdkObsolete",
                "tnDesc": "It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.",
                "tnFile": "guava-gwt/target/classes/com/google/common/collect/MultimapBuilder.java",
                "tnLine": 208,
                "tnColumn": 14,
                "tnPatch": null,
                "tnCodeLine": "      return new LinkedList<>();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JdkObsolete",
                "tnDesc": "SortedMap was replaced by NavigableMap in Java 6.",
                "tnFile": "guava-gwt/target/classes/com/google/common/collect/ForwardingSortedMap.java",
                "tnLine": 54,
                "tnColumn": 17,
                "tnPatch": null,
                "tnCodeLine": "public abstract class ForwardingSortedMap<K, V> extends ForwardingMap<K, V>",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "WaitNotInLoop",
                "tnDesc": "Because of spurious wakeups, awaitUninterruptibly() must always be called in a loop",
                "tnFile": "guava/src/com/google/common/util/concurrent/ForwardingCondition.java",
                "tnLine": 37,
                "tnColumn": 36,
                "tnPatch": null,
                "tnCodeLine": "    delegate().awaitUninterruptibly();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JUnit4ClassUsedInJUnit3",
                "tnDesc": "@Ignore cannot be used inside a JUnit3 class. Convert your class to JUnit4 style.",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/testers/MapRemoveEntryTester.java",
                "tnLine": 38,
                "tnColumn": 1,
                "tnPatch": null,
                "tnCodeLine": "@Ignore // Affects only Android test runner, which respects JUnit 4 annotations on JUnit 3 tests.",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JUnit4ClassUsedInJUnit3",
                "tnDesc": "@Ignore cannot be used inside a JUnit3 class. Convert your class to JUnit4 style.",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/testers/MapToStringTester.java",
                "tnLine": 42,
                "tnColumn": 1,
                "tnPatch": null,
                "tnCodeLine": "@Ignore // Affects only Android test runner, which respects JUnit 4 annotations on JUnit 3 tests.",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "CatchAndPrintStackTrace",
                "tnDesc": "Logging or rethrowing exceptions should usually be preferred to catching and calling printStackTrace",
                "tnFile": "guava/src/com/google/common/io/FileBackedOutputStream.java",
                "tnLine": 105,
                "tnColumn": 17,
                "tnPatch": null,
                "tnCodeLine": "                t.printStackTrace(System.err);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JUnit4ClassUsedInJUnit3",
                "tnDesc": "@Ignore cannot be used inside a JUnit3 class. Convert your class to JUnit4 style.",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/google/MultimapValuesTester.java",
                "tnLine": 39,
                "tnColumn": 1,
                "tnPatch": null,
                "tnCodeLine": "@Ignore // Affects only Android test runner, which respects JUnit 4 annotations on JUnit 3 tests.",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ShortCircuitBoolean",
                "tnDesc": "Prefer the short-circuiting boolean operators && and || to & and |.",
                "tnFile": "guava/src/com/google/common/math/LongMath.java",
                "tnLine": 755,
                "tnColumn": 42,
                "tnPatch": null,
                "tnCodeLine": "            if (-FLOOR_SQRT_MAX_LONG > b | b > FLOOR_SQRT_MAX_LONG) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "IntLongMath",
                "tnDesc": "Expression of type int may overflow before being assigned to a long",
                "tnFile": "guava/src/com/google/common/hash/Murmur3_32HashFunction.java",
                "tnLine": 407,
                "tnColumn": 46,
                "tnPatch": null,
                "tnCodeLine": "    return (((0xF << 6) | (c >>> 6)) & 0xFF) | ((0x80 | (0x3F & c)) << 8);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JUnit4ClassUsedInJUnit3",
                "tnDesc": "@Ignore cannot be used inside a JUnit3 class. Convert your class to JUnit4 style.",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/google/MultimapEntriesTester.java",
                "tnLine": 45,
                "tnColumn": 1,
                "tnPatch": null,
                "tnCodeLine": "@Ignore // Affects only Android test runner, which respects JUnit 4 annotations on JUnit 3 tests.",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JUnit4ClassUsedInJUnit3",
                "tnDesc": "@Ignore cannot be used inside a JUnit3 class. Convert your class to JUnit4 style.",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/testers/CollectionRemoveAllTester.java",
                "tnLine": 46,
                "tnColumn": 1,
                "tnPatch": null,
                "tnCodeLine": "@Ignore // Affects only Android test runner, which respects JUnit 4 annotations on JUnit 3 tests.",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UndefinedEquals",
                "tnDesc": "Collection does not have well-defined equals behavior.",
                "tnFile": "guava-gwt/target/classes/com/google/common/base/Predicates.java",
                "tnLine": 566,
                "tnColumn": 29,
                "tnPatch": null,
                "tnCodeLine": "        return target.equals(that.target);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JUnit4ClassUsedInJUnit3",
                "tnDesc": "@Ignore cannot be used inside a JUnit3 class. Convert your class to JUnit4 style.",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/testers/MapEqualsTester.java",
                "tnLine": 40,
                "tnColumn": 1,
                "tnPatch": null,
                "tnCodeLine": "@Ignore // Affects only Android test runner, which respects JUnit 4 annotations on JUnit 3 tests.",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JdkObsolete",
                "tnDesc": "SortedMap was replaced by NavigableMap in Java 6.",
                "tnFile": "guava-gwt/target/classes/com/google/common/collect/AbstractMapBasedMultimap.java",
                "tnLine": 1436,
                "tnColumn": 11,
                "tnPatch": null,
                "tnCodeLine": "  private class SortedAsMap extends AsMap implements SortedMap<K, Collection<V>> {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JUnit4ClassUsedInJUnit3",
                "tnDesc": "@Ignore cannot be used inside a JUnit3 class. Convert your class to JUnit4 style.",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/google/MultimapAsMapTester.java",
                "tnLine": 49,
                "tnColumn": 1,
                "tnPatch": null,
                "tnCodeLine": "@Ignore // Affects only Android test runner, which respects JUnit 4 annotations on JUnit 3 tests.",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UndefinedEquals",
                "tnDesc": "Collection does not have well-defined equals behavior.",
                "tnFile": "guava/src/com/google/common/collect/AbstractMapBasedMultimap.java",
                "tnLine": 401,
                "tnColumn": 29,
                "tnPatch": null,
                "tnCodeLine": "      return delegate.equals(object);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UnsynchronizedOverridesSynchronized",
                "tnDesc": "Unsynchronized method reset overrides synchronized method in FilterInputStream",
                "tnFile": "guava/src/com/google/common/hash/HashingInputStream.java",
                "tnLine": 94,
                "tnColumn": 15,
                "tnPatch": null,
                "tnCodeLine": "  public void reset() throws IOException {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ReferenceEquality",
                "tnDesc": "Comparison using reference equality instead of value equality",
                "tnFile": "guava/src/com/google/common/collect/TreeRangeSet.java",
                "tnLine": 540,
                "tnColumn": 48,
                "tnPatch": null,
                "tnCodeLine": "              || nextComplementRangeLowerBound == Cut.<C>aboveAll()) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ShortCircuitBoolean",
                "tnDesc": "Prefer the short-circuiting boolean operators && and || to & and |.",
                "tnFile": "guava/src/com/google/common/util/concurrent/AggregateFuture.java",
                "tnLine": 64,
                "tnColumn": 25,
                "tnPatch": null,
                "tnCodeLine": "      if (isCancelled() & futures != null) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JUnit4ClassUsedInJUnit3",
                "tnDesc": "@Ignore cannot be used inside a JUnit3 class. Convert your class to JUnit4 style.",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/testers/ConcurrentMapRemoveTester.java",
                "tnLine": 38,
                "tnColumn": 1,
                "tnPatch": null,
                "tnCodeLine": "@Ignore // Affects only Android test runner, which respects JUnit 4 annotations on JUnit 3 tests.",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "OperatorPrecedence",
                "tnDesc": "Use grouping parenthesis to make the operator precedence explicit",
                "tnFile": "guava-gwt/target/classes/com/google/common/math/IntMath.java",
                "tnLine": 592,
                "tnColumn": 58,
                "tnPatch": null,
                "tnCodeLine": "    int limit = Integer.MAX_VALUE + ((b >>> Integer.SIZE - 1) & (k & 1));",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JUnit4ClassUsedInJUnit3",
                "tnDesc": "@Ignore cannot be used inside a JUnit3 class. Convert your class to JUnit4 style.",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/testers/CollectionRetainAllTester.java",
                "tnLine": 43,
                "tnColumn": 1,
                "tnPatch": null,
                "tnCodeLine": "@Ignore // Affects only Android test runner, which respects JUnit 4 annotations on JUnit 3 tests.",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ShortCircuitBoolean",
                "tnDesc": "Prefer the short-circuiting boolean operators && and || to & and |.",
                "tnFile": "guava-gwt/target/classes/com/google/common/math/LongMath.java",
                "tnLine": 97,
                "tnColumn": 18,
                "tnPatch": null,
                "tnCodeLine": "    return x > 0 & (x & (x - 1)) == 0;",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ShortCircuitBoolean",
                "tnDesc": "Prefer the short-circuiting boolean operators && and || to & and |.",
                "tnFile": "guava/src/com/google/common/util/concurrent/Monitor.java",
                "tnLine": 852,
                "tnColumn": 35,
                "tnPatch": null,
                "tnCodeLine": "    if (!((guard.monitor == this) & lock.isHeldByCurrentThread())) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ShortCircuitBoolean",
                "tnDesc": "Prefer the short-circuiting boolean operators && and || to & and |.",
                "tnFile": "guava-gwt/target/classes/com/google/common/math/LongMath.java",
                "tnLine": 547,
                "tnColumn": 33,
                "tnPatch": null,
                "tnCodeLine": "    checkNoOverflow((a ^ b) < 0 | (a ^ result) >= 0, \"checkedAdd\", a, b);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JUnit4ClassUsedInJUnit3",
                "tnDesc": "@Ignore cannot be used inside a JUnit3 class. Convert your class to JUnit4 style.",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/google/MultimapPutIterableTester.java",
                "tnLine": 43,
                "tnColumn": 1,
                "tnPatch": null,
                "tnCodeLine": "@Ignore // Affects only Android test runner, which respects JUnit 4 annotations on JUnit 3 tests.",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JUnit4ClassUsedInJUnit3",
                "tnDesc": "@Ignore cannot be used inside a JUnit3 class. Convert your class to JUnit4 style.",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/testers/ListLastIndexOfTester.java",
                "tnLine": 35,
                "tnColumn": 1,
                "tnPatch": null,
                "tnCodeLine": "@Ignore // Affects only Android test runner, which respects JUnit 4 annotations on JUnit 3 tests.",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JdkObsolete",
                "tnDesc": "SortedMap was replaced by NavigableMap in Java 6.",
                "tnFile": "guava/src/com/google/common/collect/Maps.java",
                "tnLine": 2086,
                "tnColumn": 10,
                "tnPatch": null,
                "tnCodeLine": "  static class TransformedEntriesSortedMap<K, V1, V2> extends TransformedEntriesMap<K, V1, V2>",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ShortCircuitBoolean",
                "tnDesc": "Prefer the short-circuiting boolean operators && and || to & and |.",
                "tnFile": "guava-gwt/target/classes/com/google/common/math/LongMath.java",
                "tnLine": 755,
                "tnColumn": 42,
                "tnPatch": null,
                "tnCodeLine": "            if (-FLOOR_SQRT_MAX_LONG > b | b > FLOOR_SQRT_MAX_LONG) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JUnit4ClassUsedInJUnit3",
                "tnDesc": "@Ignore cannot be used inside a JUnit3 class. Convert your class to JUnit4 style.",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/google/MultisetSetCountConditionallyTester.java",
                "tnLine": 36,
                "tnColumn": 1,
                "tnPatch": null,
                "tnCodeLine": "@Ignore // Affects only Android test runner, which respects JUnit 4 annotations on JUnit 3 tests.",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JUnit4ClassUsedInJUnit3",
                "tnDesc": "@Ignore cannot be used inside a JUnit3 class. Convert your class to JUnit4 style.",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/testers/SetAddAllTester.java",
                "tnLine": 36,
                "tnColumn": 1,
                "tnPatch": null,
                "tnCodeLine": "@Ignore // Affects only Android test runner, which respects JUnit 4 annotations on JUnit 3 tests.",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "IntLongMath",
                "tnDesc": "Expression of type int may overflow before being assigned to a long",
                "tnFile": "guava/src/com/google/common/hash/Murmur3_32HashFunction.java",
                "tnLine": 403,
                "tnColumn": 9,
                "tnPatch": null,
                "tnCodeLine": "        | ((0x80 | (0x3F & c)) << 16);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JUnit4ClassUsedInJUnit3",
                "tnDesc": "@Ignore cannot be used inside a JUnit3 class. Convert your class to JUnit4 style.",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/testers/NavigableSetNavigationTester.java",
                "tnLine": 45,
                "tnColumn": 1,
                "tnPatch": null,
                "tnCodeLine": "@Ignore // Affects only Android test runner, which respects JUnit 4 annotations on JUnit 3 tests.",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ReferenceEquality",
                "tnDesc": "Comparison using reference equality instead of value equality",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/Helpers.java",
                "tnLine": 465,
                "tnColumn": 15,
                "tnPatch": null,
                "tnCodeLine": "      if (lhs == rhs) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ShortCircuitBoolean",
                "tnDesc": "Prefer the short-circuiting boolean operators && and || to & and |.",
                "tnFile": "guava-gwt/target/classes/com/google/common/math/LongMath.java",
                "tnLine": 698,
                "tnColumn": 34,
                "tnPatch": null,
                "tnCodeLine": "    if (leadingZeros < Long.SIZE | (a < 0 & b == Long.MIN_VALUE)) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JUnit4ClassUsedInJUnit3",
                "tnDesc": "@Ignore cannot be used inside a JUnit3 class. Convert your class to JUnit4 style.",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/google/MultimapSizeTester.java",
                "tnLine": 39,
                "tnColumn": 1,
                "tnPatch": null,
                "tnCodeLine": "@Ignore // Affects only Android test runner, which respects JUnit 4 annotations on JUnit 3 tests.",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JUnit4ClassUsedInJUnit3",
                "tnDesc": "@Ignore cannot be used inside a JUnit3 class. Convert your class to JUnit4 style.",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/testers/ListAddAllAtIndexTester.java",
                "tnLine": 41,
                "tnColumn": 1,
                "tnPatch": null,
                "tnCodeLine": "@Ignore // Affects only Android test runner, which respects JUnit 4 annotations on JUnit 3 tests.",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ReferenceEquality",
                "tnDesc": "Comparison using reference equality instead of value equality",
                "tnFile": "guava/src/com/google/common/io/BaseEncoding.java",
                "tnLine": 831,
                "tnColumn": 37,
                "tnPatch": null,
                "tnCodeLine": "        result = lowerCase = (lower == alphabet) ? this : newInstance(lower, paddingChar);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ReferenceEquality",
                "tnDesc": "Comparison using reference equality instead of value equality",
                "tnFile": "guava-gwt/target/classes/com/google/common/collect/LinkedListMultimap.java",
                "tnLine": 541,
                "tnColumn": 19,
                "tnPatch": null,
                "tnCodeLine": "      if (current != next) { // after call to next()",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JUnit4ClassUsedInJUnit3",
                "tnDesc": "@Ignore cannot be used inside a JUnit3 class. Convert your class to JUnit4 style.",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/testers/SetRemoveTester.java",
                "tnLine": 34,
                "tnColumn": 1,
                "tnPatch": null,
                "tnCodeLine": "@Ignore // Affects only Android test runner, which respects JUnit 4 annotations on JUnit 3 tests.",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ShortCircuitBoolean",
                "tnDesc": "Prefer the short-circuiting boolean operators && and || to & and |.",
                "tnFile": "guava/src/com/google/common/math/LongMath.java",
                "tnLine": 547,
                "tnColumn": 33,
                "tnPatch": null,
                "tnCodeLine": "    checkNoOverflow((a ^ b) < 0 | (a ^ result) >= 0, \"checkedAdd\", a, b);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ShortCircuitBoolean",
                "tnDesc": "Prefer the short-circuiting boolean operators && and || to & and |.",
                "tnFile": "guava-gwt/target/classes/com/google/common/math/LongMath.java",
                "tnLine": 426,
                "tnColumn": 40,
                "tnPatch": null,
                "tnCodeLine": "          increment = (mode == HALF_UP | (mode == HALF_EVEN & (div & 1) != 0));",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JUnit4ClassUsedInJUnit3",
                "tnDesc": "@Ignore cannot be used inside a JUnit3 class. Convert your class to JUnit4 style.",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/google/BiMapInverseTester.java",
                "tnLine": 42,
                "tnColumn": 1,
                "tnPatch": null,
                "tnCodeLine": "@Ignore // Affects only Android test runner, which respects JUnit 4 annotations on JUnit 3 tests.",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ReferenceEquality",
                "tnDesc": "Comparison using reference equality instead of value equality",
                "tnFile": "guava-gwt/target/classes/com/google/common/collect/Range.java",
                "tnLine": 355,
                "tnColumn": 23,
                "tnPatch": null,
                "tnCodeLine": "        || lowerBound == Cut.<C>aboveAll()",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UndefinedEquals",
                "tnDesc": "Multimap does not have well-defined equals behavior.",
                "tnFile": "guava-gwt/target/classes/com/google/common/collect/ForwardingMultimap.java",
                "tnLine": 146,
                "tnColumn": 47,
                "tnPatch": null,
                "tnCodeLine": "    return object == this || delegate().equals(object);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ReferenceEquality",
                "tnDesc": "Comparison using reference equality instead of value equality",
                "tnFile": "guava/src/com/google/common/hash/BloomFilter.java",
                "tnLine": 229,
                "tnColumn": 17,
                "tnPatch": null,
                "tnCodeLine": "    return this != that",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JdkObsolete",
                "tnDesc": "SortedMap was replaced by NavigableMap in Java 6.",
                "tnFile": "guava/src/com/google/common/collect/StandardRowSortedTable.java",
                "tnLine": 93,
                "tnColumn": 11,
                "tnPatch": null,
                "tnCodeLine": "  private class RowSortedMap extends RowMap implements SortedMap<R, Map<C, V>> {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ShortCircuitBoolean",
                "tnDesc": "Prefer the short-circuiting boolean operators && and || to & and |.",
                "tnFile": "guava/src/com/google/common/math/LongMath.java",
                "tnLine": 559,
                "tnColumn": 34,
                "tnPatch": null,
                "tnCodeLine": "    checkNoOverflow((a ^ b) >= 0 | (a ^ result) >= 0, \"checkedSubtract\", a, b);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JdkObsolete",
                "tnDesc": "SortedMap was replaced by NavigableMap in Java 6.",
                "tnFile": "guava/src/com/google/common/collect/ForwardingSortedMap.java",
                "tnLine": 54,
                "tnColumn": 17,
                "tnPatch": null,
                "tnCodeLine": "public abstract class ForwardingSortedMap<K, V> extends ForwardingMap<K, V>",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UnusedVariable",
                "tnDesc": "The parameter 'stream' is never read.",
                "tnFile": "guava-gwt/target/classes/com/google/common/collect/ImmutableAsList.java",
                "tnLine": 76,
                "tnColumn": 45,
                "tnPatch": null,
                "tnCodeLine": "  private void readObject(ObjectInputStream stream) throws InvalidObjectException {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JdkObsolete",
                "tnDesc": "SortedSet was replaced by NavigableSet in Java 6.",
                "tnFile": "guava/src/com/google/common/collect/Sets.java",
                "tnLine": 1153,
                "tnColumn": 18,
                "tnPatch": null,
                "tnCodeLine": "  private static class FilteredSortedSet<E> extends FilteredSet<E> implements SortedSet<E> {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ShortCircuitBoolean",
                "tnDesc": "Prefer the short-circuiting boolean operators && and || to & and |.",
                "tnFile": "guava/src/com/google/common/math/LongMath.java",
                "tnLine": 718,
                "tnColumn": 17,
                "tnPatch": null,
                "tnCodeLine": "    if (b >= -2 & b <= 2) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JdkObsolete",
                "tnDesc": "SortedSet was replaced by NavigableSet in Java 6.",
                "tnFile": "guava-gwt/target/classes/com/google/common/collect/Maps.java",
                "tnLine": 2986,
                "tnColumn": 5,
                "tnPatch": null,
                "tnCodeLine": "    class SortedKeySet extends KeySet implements SortedSet<K> {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JUnit4ClassUsedInJUnit3",
                "tnDesc": "@Ignore cannot be used inside a JUnit3 class. Convert your class to JUnit4 style.",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/testers/ListRemoveTester.java",
                "tnLine": 35,
                "tnColumn": 1,
                "tnPatch": null,
                "tnCodeLine": "@Ignore // Affects only Android test runner, which respects JUnit 4 annotations on JUnit 3 tests.",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ReferenceEquality",
                "tnDesc": "Comparison using reference equality instead of value equality",
                "tnFile": "guava/src/com/google/common/io/BaseEncoding.java",
                "tnLine": 821,
                "tnColumn": 37,
                "tnPatch": null,
                "tnCodeLine": "        result = upperCase = (upper == alphabet) ? this : newInstance(upper, paddingChar);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JUnit4ClassUsedInJUnit3",
                "tnDesc": "@Ignore cannot be used inside a JUnit3 class. Convert your class to JUnit4 style.",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/google/ListMultimapPutTester.java",
                "tnLine": 36,
                "tnColumn": 1,
                "tnPatch": null,
                "tnCodeLine": "@Ignore // Affects only Android test runner, which respects JUnit 4 annotations on JUnit 3 tests.",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JUnit4ClassUsedInJUnit3",
                "tnDesc": "@Ignore cannot be used inside a JUnit3 class. Convert your class to JUnit4 style.",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/google/SetMultimapAsMapTester.java",
                "tnLine": 45,
                "tnColumn": 1,
                "tnPatch": null,
                "tnCodeLine": "@Ignore // Affects only Android test runner, which respects JUnit 4 annotations on JUnit 3 tests.",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ShortCircuitBoolean",
                "tnDesc": "Prefer the short-circuiting boolean operators && and || to & and |.",
                "tnFile": "guava/src/com/google/common/util/concurrent/AggregateFuture.java",
                "tnLine": 190,
                "tnColumn": 11,
                "tnPatch": null,
                "tnCodeLine": "          | (allMustSucceed & !completedWithFailure & firstTimeSeeingThisException)) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "MissingFail",
                "tnDesc": "Not calling fail() when expecting an exception masks bugs",
                "tnFile": "guava-testlib/src/com/google/common/util/concurrent/testing/AbstractListenableFutureTest.java",
                "tnLine": 177,
                "tnColumn": 19,
                "tnPatch": null,
                "tnCodeLine": "                  future.get();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UnusedNestedClass",
                "tnDesc": "This nested class is unused, and can be removed.",
                "tnFile": "guava-gwt/target/classes/com/google/common/collect/FluentIterable.java",
                "tnLine": 845,
                "tnColumn": 18,
                "tnPatch": null,
                "tnCodeLine": "  private static class FromIterableFunction<E> implements Function<Iterable<E>, FluentIterable<E>> {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JUnit4ClassUsedInJUnit3",
                "tnDesc": "@Ignore cannot be used inside a JUnit3 class. Convert your class to JUnit4 style.",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/testers/MapReplaceTester.java",
                "tnLine": 39,
                "tnColumn": 1,
                "tnPatch": null,
                "tnCodeLine": "@Ignore // Affects only Android test runner, which respects JUnit 4 annotations on JUnit 3 tests.",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ReferenceEquality",
                "tnDesc": "Comparison using reference equality instead of value equality",
                "tnFile": "guava/src/com/google/common/collect/Range.java",
                "tnLine": 356,
                "tnColumn": 23,
                "tnPatch": null,
                "tnCodeLine": "        || upperBound == Cut.<C>belowAll()) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JdkObsolete",
                "tnDesc": "SortedMap was replaced by NavigableMap in Java 6.",
                "tnFile": "guava/src/com/google/common/collect/Maps.java",
                "tnLine": 965,
                "tnColumn": 18,
                "tnPatch": null,
                "tnCodeLine": "  private static class SortedAsMapView<K, V> extends AsMapView<K, V> implements SortedMap<K, V> {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JUnit4ClassUsedInJUnit3",
                "tnDesc": "@Ignore cannot be used inside a JUnit3 class. Convert your class to JUnit4 style.",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/google/ListMultimapAsMapTester.java",
                "tnLine": 45,
                "tnColumn": 1,
                "tnPatch": null,
                "tnCodeLine": "@Ignore // Affects only Android test runner, which respects JUnit 4 annotations on JUnit 3 tests.",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ReferenceEquality",
                "tnDesc": "Comparison using reference equality instead of value equality",
                "tnFile": "guava-gwt/target/classes/com/google/common/collect/Range.java",
                "tnLine": 389,
                "tnColumn": 23,
                "tnPatch": null,
                "tnCodeLine": "    return upperBound != Cut.aboveAll();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ShortCircuitBoolean",
                "tnDesc": "Prefer the short-circuiting boolean operators && and || to & and |.",
                "tnFile": "guava/src/com/google/common/collect/GeneralRange.java",
                "tnLine": 166,
                "tnColumn": 32,
                "tnPatch": null,
                "tnCodeLine": "    return cmp > 0 | (cmp == 0 & getUpperBoundType() == OPEN);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ShortCircuitBoolean",
                "tnDesc": "Prefer the short-circuiting boolean operators && and || to & and |.",
                "tnFile": "guava-gwt/target/classes/com/google/common/math/LongMath.java",
                "tnLine": 670,
                "tnColumn": 22,
                "tnPatch": null,
                "tnCodeLine": "    if ((a ^ b) >= 0 | (a ^ naiveDifference) >= 0) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JdkObsolete",
                "tnDesc": "SortedMap was replaced by NavigableMap in Java 6.",
                "tnFile": "guava-gwt/target/classes/com/google/common/collect/StandardRowSortedTable.java",
                "tnLine": 93,
                "tnColumn": 11,
                "tnPatch": null,
                "tnCodeLine": "  private class RowSortedMap extends RowMap implements SortedMap<R, Map<C, V>> {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "AmbiguousMethodReference",
                "tnDesc": "This method's reference is ambiguous, its name and functional interface type are the same as: toJavaUtil()",
                "tnFile": "guava-gwt/target/classes/com/google/common/base/Optional.java",
                "tnLine": 141,
                "tnColumn": 53,
                "tnPatch": null,
                "tnCodeLine": "  public static <T> java.util.@Nullable Optional<T> toJavaUtil(",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JUnit4ClassUsedInJUnit3",
                "tnDesc": "@Ignore cannot be used inside a JUnit3 class. Convert your class to JUnit4 style.",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/google/MultimapToStringTester.java",
                "tnLine": 36,
                "tnColumn": 1,
                "tnPatch": null,
                "tnCodeLine": "@Ignore // Affects only Android test runner, which respects JUnit 4 annotations on JUnit 3 tests.",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ShortCircuitBoolean",
                "tnDesc": "Prefer the short-circuiting boolean operators && and || to & and |.",
                "tnFile": "guava/src/com/google/common/math/LongMath.java",
                "tnLine": 589,
                "tnColumn": 28,
                "tnPatch": null,
                "tnCodeLine": "    checkNoOverflow(a >= 0 | b != Long.MIN_VALUE, \"checkedMultiply\", a, b);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JUnit4ClassUsedInJUnit3",
                "tnDesc": "@Ignore cannot be used inside a JUnit3 class. Convert your class to JUnit4 style.",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/testers/MapGetTester.java",
                "tnLine": 38,
                "tnColumn": 1,
                "tnPatch": null,
                "tnCodeLine": "@Ignore // Affects only Android test runner, which respects JUnit 4 annotations on JUnit 3 tests.",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UnusedVariable",
                "tnDesc": "The local variable 'closeBracketIndex' is never read.",
                "tnFile": "guava/src/com/google/common/net/HostAndPort.java",
                "tnLine": 213,
                "tnColumn": 9,
                "tnPatch": null,
                "tnCodeLine": "    int closeBracketIndex = 0;",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ShortCircuitBoolean",
                "tnDesc": "Prefer the short-circuiting boolean operators && and || to & and |.",
                "tnFile": "guava-gwt/target/classes/com/google/common/math/LongMath.java",
                "tnLine": 559,
                "tnColumn": 34,
                "tnPatch": null,
                "tnCodeLine": "    checkNoOverflow((a ^ b) >= 0 | (a ^ result) >= 0, \"checkedSubtract\", a, b);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ReferenceEquality",
                "tnDesc": "Comparison using reference equality instead of value equality",
                "tnFile": "guava/src/com/google/common/collect/Range.java",
                "tnLine": 638,
                "tnColumn": 19,
                "tnPatch": null,
                "tnCodeLine": "    return (lower == lowerBound && upper == upperBound) ? this : create(lower, upper);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JdkObsolete",
                "tnDesc": "SortedSet was replaced by NavigableSet in Java 6.",
                "tnFile": "guava-gwt/target/classes/com/google/common/collect/ForwardingSortedSet.java",
                "tnLine": 55,
                "tnColumn": 17,
                "tnPatch": null,
                "tnCodeLine": "public abstract class ForwardingSortedSet<E> extends ForwardingSet<E> implements SortedSet<E> {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "WaitNotInLoop",
                "tnDesc": "Because of spurious wakeups, awaitNanos(long) must always be called in a loop",
                "tnFile": "guava/src/com/google/common/util/concurrent/ForwardingCondition.java",
                "tnLine": 42,
                "tnColumn": 33,
                "tnPatch": null,
                "tnCodeLine": "    return delegate().awaitNanos(nanosTimeout);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UnusedVariable",
                "tnDesc": "The parameter 'stream' is never read.",
                "tnFile": "guava-gwt/target/classes/com/google/common/collect/ImmutableList.java",
                "tnLine": 693,
                "tnColumn": 45,
                "tnPatch": null,
                "tnCodeLine": "  private void readObject(ObjectInputStream stream) throws InvalidObjectException {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ReferenceEquality",
                "tnDesc": "Comparison using reference equality instead of value equality",
                "tnFile": "guava/src/com/google/common/io/Files.java",
                "tnLine": 374,
                "tnColumn": 15,
                "tnPatch": null,
                "tnCodeLine": "    if (file1 == file2 || file1.equals(file2)) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JUnit4ClassUsedInJUnit3",
                "tnDesc": "@Ignore cannot be used inside a JUnit3 class. Convert your class to JUnit4 style.",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/testers/MapForEachTester.java",
                "tnLine": 44,
                "tnColumn": 1,
                "tnPatch": null,
                "tnCodeLine": "@Ignore // Affects only Android test runner, which respects JUnit 4 annotations on JUnit 3 tests.",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JdkObsolete",
                "tnDesc": "Enumeration is an ancient precursor to Iterator.",
                "tnFile": "guava-gwt/target/classes/com/google/common/collect/Iterators.java",
                "tnLine": 1098,
                "tnColumn": 12,
                "tnPatch": null,
                "tnCodeLine": "    return new Enumeration<T>() {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JUnit4ClassUsedInJUnit3",
                "tnDesc": "@Ignore cannot be used inside a JUnit3 class. Convert your class to JUnit4 style.",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/google/MultisetEntrySetTester.java",
                "tnLine": 43,
                "tnColumn": 1,
                "tnPatch": null,
                "tnCodeLine": "@Ignore // Affects only Android test runner, which respects JUnit 4 annotations on JUnit 3 tests.",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JUnit4ClassUsedInJUnit3",
                "tnDesc": "@Ignore cannot be used inside a JUnit3 class. Convert your class to JUnit4 style.",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/testers/MapReplaceAllTester.java",
                "tnLine": 42,
                "tnColumn": 1,
                "tnPatch": null,
                "tnCodeLine": "@Ignore // Affects only Android test runner, which respects JUnit 4 annotations on JUnit 3 tests.",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JdkObsolete",
                "tnDesc": "Stack is a nonstandard class that predates the Java Collections Framework; prefer ArrayDeque. Note that the Stack methods push/pop/peek correspond to the Deque methods addFirst/removeFirst/peekFirst.",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/AbstractIteratorTester.java",
                "tnLine": 138,
                "tnColumn": 35,
                "tnPatch": null,
                "tnCodeLine": "    final Stack<E> nextElements = new Stack<E>();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ShortCircuitBoolean",
                "tnDesc": "Prefer the short-circuiting boolean operators && and || to & and |.",
                "tnFile": "guava/src/com/google/common/math/DoubleMath.java",
                "tnLine": 134,
                "tnColumn": 37,
                "tnPatch": null,
                "tnCodeLine": "        z > MIN_INT_AS_DOUBLE - 1.0 & z < MAX_INT_AS_DOUBLE + 1.0, x, mode);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ShortCircuitBoolean",
                "tnDesc": "Prefer the short-circuiting boolean operators && and || to & and |.",
                "tnFile": "guava/src/com/google/common/math/LongMath.java",
                "tnLine": 698,
                "tnColumn": 34,
                "tnPatch": null,
                "tnCodeLine": "    if (leadingZeros < Long.SIZE | (a < 0 & b == Long.MIN_VALUE)) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JUnit4ClassUsedInJUnit3",
                "tnDesc": "@Ignore cannot be used inside a JUnit3 class. Convert your class to JUnit4 style.",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/google/MultimapRemoveAllTester.java",
                "tnLine": 42,
                "tnColumn": 1,
                "tnPatch": null,
                "tnCodeLine": "@Ignore // Affects only Android test runner, which respects JUnit 4 annotations on JUnit 3 tests.",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ShortCircuitBoolean",
                "tnDesc": "Prefer the short-circuiting boolean operators && and || to & and |.",
                "tnFile": "guava/src/com/google/common/math/LongMath.java",
                "tnLine": 604,
                "tnColumn": 17,
                "tnPatch": null,
                "tnCodeLine": "    if (b >= -2 & b <= 2) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JUnit4ClassUsedInJUnit3",
                "tnDesc": "@Ignore cannot be used inside a JUnit3 class. Convert your class to JUnit4 style.",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/google/MultimapContainsValueTester.java",
                "tnLine": 35,
                "tnColumn": 1,
                "tnPatch": null,
                "tnCodeLine": "@Ignore // Affects only Android test runner, which respects JUnit 4 annotations on JUnit 3 tests.",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JUnit4ClassUsedInJUnit3",
                "tnDesc": "@Ignore cannot be used inside a JUnit3 class. Convert your class to JUnit4 style.",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/testers/CollectionContainsTester.java",
                "tnLine": 38,
                "tnColumn": 1,
                "tnPatch": null,
                "tnCodeLine": "@Ignore // Affects only Android test runner, which respects JUnit 4 annotations on JUnit 3 tests.",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ShortCircuitBoolean",
                "tnDesc": "Prefer the short-circuiting boolean operators && and || to & and |.",
                "tnFile": "guava/src/com/google/common/util/concurrent/AbstractCatchingFuture.java",
                "tnLine": 76,
                "tnColumn": 9,
                "tnPatch": null,
                "tnCodeLine": "        | isCancelled()) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ReferenceEquality",
                "tnDesc": "Comparison using reference equality instead of value equality",
                "tnFile": "guava/src/com/google/common/collect/Range.java",
                "tnLine": 363,
                "tnColumn": 23,
                "tnPatch": null,
                "tnCodeLine": "    return lowerBound != Cut.belowAll();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UnusedMethod",
                "tnDesc": "Private method 'logPatternCompilerError' is never used.",
                "tnFile": "guava-gwt/target/classes/com/google/common/base/Platform.java",
                "tnLine": 82,
                "tnColumn": 23,
                "tnPatch": null,
                "tnCodeLine": "  private static void logPatternCompilerError(ServiceConfigurationError e) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "SynchronizeOnNonFinalField",
                "tnDesc": "Synchronizing on non-final fields is not safe: if the field is ever updated, different threads may end up locking on different objects.",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/testers/CollectionStreamTester.java",
                "tnLine": 44,
                "tnColumn": 18,
                "tnPatch": null,
                "tnCodeLine": "    synchronized (collection) { // to allow Collections.synchronized* tests to pass",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JdkObsolete",
                "tnDesc": "SortedMap was replaced by NavigableMap in Java 6.",
                "tnFile": "guava-gwt/target/classes/com/google/common/collect/Maps.java",
                "tnLine": 2086,
                "tnColumn": 10,
                "tnPatch": null,
                "tnCodeLine": "  static class TransformedEntriesSortedMap<K, V1, V2> extends TransformedEntriesMap<K, V1, V2>",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UndefinedEquals",
                "tnDesc": "Collection does not have well-defined equals behavior.",
                "tnFile": "guava/src/com/google/common/base/Predicates.java",
                "tnLine": 566,
                "tnColumn": 29,
                "tnPatch": null,
                "tnCodeLine": "        return target.equals(that.target);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "MissingOverride",
                "tnDesc": "headSetImpl implements method in ImmutableSortedSet; expected @Override",
                "tnFile": "guava/src/com/google/common/collect/ContiguousSet.java",
                "tnLine": 196,
                "tnColumn": 29,
                "tnPatch": null,
                "tnCodeLine": "  abstract ContiguousSet<C> headSetImpl(C toElement, boolean inclusive);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "MissingOverride",
                "tnDesc": "tailSetImpl implements method in ImmutableSortedSet; expected @Override",
                "tnFile": "guava/src/com/google/common/collect/ContiguousSet.java",
                "tnLine": 203,
                "tnColumn": 29,
                "tnPatch": null,
                "tnCodeLine": "  abstract ContiguousSet<C> tailSetImpl(C fromElement, boolean inclusive);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JUnit4ClassUsedInJUnit3",
                "tnDesc": "@Ignore cannot be used inside a JUnit3 class. Convert your class to JUnit4 style.",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/testers/CollectionClearTester.java",
                "tnLine": 39,
                "tnColumn": 1,
                "tnPatch": null,
                "tnCodeLine": "@Ignore // Affects only Android test runner, which respects JUnit 4 annotations on JUnit 3 tests.",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JdkObsolete",
                "tnDesc": "It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.",
                "tnFile": "guava/src/com/google/common/io/LineReader.java",
                "tnLine": 46,
                "tnColumn": 39,
                "tnPatch": null,
                "tnCodeLine": "  private final Queue<String> lines = new LinkedList<>();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JUnit4ClassUsedInJUnit3",
                "tnDesc": "@Ignore cannot be used inside a JUnit3 class. Convert your class to JUnit4 style.",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/testers/CollectionSerializationTester.java",
                "tnLine": 34,
                "tnColumn": 1,
                "tnPatch": null,
                "tnCodeLine": "@Ignore // Affects only Android test runner, which respects JUnit 4 annotations on JUnit 3 tests.",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JdkObsolete",
                "tnDesc": "SortedSet was replaced by NavigableSet in Java 6.",
                "tnFile": "guava-gwt/target/classes/com/google/common/collect/AbstractMapBasedMultimap.java",
                "tnLine": 987,
                "tnColumn": 11,
                "tnPatch": null,
                "tnCodeLine": "  private class SortedKeySet extends KeySet implements SortedSet<K> {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "InputStreamSlowMultibyteRead",
                "tnDesc": "Please also override int read(byte[], int, int), otherwise multi-byte reads from this input stream are likely to be slow.",
                "tnFile": "guava/src/com/google/common/io/BaseEncoding.java",
                "tnLine": 741,
                "tnColumn": 20,
                "tnPatch": null,
                "tnCodeLine": "        public int read() throws IOException {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JdkObsolete",
                "tnDesc": "Enumeration is an ancient precursor to Iterator.",
                "tnFile": "guava/src/com/google/common/collect/Iterators.java",
                "tnLine": 1098,
                "tnColumn": 12,
                "tnPatch": null,
                "tnCodeLine": "    return new Enumeration<T>() {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JUnit4ClassUsedInJUnit3",
                "tnDesc": "@Ignore cannot be used inside a JUnit3 class. Convert your class to JUnit4 style.",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/google/MultimapContainsEntryTester.java",
                "tnLine": 37,
                "tnColumn": 1,
                "tnPatch": null,
                "tnCodeLine": "@Ignore // Affects only Android test runner, which respects JUnit 4 annotations on JUnit 3 tests.",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JdkObsolete",
                "tnDesc": "SortedMap was replaced by NavigableMap in Java 6.",
                "tnFile": "guava/src/com/google/common/collect/AbstractMapBasedMultimap.java",
                "tnLine": 1436,
                "tnColumn": 11,
                "tnPatch": null,
                "tnCodeLine": "  private class SortedAsMap extends AsMap implements SortedMap<K, Collection<V>> {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JdkObsolete",
                "tnDesc": "SortedSet was replaced by NavigableSet in Java 6.",
                "tnFile": "guava-gwt/target/classes/com/google/common/collect/AbstractMapBasedMultimap.java",
                "tnLine": 615,
                "tnColumn": 3,
                "tnPatch": null,
                "tnCodeLine": "  class WrappedSortedSet extends WrappedCollection implements SortedSet<V> {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JUnit4ClassUsedInJUnit3",
                "tnDesc": "@Ignore cannot be used inside a JUnit3 class. Convert your class to JUnit4 style.",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/testers/ConcurrentMapReplaceEntryTester.java",
                "tnLine": 39,
                "tnColumn": 1,
                "tnPatch": null,
                "tnCodeLine": "@Ignore // Affects only Android test runner, which respects JUnit 4 annotations on JUnit 3 tests.",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JdkObsolete",
                "tnDesc": "SortedMap was replaced by NavigableMap in Java 6.",
                "tnFile": "guava-gwt/target/classes/com/google/common/collect/Maps.java",
                "tnLine": 2963,
                "tnColumn": 18,
                "tnPatch": null,
                "tnCodeLine": "  private static class FilteredEntrySortedMap<K, V> extends FilteredEntryMap<K, V>",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JdkObsolete",
                "tnDesc": "It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.",
                "tnFile": "guava-gwt/target/classes/com/google/common/collect/Lists.java",
                "tnLine": 214,
                "tnColumn": 12,
                "tnPatch": null,
                "tnCodeLine": "    return new LinkedList<>();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ShortCircuitBoolean",
                "tnDesc": "Prefer the short-circuiting boolean operators && and || to & and |.",
                "tnFile": "guava/src/com/google/common/util/concurrent/Monitor.java",
                "tnLine": 822,
                "tnColumn": 35,
                "tnPatch": null,
                "tnCodeLine": "    if (!((guard.monitor == this) & lock.isHeldByCurrentThread())) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JUnit4ClassUsedInJUnit3",
                "tnDesc": "@Ignore cannot be used inside a JUnit3 class. Convert your class to JUnit4 style.",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/google/MultisetReadsTester.java",
                "tnLine": 36,
                "tnColumn": 1,
                "tnPatch": null,
                "tnCodeLine": "@Ignore // Affects only Android test runner, which respects JUnit 4 annotations on JUnit 3 tests.",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UnusedVariable",
                "tnDesc": "The parameter 'stream' is never read.",
                "tnFile": "guava/src/com/google/common/collect/ImmutableList.java",
                "tnLine": 693,
                "tnColumn": 45,
                "tnPatch": null,
                "tnCodeLine": "  private void readObject(ObjectInputStream stream) throws InvalidObjectException {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JdkObsolete",
                "tnDesc": "It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/TestsForQueuesInJavaUtil.java",
                "tnLine": 146,
                "tnColumn": 24,
                "tnPatch": null,
                "tnCodeLine": "                return new LinkedList<>(MinimalCollection.of(elements));",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "AmbiguousMethodReference",
                "tnDesc": "This method's reference is ambiguous, its name and functional interface type are the same as: toJavaUtil()",
                "tnFile": "guava/src/com/google/common/base/Optional.java",
                "tnLine": 141,
                "tnColumn": 53,
                "tnPatch": null,
                "tnCodeLine": "  public static <T> java.util.@Nullable Optional<T> toJavaUtil(",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JUnit4ClassUsedInJUnit3",
                "tnDesc": "@Ignore cannot be used inside a JUnit3 class. Convert your class to JUnit4 style.",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/testers/MapGetOrDefaultTester.java",
                "tnLine": 39,
                "tnColumn": 1,
                "tnPatch": null,
                "tnCodeLine": "@Ignore // Affects only Android test runner, which respects JUnit 4 annotations on JUnit 3 tests.",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ShortCircuitBoolean",
                "tnDesc": "Prefer the short-circuiting boolean operators && and || to & and |.",
                "tnFile": "guava-gwt/target/classes/com/google/common/math/LongMath.java",
                "tnLine": 698,
                "tnColumn": 43,
                "tnPatch": null,
                "tnCodeLine": "    if (leadingZeros < Long.SIZE | (a < 0 & b == Long.MIN_VALUE)) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JUnit4ClassUsedInJUnit3",
                "tnDesc": "@Ignore cannot be used inside a JUnit3 class. Convert your class to JUnit4 style.",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/google/MultimapPutTester.java",
                "tnLine": 46,
                "tnColumn": 1,
                "tnPatch": null,
                "tnCodeLine": "@Ignore // Affects only Android test runner, which respects JUnit 4 annotations on JUnit 3 tests.",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ReferenceEquality",
                "tnDesc": "Comparison using reference equality instead of value equality",
                "tnFile": "guava-gwt/target/classes/com/google/common/collect/LinkedListMultimap.java",
                "tnLine": 360,
                "tnColumn": 19,
                "tnPatch": null,
                "tnCodeLine": "      if (current != next) { // after call to next()",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UndefinedEquals",
                "tnDesc": "Collection does not have well-defined equals behavior.",
                "tnFile": "guava/src/com/google/common/collect/FilteredEntryMultimap.java",
                "tnLine": 310,
                "tnColumn": 52,
                "tnPatch": null,
                "tnCodeLine": "              if (!collection.isEmpty() && c.equals(collection)) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ShortCircuitBoolean",
                "tnDesc": "Prefer the short-circuiting boolean operators && and || to & and |.",
                "tnFile": "guava/src/com/google/common/math/DoubleMath.java",
                "tnLine": 159,
                "tnColumn": 38,
                "tnPatch": null,
                "tnCodeLine": "        MIN_LONG_AS_DOUBLE - z < 1.0 & z < MAX_LONG_AS_DOUBLE_PLUS_ONE, x, mode);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JUnit4ClassUsedInJUnit3",
                "tnDesc": "@Ignore cannot be used inside a JUnit3 class. Convert your class to JUnit4 style.",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/testers/MapEntrySetTester.java",
                "tnLine": 49,
                "tnColumn": 1,
                "tnPatch": null,
                "tnCodeLine": "@Ignore // Affects only Android test runner, which respects JUnit 4 annotations on JUnit 3 tests.",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JUnit4ClassUsedInJUnit3",
                "tnDesc": "@Ignore cannot be used inside a JUnit3 class. Convert your class to JUnit4 style.",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/testers/CollectionRemoveTester.java",
                "tnLine": 43,
                "tnColumn": 1,
                "tnPatch": null,
                "tnCodeLine": "@Ignore // Affects only Android test runner, which respects JUnit 4 annotations on JUnit 3 tests.",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ShortCircuitBoolean",
                "tnDesc": "Prefer the short-circuiting boolean operators && and || to & and |.",
                "tnFile": "guava/src/com/google/common/math/IntMath.java",
                "tnLine": 361,
                "tnColumn": 62,
                "tnPatch": null,
                "tnCodeLine": "          increment = (mode == HALF_UP || (mode == HALF_EVEN & (div & 1) != 0));",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JdkObsolete",
                "tnDesc": "It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.",
                "tnFile": "guava/src/com/google/common/collect/Lists.java",
                "tnLine": 214,
                "tnColumn": 12,
                "tnPatch": null,
                "tnCodeLine": "    return new LinkedList<>();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JUnit4ClassUsedInJUnit3",
                "tnDesc": "@Ignore cannot be used inside a JUnit3 class. Convert your class to JUnit4 style.",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/testers/QueuePollTester.java",
                "tnLine": 38,
                "tnColumn": 1,
                "tnPatch": null,
                "tnCodeLine": "@Ignore // Affects only Android test runner, which respects JUnit 4 annotations on JUnit 3 tests.",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ShortCircuitBoolean",
                "tnDesc": "Prefer the short-circuiting boolean operators && and || to & and |.",
                "tnFile": "guava/src/com/google/common/math/LongMath.java",
                "tnLine": 698,
                "tnColumn": 43,
                "tnPatch": null,
                "tnCodeLine": "    if (leadingZeros < Long.SIZE | (a < 0 & b == Long.MIN_VALUE)) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ShortCircuitBoolean",
                "tnDesc": "Prefer the short-circuiting boolean operators && and || to & and |.",
                "tnFile": "guava/src/com/google/common/collect/GeneralRange.java",
                "tnLine": 166,
                "tnColumn": 20,
                "tnPatch": null,
                "tnCodeLine": "    return cmp > 0 | (cmp == 0 & getUpperBoundType() == OPEN);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ShortCircuitBoolean",
                "tnDesc": "Prefer the short-circuiting boolean operators && and || to & and |.",
                "tnFile": "guava/src/com/google/common/util/concurrent/Monitor.java",
                "tnLine": 869,
                "tnColumn": 35,
                "tnPatch": null,
                "tnCodeLine": "    if (!((guard.monitor == this) & lock.isHeldByCurrentThread())) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UndefinedEquals",
                "tnDesc": "Multimap does not have well-defined equals behavior.",
                "tnFile": "guava/src/com/google/common/collect/Synchronized.java",
                "tnLine": 746,
                "tnColumn": 33,
                "tnPatch": null,
                "tnCodeLine": "        return delegate().equals(o);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JdkObsolete",
                "tnDesc": "SortedSet was replaced by NavigableSet in Java 6.",
                "tnFile": "guava-gwt/target/classes/com/google/common/collect/Sets.java",
                "tnLine": 1153,
                "tnColumn": 18,
                "tnPatch": null,
                "tnCodeLine": "  private static class FilteredSortedSet<E> extends FilteredSet<E> implements SortedSet<E> {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JdkObsolete",
                "tnDesc": "SortedMap was replaced by NavigableMap in Java 6.",
                "tnFile": "guava-gwt/target/classes/com/google/common/collect/Maps.java",
                "tnLine": 965,
                "tnColumn": 18,
                "tnPatch": null,
                "tnCodeLine": "  private static class SortedAsMapView<K, V> extends AsMapView<K, V> implements SortedMap<K, V> {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JdkObsolete",
                "tnDesc": "SortedSet was replaced by NavigableSet in Java 6.",
                "tnFile": "guava/src/com/google/common/collect/Maps.java",
                "tnLine": 2986,
                "tnColumn": 5,
                "tnPatch": null,
                "tnCodeLine": "    class SortedKeySet extends KeySet implements SortedSet<K> {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UnusedVariable",
                "tnDesc": "The field 'exception' is never read.",
                "tnFile": "guava-testlib/src/com/google/common/util/concurrent/testing/SameThreadScheduledExecutorService.java",
                "tnLine": 152,
                "tnColumn": 32,
                "tnPatch": null,
                "tnCodeLine": "    private ExecutionException exception;",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ThreadLocalUsage",
                "tnDesc": "ThreadLocals should be stored in static fields",
                "tnFile": "guava/src/com/google/common/eventbus/Dispatcher.java",
                "tnLine": 79,
                "tnColumn": 9,
                "tnPatch": null,
                "tnCodeLine": "        new ThreadLocal<Queue<Event>>() {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JdkObsolete",
                "tnDesc": "SortedSet was replaced by NavigableSet in Java 6.",
                "tnFile": "guava-gwt/target/classes/com/google/common/collect/Synchronized.java",
                "tnLine": 291,
                "tnColumn": 10,
                "tnPatch": null,
                "tnCodeLine": "  static class SynchronizedSortedSet<E> extends SynchronizedSet<E> implements SortedSet<E> {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ShortCircuitBoolean",
                "tnDesc": "Prefer the short-circuiting boolean operators && and || to & and |.",
                "tnFile": "guava/src/com/google/common/util/concurrent/AbstractTransformFuture.java",
                "tnLine": 67,
                "tnColumn": 50,
                "tnPatch": null,
                "tnCodeLine": "    if (isCancelled() | localInputFuture == null | localFunction == null) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UnusedVariable",
                "tnDesc": "The local variable 'colonIndex' is never read.",
                "tnFile": "guava/src/com/google/common/net/HostAndPort.java",
                "tnLine": 212,
                "tnColumn": 9,
                "tnPatch": null,
                "tnCodeLine": "    int colonIndex = 0;",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JUnit4ClassUsedInJUnit3",
                "tnDesc": "@Ignore cannot be used inside a JUnit3 class. Convert your class to JUnit4 style.",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/google/ListMultimapReplaceValuesTester.java",
                "tnLine": 33,
                "tnColumn": 1,
                "tnPatch": null,
                "tnCodeLine": "@Ignore // Affects only Android test runner, which respects JUnit 4 annotations on JUnit 3 tests.",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JdkObsolete",
                "tnDesc": "SortedSet was replaced by NavigableSet in Java 6.",
                "tnFile": "guava/src/com/google/common/collect/AbstractMapBasedMultimap.java",
                "tnLine": 615,
                "tnColumn": 3,
                "tnPatch": null,
                "tnCodeLine": "  class WrappedSortedSet extends WrappedCollection implements SortedSet<V> {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JUnit4ClassUsedInJUnit3",
                "tnDesc": "@Ignore cannot be used inside a JUnit3 class. Convert your class to JUnit4 style.",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/google/ListMultimapEqualsTester.java",
                "tnLine": 32,
                "tnColumn": 1,
                "tnPatch": null,
                "tnCodeLine": "@Ignore // Affects only Android test runner, which respects JUnit 4 annotations on JUnit 3 tests.",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JUnit4ClassUsedInJUnit3",
                "tnDesc": "@Ignore cannot be used inside a JUnit3 class. Convert your class to JUnit4 style.",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/testers/CollectionStreamTester.java",
                "tnLine": 35,
                "tnColumn": 1,
                "tnPatch": null,
                "tnCodeLine": "@Ignore // Affects only Android test runner, which respects JUnit 4 annotations on JUnit 3 tests.",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ShortCircuitBoolean",
                "tnDesc": "Prefer the short-circuiting boolean operators && and || to & and |.",
                "tnFile": "guava/src/com/google/common/math/LongMath.java",
                "tnLine": 426,
                "tnColumn": 40,
                "tnPatch": null,
                "tnCodeLine": "          increment = (mode == HALF_UP | (mode == HALF_EVEN & (div & 1) != 0));",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JdkObsolete",
                "tnDesc": "SortedSet was replaced by NavigableSet in Java 6.",
                "tnFile": "guava/src/com/google/common/collect/AbstractMapBasedMultimap.java",
                "tnLine": 987,
                "tnColumn": 11,
                "tnPatch": null,
                "tnCodeLine": "  private class SortedKeySet extends KeySet implements SortedSet<K> {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UnusedVariable",
                "tnDesc": "The field 'b' is never read.",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/testers/SortedSetNavigationTester.java",
                "tnLine": 46,
                "tnColumn": 13,
                "tnPatch": null,
                "tnCodeLine": "  private E b;",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JUnit4ClassUsedInJUnit3",
                "tnDesc": "@Ignore cannot be used inside a JUnit3 class. Convert your class to JUnit4 style.",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/testers/SortedSetNavigationTester.java",
                "tnLine": 40,
                "tnColumn": 1,
                "tnPatch": null,
                "tnCodeLine": "@Ignore // Affects only Android test runner, which respects JUnit 4 annotations on JUnit 3 tests.",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "MissingOverride",
                "tnDesc": "subSetImpl implements method in ImmutableSortedSet; expected @Override",
                "tnFile": "guava/src/com/google/common/collect/ContiguousSet.java",
                "tnLine": 199,
                "tnColumn": 29,
                "tnPatch": null,
                "tnCodeLine": "  abstract ContiguousSet<C> subSetImpl(",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ReferenceEquality",
                "tnDesc": "Comparison using reference equality instead of value equality",
                "tnFile": "guava/src/com/google/common/collect/Range.java",
                "tnLine": 638,
                "tnColumn": 42,
                "tnPatch": null,
                "tnCodeLine": "    return (lower == lowerBound && upper == upperBound) ? this : create(lower, upper);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JUnit4ClassUsedInJUnit3",
                "tnDesc": "@Ignore cannot be used inside a JUnit3 class. Convert your class to JUnit4 style.",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/google/MultimapEqualsTester.java",
                "tnLine": 38,
                "tnColumn": 1,
                "tnPatch": null,
                "tnCodeLine": "@Ignore // Affects only Android test runner, which respects JUnit 4 annotations on JUnit 3 tests.",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JUnit4ClassUsedInJUnit3",
                "tnDesc": "@Ignore cannot be used inside a JUnit3 class. Convert your class to JUnit4 style.",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/testers/AbstractQueueTester.java",
                "tnLine": 30,
                "tnColumn": 1,
                "tnPatch": null,
                "tnCodeLine": "@Ignore // Affects only Android test runner, which respects JUnit 4 annotations on JUnit 3 tests.",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ImmutableEnumChecker",
                "tnDesc": "enums should be immutable: 'MapFeature' has field 'implied' of type 'java.util.Set<com.google.common.collect.testing.features.Feature<? super java.util.Map>>', 'Set' is mutable",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/features/MapFeature.java",
                "tnLine": 76,
                "tnColumn": 43,
                "tnPatch": null,
                "tnCodeLine": "  private final Set<Feature<? super Map>> implied;",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JdkObsolete",
                "tnDesc": "SortedMap was replaced by NavigableMap in Java 6.",
                "tnFile": "guava-gwt/target/classes/com/google/common/collect/Synchronized.java",
                "tnLine": 1237,
                "tnColumn": 10,
                "tnPatch": null,
                "tnCodeLine": "  static class SynchronizedSortedMap<K, V> extends SynchronizedMap<K, V>",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JUnit4ClassUsedInJUnit3",
                "tnDesc": "@Ignore cannot be used inside a JUnit3 class. Convert your class to JUnit4 style.",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/google/SetMultimapReplaceValuesTester.java",
                "tnLine": 33,
                "tnColumn": 1,
                "tnPatch": null,
                "tnCodeLine": "@Ignore // Affects only Android test runner, which respects JUnit 4 annotations on JUnit 3 tests.",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "UndefinedEquals",
                "tnDesc": "Multimap does not have well-defined equals behavior.",
                "tnFile": "guava/src/com/google/common/collect/ForwardingMultimap.java",
                "tnLine": 146,
                "tnColumn": 47,
                "tnPatch": null,
                "tnCodeLine": "    return object == this || delegate().equals(object);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JUnit4ClassUsedInJUnit3",
                "tnDesc": "@Ignore cannot be used inside a JUnit3 class. Convert your class to JUnit4 style.",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/google/BiMapRemoveTester.java",
                "tnLine": 36,
                "tnColumn": 1,
                "tnPatch": null,
                "tnCodeLine": "@Ignore // Affects only Android test runner, which respects JUnit 4 annotations on JUnit 3 tests.",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JUnit4ClassUsedInJUnit3",
                "tnDesc": "@Ignore cannot be used inside a JUnit3 class. Convert your class to JUnit4 style.",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/testers/ListAddAllTester.java",
                "tnLine": 36,
                "tnColumn": 1,
                "tnPatch": null,
                "tnCodeLine": "@Ignore // Affects only Android test runner, which respects JUnit 4 annotations on JUnit 3 tests.",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "OperatorPrecedence",
                "tnDesc": "Use grouping parenthesis to make the operator precedence explicit",
                "tnFile": "guava/src/com/google/common/math/IntMath.java",
                "tnLine": 592,
                "tnColumn": 58,
                "tnPatch": null,
                "tnCodeLine": "    int limit = Integer.MAX_VALUE + ((b >>> Integer.SIZE - 1) & (k & 1));",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JUnit4ClassUsedInJUnit3",
                "tnDesc": "@Ignore cannot be used inside a JUnit3 class. Convert your class to JUnit4 style.",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/google/MultimapForEachTester.java",
                "tnLine": 36,
                "tnColumn": 1,
                "tnPatch": null,
                "tnCodeLine": "@Ignore // Affects only Android test runner, which respects JUnit 4 annotations on JUnit 3 tests.",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JUnit4ClassUsedInJUnit3",
                "tnDesc": "@Ignore cannot be used inside a JUnit3 class. Convert your class to JUnit4 style.",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/testers/CollectionContainsAllTester.java",
                "tnLine": 42,
                "tnColumn": 1,
                "tnPatch": null,
                "tnCodeLine": "@Ignore // Affects only Android test runner, which respects JUnit 4 annotations on JUnit 3 tests.",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JUnit4ClassUsedInJUnit3",
                "tnDesc": "@Ignore cannot be used inside a JUnit3 class. Convert your class to JUnit4 style.",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/google/AbstractMultisetTester.java",
                "tnLine": 30,
                "tnColumn": 1,
                "tnPatch": null,
                "tnCodeLine": "@Ignore // Affects only Android test runner, which respects JUnit 4 annotations on JUnit 3 tests.",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ReferenceEquality",
                "tnDesc": "Comparison using reference equality instead of value equality",
                "tnFile": "guava/src/com/google/common/collect/TreeRangeSet.java",
                "tnLine": 600,
                "tnColumn": 45,
                "tnPatch": null,
                "tnCodeLine": "          if (nextComplementRangeUpperBound == Cut.<C>belowAll()) {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ReferenceEquality",
                "tnDesc": "Comparison using reference equality instead of value equality",
                "tnFile": "guava-gwt/target/classes/com/google/common/collect/Range.java",
                "tnLine": 363,
                "tnColumn": 23,
                "tnPatch": null,
                "tnCodeLine": "    return lowerBound != Cut.belowAll();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JUnit4ClassUsedInJUnit3",
                "tnDesc": "@Ignore cannot be used inside a JUnit3 class. Convert your class to JUnit4 style.",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/testers/ListSubListTester.java",
                "tnLine": 50,
                "tnColumn": 1,
                "tnPatch": null,
                "tnCodeLine": "@Ignore // Affects only Android test runner, which respects JUnit 4 annotations on JUnit 3 tests.",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ShortCircuitBoolean",
                "tnDesc": "Prefer the short-circuiting boolean operators && and || to & and |.",
                "tnFile": "guava/src/com/google/common/math/IntMath.java",
                "tnLine": 94,
                "tnColumn": 18,
                "tnPatch": null,
                "tnCodeLine": "    return x > 0 & (x & (x - 1)) == 0;",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JdkObsolete",
                "tnDesc": "SortedMap was replaced by NavigableMap in Java 6.",
                "tnFile": "guava-gwt/target/classes/com/google/common/collect/TreeBasedTable.java",
                "tnLine": 171,
                "tnColumn": 11,
                "tnPatch": null,
                "tnCodeLine": "  private class TreeRow extends Row implements SortedMap<C, V> {",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ReferenceEquality",
                "tnDesc": "Comparison using reference equality instead of value equality",
                "tnFile": "guava/src/com/google/common/hash/BloomFilter.java",
                "tnLine": 247,
                "tnColumn": 24,
                "tnPatch": null,
                "tnCodeLine": "    checkArgument(this != that, \"Cannot combine a BloomFilter with itself.\");",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JdkObsolete",
                "tnDesc": "Stack is a nonstandard class that predates the Java Collections Framework; prefer ArrayDeque. Note that the Stack methods push/pop/peek correspond to the Deque methods addFirst/removeFirst/peekFirst.",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/AbstractIteratorTester.java",
                "tnLine": 143,
                "tnColumn": 39,
                "tnPatch": null,
                "tnCodeLine": "    final Stack<E> previousElements = new Stack<E>();",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "JUnit4ClassUsedInJUnit3",
                "tnDesc": "@Ignore cannot be used inside a JUnit3 class. Convert your class to JUnit4 style.",
                "tnFile": "guava-testlib/src/com/google/common/collect/testing/testers/CollectionRemoveIfTester.java",
                "tnLine": 43,
                "tnColumn": 1,
                "tnPatch": null,
                "tnCodeLine": "@Ignore // Affects only Android test runner, which respects JUnit 4 annotations on JUnit 3 tests.",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ShortCircuitBoolean",
                "tnDesc": "Prefer the short-circuiting boolean operators && and || to & and |.",
                "tnFile": "guava/src/com/google/common/collect/GeneralRange.java",
                "tnLine": 157,
                "tnColumn": 32,
                "tnPatch": null,
                "tnCodeLine": "    return cmp < 0 | (cmp == 0 & getLowerBoundType() == OPEN);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              },
              {
                "tnType": "ShortCircuitBoolean",
                "tnDesc": "Prefer the short-circuiting boolean operators && and || to & and |.",
                "tnFile": "guava/src/com/google/common/collect/GeneralRange.java",
                "tnLine": 129,
                "tnColumn": 46,
                "tnPatch": null,
                "tnCodeLine": "        checkArgument(lowerBoundType != OPEN | upperBoundType != OPEN);",
                "tnProcedure": null,
                "tnPhase": "PhaseUnknown", 
 	 	 	 	 	 	 	 	 "severity":,
                "tnTool": {
                  "tag": "ErrorProne_JDK8"
                }
              }
            ],
            null,
            {
              "analysisLOC": null,
              "analysisBuildSys": "Maven []",
              "analysisLang": null
            }
          ]
        }
      ]
    ]
  }
}